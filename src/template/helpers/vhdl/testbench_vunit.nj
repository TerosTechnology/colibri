{% include "../header.nj" -%}
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library src_lib;
--
library vunit_lib;
context vunit_lib.vunit_context;

entity {{ name }}_tb is
{{ indent[1] }}generic (
{{ indent[2] }}runner_cfg : string
{{ indent[1] }});
end;

architecture bench of {{ name }}_tb is
{{ indent[1] }}-- Clock period
{{ indent[1] }}constant clk_period : time := 5 ns;
{{ indent[1] }}-- Generics
{% for generic_inst in generic -%}
{{ indent[1] }}constant {{generic_inst['info']['name']}} : {{generic_inst['type']}};
{% endfor -%}
{{ indent[1] }}-- Ports
{% for port_inst in port -%}
{{ indent[1] }}signal {{port_inst['info']['name']}} : {{port_inst['type']}};
{% endfor -%}
{% if instance_style == "separate" %}
{{ indent[1] }}{% include "./hdl_element_component.nj" %}
{% endif -%}
begin

{{ indent[1] }}{% include "./hdl_element_instance.nj" %}
{{ indent[1] }}main : process
{{ indent[1] }}begin
{{ indent[2] }}test_runner_setup(runner, runner_cfg);
{{ indent[2] }}while test_suite loop
{{ indent[3] }}if run("test_alive") then
{{ indent[4] }}info("Hello world test_alive");
{{ indent[4] }}wait for 100 * clk_period;
{{ indent[4] }}test_runner_cleanup(runner);
        
{{ indent[3] }}elsif run("test_0") then
{{ indent[4] }}info("Hello world test_0");
{{ indent[4] }}wait for 100 * clk_period;
{{ indent[4] }}test_runner_cleanup(runner);
{{ indent[3] }}end if;
{{ indent[2] }}end loop;
{{ indent[1] }}end process main;

{% include "./clock.nj" %}
end;