// Copyright 2022
// Carlos Alberto Ruiz Naranjo [carlosruiznaranjo@gmail.com]
//
// This file is part of colibri2
//
// Colibri is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Colibri is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with colibri2.  If not, see <https://www.gnu.org/licenses/>.

import { e_config } from "../../config/config_declaration";

export interface TestItem {
    test_type: string | undefined,
    location: {
        file_name: string;
        length: number;
        offset: number;
    } | undefined;
    name: string;
}

/** Character location */
export type t_location = {
    filename: string;
    length: number;
    offset: number;
}

/** Test declaration */
export type t_test_declaration = {
    /** Test name */
    name: string;
    /** Test type */
    test_type: string;
    /** Filename */
    filename: string;
    /** Test location */
    location: t_location | undefined;
}

/** Artifact type */
export enum e_artifact_type {
    TEXT = "text",
    FILE = "file",
    FOLDER = "folder",
    HTML = "html",
}

/** Test artifact */
export type t_test_artifact = {
    /** Artifact name */
    name: string;
    /** Artifact path */
    path: string;
    /** If associated command */
    command: string;
    /** Type of artifact */
    type: e_artifact_type
}

/** Test result */
export type t_test_result = {
    /** Test name */
    name: string;
    config: e_config;
    edam: any;
    config_summary_path: string;
    /** Artifact generated by the test. E.g: binary, HTML result */
    artifact: t_test_artifact[];
    /** True if test pass */
    successful: boolean;
    build_path: string;
    stdout: string;
    stderr: string;
    time: number
}