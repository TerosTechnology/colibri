{
  "stats": {
    "suites": 67,
    "tests": 217,
    "passes": 202,
    "pending": 15,
    "failures": 0,
    "start": "2023-01-11T18:05:06.440Z",
    "end": "2023-01-11T18:05:28.826Z",
    "duration": 22386,
    "testsRegistered": 219,
    "passPercent": 99.01960784313727,
    "pendingPercent": 6.8493150684931505,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b60f3f9b-5d09-43e4-9749-5a311e39b2c4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "62e2c824-5e9e-4d2e-83b7-4fa782d4f92a",
          "parentUUID": "b60f3f9b-5d09-43e4-9749-5a311e39b2c4",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "33118b5c-cc0d-43cf-9b38-d8a5680e8240",
          "parentUUID": "b60f3f9b-5d09-43e4-9749-5a311e39b2c4",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "3eeb2228-7a27-4cdf-bbf0-acf8a71b5c1f",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9bc7ebcf-90d3-4b61-816b-7d3cc9cbfd25",
              "parentUUID": "3eeb2228-7a27-4cdf-bbf0-acf8a71b5c1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "9bc7ebcf-90d3-4b61-816b-7d3cc9cbfd25"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dabcee80-4991-43a1-8473-24dafe5749ca",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 2248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "4cb9841b-ae72-4ca1-9fbc-cb2eff94bc41",
              "parentUUID": "dabcee80-4991-43a1-8473-24dafe5749ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4cb9841b-ae72-4ca1-9fbc-cb2eff94bc41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2248,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "a803f54f-2080-4ba5-9f31-7863acdc9fa4",
              "parentUUID": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "a11a7eb8-6eb9-4e69-9f57-da107b5f2891",
              "parentUUID": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "af2a22e9-78ac-426c-a4af-e8a1e55a7844",
              "parentUUID": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "7abaf054-4664-400a-ac04-44c32cb89507",
              "parentUUID": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "3d5fc243-c7a4-4c38-88d2-d014c1b04520",
              "parentUUID": "299a191d-fda8-42bb-9e6a-dc6aca10dc04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a803f54f-2080-4ba5-9f31-7863acdc9fa4",
            "a11a7eb8-6eb9-4e69-9f57-da107b5f2891",
            "af2a22e9-78ac-426c-a4af-e8a1e55a7844",
            "7abaf054-4664-400a-ac04-44c32cb89507",
            "3d5fc243-c7a4-4c38-88d2-d014c1b04520"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 502,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "21071e14-5304-4eed-9a24-4e48c54dfea5",
              "parentUUID": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "139cf5d7-7406-4d7f-9d28-9898893d2b58",
              "parentUUID": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "6ca13467-363c-4aeb-ab51-d0ce94ea20f4",
              "parentUUID": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "5f0b9730-ddb5-405e-af63-0f8278971d29",
              "parentUUID": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "b5a91b5d-2f6f-46ab-b48b-428c0ed1f6c1",
              "parentUUID": "9bdc3eb0-3688-43db-bae7-871c4f626e45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21071e14-5304-4eed-9a24-4e48c54dfea5",
            "139cf5d7-7406-4d7f-9d28-9898893d2b58",
            "6ca13467-363c-4aeb-ab51-d0ce94ea20f4",
            "5f0b9730-ddb5-405e-af63-0f8278971d29",
            "b5a91b5d-2f6f-46ab-b48b-428c0ed1f6c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3554,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b956d23-df39-4dfe-b7b3-44b44472f853",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2ba9737b-37d2-49aa-82cc-b133638fd81a",
              "parentUUID": "2b956d23-df39-4dfe-b7b3-44b44472f853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "3e3ae051-f176-487b-a981-bc599088c6f1",
              "parentUUID": "2b956d23-df39-4dfe-b7b3-44b44472f853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "0c6dfa7f-2bd1-4caa-9ef6-538b9def82af",
              "parentUUID": "2b956d23-df39-4dfe-b7b3-44b44472f853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2adfa10b-5ed1-4fac-9cb3-adde8347f617",
              "parentUUID": "2b956d23-df39-4dfe-b7b3-44b44472f853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 420,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "deba333d-1352-4ce1-a9b5-6921373b9c5d",
              "parentUUID": "2b956d23-df39-4dfe-b7b3-44b44472f853",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ba9737b-37d2-49aa-82cc-b133638fd81a",
            "3e3ae051-f176-487b-a981-bc599088c6f1",
            "0c6dfa7f-2bd1-4caa-9ef6-538b9def82af",
            "2adfa10b-5ed1-4fac-9cb3-adde8347f617",
            "deba333d-1352-4ce1-a9b5-6921373b9c5d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2463,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "72bdbe1a-6fbb-48cc-81f4-4a53a30a5df8",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "fc379b1b-4e0a-469d-a06f-de1767a7d4f1",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "1a68367c-c35b-42a4-99a0-75f5aace1d12",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "aad572bb-8e05-43ac-bb9f-3317c91c5cbb",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "f9e93920-32ba-4f60-9bc9-647180d9c782",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "c91cc4c7-5149-4b8d-b9d5-db0218eea795",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a897a9b5-55a8-442a-8670-d2a70a695d50",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e15a7210-2724-42d3-8883-6fe60c153067",
              "parentUUID": "e92974e5-a7e4-4f79-9f00-b0d9db66e68f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72bdbe1a-6fbb-48cc-81f4-4a53a30a5df8",
            "fc379b1b-4e0a-469d-a06f-de1767a7d4f1",
            "1a68367c-c35b-42a4-99a0-75f5aace1d12",
            "aad572bb-8e05-43ac-bb9f-3317c91c5cbb",
            "f9e93920-32ba-4f60-9bc9-647180d9c782",
            "c91cc4c7-5149-4b8d-b9d5-db0218eea795",
            "a897a9b5-55a8-442a-8670-d2a70a695d50",
            "e15a7210-2724-42d3-8883-6fe60c153067"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d202e313-a0b0-417d-9984-a454348c9671",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "d3ecd96b-3b0c-43d4-bcd1-541da8e212c8",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3cb4e138-969b-48a4-9d08-7cfab9184ff7",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "389e6b1f-6dba-4535-afe0-b7254832f470",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "da026f6a-9afd-482e-b8b2-f5c4d02cac9a",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "f149310e-bbd2-4b6b-a8a0-d59ca1e2c411",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3de04cb0-55f7-4a80-ab98-713b4177c815",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "c32cb935-b72a-4d31-a372-3182bae76210",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b6ad8be3-dbe4-4ad6-8442-8d1bb4d8361f",
              "parentUUID": "d202e313-a0b0-417d-9984-a454348c9671",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3ecd96b-3b0c-43d4-bcd1-541da8e212c8",
            "3cb4e138-969b-48a4-9d08-7cfab9184ff7",
            "389e6b1f-6dba-4535-afe0-b7254832f470",
            "da026f6a-9afd-482e-b8b2-f5c4d02cac9a",
            "f149310e-bbd2-4b6b-a8a0-d59ca1e2c411",
            "3de04cb0-55f7-4a80-ab98-713b4177c815",
            "c32cb935-b72a-4d31-a372-3182bae76210",
            "b6ad8be3-dbe4-4ad6-8442-8d1bb4d8361f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "72cbfbba-6e4c-4fd6-94ca-9db0537d920b",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f64dd03e-5fe7-48e7-ad4d-aa527409bd77",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "440866a0-00e1-436f-909f-38aae11ddab7",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "6ce02262-75f1-41a2-b70c-bf5d752f2573",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "a54ced86-7231-4588-b89b-7e570e858152",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "fde5732d-3688-4f09-a0e0-080c12c48212",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f2d3c6ba-86ec-4425-8175-a692652b6bfb",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "e3def605-9a39-4de8-99d5-a49572c277ad",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "8c05a86b-d0f7-43d0-985b-bd5b8934a200",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "d4a58343-2078-4e2d-a50a-3cb31399012d",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "57795a9a-f2aa-4d42-bc38-73c9049bb78a",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "937fe512-f6eb-42a0-a934-606c631e52e8",
              "parentUUID": "4898766f-b8cf-4019-98e4-f72a05ccabbe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72cbfbba-6e4c-4fd6-94ca-9db0537d920b",
            "f64dd03e-5fe7-48e7-ad4d-aa527409bd77",
            "440866a0-00e1-436f-909f-38aae11ddab7",
            "a54ced86-7231-4588-b89b-7e570e858152",
            "fde5732d-3688-4f09-a0e0-080c12c48212",
            "f2d3c6ba-86ec-4425-8175-a692652b6bfb",
            "e3def605-9a39-4de8-99d5-a49572c277ad",
            "8c05a86b-d0f7-43d0-985b-bd5b8934a200",
            "d4a58343-2078-4e2d-a50a-3cb31399012d",
            "57795a9a-f2aa-4d42-bc38-73c9049bb78a",
            "937fe512-f6eb-42a0-a934-606c631e52e8"
          ],
          "failures": [],
          "pending": [
            "6ce02262-75f1-41a2-b70c-bf5d752f2573"
          ],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fba997b0-8ad3-4edf-a132-713d10eedffe",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "22665913-09c5-4c61-a010-0e033fcc5dea",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "40a453b9-067f-4685-b4b2-3c8e0b3e4edb",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "528de23a-c45b-4c6b-944b-b3c9128bc495",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "07ac99d6-b1a3-47a5-9da0-331cfd806ab3",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "e642dcdc-1802-4582-a642-3194a0bae718",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b1ae239d-be77-46ae-8b81-e6b90c4dd8e5",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "6a4e4f88-5115-4ffd-8484-8a6929ed5a13",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f2c5895d-ce94-4401-be53-941d0ae5b958",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "68952096-fe06-4678-aa26-816d78ecfa03",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "faa5f338-346b-46f4-bfd2-43e65c210651",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "789919b4-1e2a-458c-bcfb-0ae4440d450f",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ab832123-0464-41c7-ab44-6c97649fd0de",
              "parentUUID": "fba997b0-8ad3-4edf-a132-713d10eedffe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22665913-09c5-4c61-a010-0e033fcc5dea",
            "40a453b9-067f-4685-b4b2-3c8e0b3e4edb",
            "528de23a-c45b-4c6b-944b-b3c9128bc495",
            "e642dcdc-1802-4582-a642-3194a0bae718",
            "b1ae239d-be77-46ae-8b81-e6b90c4dd8e5",
            "f2c5895d-ce94-4401-be53-941d0ae5b958",
            "68952096-fe06-4678-aa26-816d78ecfa03",
            "faa5f338-346b-46f4-bfd2-43e65c210651",
            "789919b4-1e2a-458c-bcfb-0ae4440d450f",
            "ab832123-0464-41c7-ab44-6c97649fd0de"
          ],
          "failures": [],
          "pending": [
            "07ac99d6-b1a3-47a5-9da0-331cfd806ab3",
            "6a4e4f88-5115-4ffd-8484-8a6929ed5a13"
          ],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b24d4c0-6904-473f-bfd8-98934d44d4f3",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.lowercase,\n    name_case: cfg.e_formatter_standalone_name_case.lowercase,\n    indentation: \"    \",\n    align_port_generic: true,\n    align_comment: true,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "be7023ee-e3c6-4bbe-8778-71235ec473e4",
              "parentUUID": "7b24d4c0-6904-473f-bfd8-98934d44d4f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.uppercase,\n    name_case: cfg.e_formatter_standalone_name_case.uppercase,\n    indentation: \"      \",\n    align_port_generic: true,\n    align_comment: false,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "a488207a-7b8b-4267-a034-2cadfbd52ec6",
              "parentUUID": "7b24d4c0-6904-473f-bfd8-98934d44d4f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be7023ee-e3c6-4bbe-8778-71235ec473e4",
            "a488207a-7b8b-4267-a034-2cadfbd52ec6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "d167cfb6-6e1f-4a81-830e-22686fe4f5c8",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "ba4df8a7-3af1-4613-a217-ddee50ed3b97",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "51d50d64-b785-4f5c-a915-7e8757304c5c",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 2",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 2",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "c884f690-384e-4385-9c78-1b3fe7690b7d",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "da66f280-15c2-4f54-961b-51a6b0a1a3f1",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "2f290703-0f64-46e7-8ee1-e815b5f258cc",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "4ba57a0b-edb5-4ebc-8610-982bf25775df",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 6",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 6",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "c03082d1-e6cb-4042-bf05-ea0c3c54508d",
              "parentUUID": "69ea32a2-010b-4231-8cd9-ededc9c731fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d167cfb6-6e1f-4a81-830e-22686fe4f5c8",
            "ba4df8a7-3af1-4613-a217-ddee50ed3b97",
            "51d50d64-b785-4f5c-a915-7e8757304c5c",
            "c884f690-384e-4385-9c78-1b3fe7690b7d",
            "da66f280-15c2-4f54-961b-51a6b0a1a3f1",
            "2f290703-0f64-46e7-8ee1-e815b5f258cc",
            "4ba57a0b-edb5-4ebc-8610-982bf25775df",
            "c03082d1-e6cb-4042-bf05-ea0c3c54508d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 228,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a24a24cf-2ae6-4b5b-b1c4-e0c047ada0a2",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: false,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "871e9e5f-fa4e-47a1-a3f9-9701f3bae547",
              "parentUUID": "a24a24cf-2ae6-4b5b-b1c4-e0c047ada0a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 4\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "e6c12780-783b-4d22-bd8d-000ee7046803",
              "parentUUID": "a24a24cf-2ae6-4b5b-b1c4-e0c047ada0a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    one_bind_per_line: false,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"asdf\");",
              "err": {},
              "uuid": "1e914b69-d70a-4f49-9e64-948fcc76f0be",
              "parentUUID": "a24a24cf-2ae6-4b5b-b1c4-e0c047ada0a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "871e9e5f-fa4e-47a1-a3f9-9701f3bae547",
            "e6c12780-783b-4d22-bd8d-000ee7046803",
            "1e914b69-d70a-4f49-9e64-948fcc76f0be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f90e767-85d7-4225-8ff6-3a1f2bea75a3",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "ec6a59f3-6fcd-4c35-8b70-1565b1f96bcc",
              "parentUUID": "4f90e767-85d7-4225-8ff6-3a1f2bea75a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec6a59f3-6fcd-4c35-8b70-1565b1f96bcc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f4805710-3132-42b0-b73f-8232422325aa",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "ce5de67a-1d9e-42e0-9eec-47fb24037f8b",
              "parentUUID": "f4805710-3132-42b0-b73f-8232422325aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce5de67a-1d9e-42e0-9eec-47fb24037f8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f21ad55-67ce-4007-a198-94c6efa01249",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "468e5403-1af5-4c98-a499-c5df9419bd99",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 254,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "494e74e0-981b-4c8e-a088-c60232a5ad8d",
                  "parentUUID": "468e5403-1af5-4c98-a499-c5df9419bd99",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "a212ceb9-e13e-4c88-9ff2-a87c04b0cb3c",
                  "parentUUID": "468e5403-1af5-4c98-a499-c5df9419bd99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "1594274e-d63d-4934-8ee6-cafb9315f89f",
                  "parentUUID": "468e5403-1af5-4c98-a499-c5df9419bd99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a212ceb9-e13e-4c88-9ff2-a87c04b0cb3c",
                "1594274e-d63d-4934-8ee6-cafb9315f89f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 341,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "81d017a6-4076-4ea2-b0d2-d8e1bb2bc9ef",
                  "parentUUID": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "bd9b605d-e497-4569-81e5-80e759e9bec0",
                  "parentUUID": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "0905f53e-c1ac-42c9-b9e2-be8f10fc8807",
                  "parentUUID": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "9a2fe030-7188-4148-bf9c-97169c788698",
                  "parentUUID": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "e3bb9620-4b4b-48ef-98fe-cccef262ac74",
                  "parentUUID": "5de1a4c9-2308-4544-83c7-f394b72bc05b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd9b605d-e497-4569-81e5-80e759e9bec0",
                "0905f53e-c1ac-42c9-b9e2-be8f10fc8807",
                "9a2fe030-7188-4148-bf9c-97169c788698",
                "e3bb9620-4b4b-48ef-98fe-cccef262ac74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a910a31d-b188-453c-b037-884560b29641",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 251,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "b2b6d0bc-c34e-445d-90c0-e376030be6c1",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "7461fc63-60ac-42cd-ae4d-cb077a7f43df",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "157aaaec-c621-45ab-9002-5a18c8c8e767",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a9098901-630b-4558-b85e-7399ef5357fa",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "57fb7d56-8580-454c-a9f3-362a6c0d72d4",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "759537d9-7cfe-4274-974d-a716eb866289",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "81b9ad30-1401-4190-b744-4f99a5592f08",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "246046b6-5bdd-407e-be12-2ff6c38094a1",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "5dee7213-3059-440e-bfbb-74406721aab4",
                  "parentUUID": "a910a31d-b188-453c-b037-884560b29641",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7461fc63-60ac-42cd-ae4d-cb077a7f43df",
                "157aaaec-c621-45ab-9002-5a18c8c8e767",
                "a9098901-630b-4558-b85e-7399ef5357fa",
                "57fb7d56-8580-454c-a9f3-362a6c0d72d4",
                "759537d9-7cfe-4274-974d-a716eb866289",
                "246046b6-5bdd-407e-be12-2ff6c38094a1",
                "5dee7213-3059-440e-bfbb-74406721aab4"
              ],
              "failures": [],
              "pending": [
                "81b9ad30-1401-4190-b744-4f99a5592f08"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 321,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "e80a6eef-ce32-4358-b36a-c00b5e282ed8",
                  "parentUUID": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "01149a80-3a27-4e98-9013-2e7669ff44e1",
                  "parentUUID": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "7ff1afeb-1d3f-4a8a-8ca7-16cd77473c57",
                  "parentUUID": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "b4ac5c5d-4faf-4ba8-97ce-f34d05954789",
                  "parentUUID": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "cd4bc08f-2379-4945-96a9-a7fc753fa424",
                  "parentUUID": "b2e2c989-91b8-46ec-924d-2ed05f209f63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01149a80-3a27-4e98-9013-2e7669ff44e1",
                "7ff1afeb-1d3f-4a8a-8ca7-16cd77473c57",
                "b4ac5c5d-4faf-4ba8-97ce-f34d05954789",
                "cd4bc08f-2379-4945-96a9-a7fc753fa424"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae439523-4d2b-4f87-9b17-2072f7bc6679",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 267,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "820f1f52-782a-47b2-9fdd-e39765e59066",
                  "parentUUID": "ae439523-4d2b-4f87-9b17-2072f7bc6679",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0c68b1d9-711d-4533-9ac6-d27c112c01c9",
                  "parentUUID": "ae439523-4d2b-4f87-9b17-2072f7bc6679",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c68b1d9-711d-4533-9ac6-d27c112c01c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc1821e4-ee27-4e67-af8f-6cc14af0b4dc",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 330,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "f4e8bc7b-ab6d-44b1-9865-33d8875a372f",
                  "parentUUID": "fc1821e4-ee27-4e67-af8f-6cc14af0b4dc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "933469e8-49cb-4df2-be68-a46b306ce6c8",
                  "parentUUID": "fc1821e4-ee27-4e67-af8f-6cc14af0b4dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "933469e8-49cb-4df2-be68-a46b306ce6c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 357,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "0e96269f-5257-47d5-bde6-ab8903f65f39",
                  "parentUUID": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "1b3bdbd4-299c-4fdb-bf1f-dd907ab968d3",
                  "parentUUID": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "2707711e-339c-4c1f-a888-987cfc06ad53",
                  "parentUUID": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "a91d9b23-e080-4103-9e19-ec99d214fc59",
                  "parentUUID": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "de8a99fd-a0a2-48bf-96e6-2ec66e270fc5",
                  "parentUUID": "2940c408-586e-45d1-9fcc-300d8f82cb0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b3bdbd4-299c-4fdb-bf1f-dd907ab968d3",
                "2707711e-339c-4c1f-a888-987cfc06ad53",
                "a91d9b23-e080-4103-9e19-ec99d214fc59",
                "de8a99fd-a0a2-48bf-96e6-2ec66e270fc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd6181ad-fd69-4062-8fdc-5525e923a1d1",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 472,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "6aaa80ff-4bda-4bb3-8dfd-55c4b87fbc4f",
                  "parentUUID": "bd6181ad-fd69-4062-8fdc-5525e923a1d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "bcdc4d9b-b542-45b5-ae5f-b5d5bad42f68",
                  "parentUUID": "bd6181ad-fd69-4062-8fdc-5525e923a1d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcdc4d9b-b542-45b5-ae5f-b5d5bad42f68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d66841a-5bbc-4a52-b8f6-1d0d36c2f4e8",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef50072b-f006-4444-a86e-fff00a9e96c5",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 340,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "8aac82ad-0187-4517-8d19-4573e2ac1a53",
                  "parentUUID": "ef50072b-f006-4444-a86e-fff00a9e96c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "87a7dec9-2edd-4547-94fe-9f08c7099bb1",
                  "parentUUID": "ef50072b-f006-4444-a86e-fff00a9e96c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "e4e1f218-6d60-4454-a01f-66550cc4ac61",
                  "parentUUID": "ef50072b-f006-4444-a86e-fff00a9e96c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87a7dec9-2edd-4547-94fe-9f08c7099bb1",
                "e4e1f218-6d60-4454-a01f-66550cc4ac61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18ee2aa2-c8b0-431b-baea-e59a8d120a9b",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 453,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "990a9db7-f4e8-4bd1-b7f2-93ca1240f1b2",
                  "parentUUID": "18ee2aa2-c8b0-431b-baea-e59a8d120a9b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "8f85b272-156e-4b06-aaf8-32ca440816c4",
                  "parentUUID": "18ee2aa2-c8b0-431b-baea-e59a8d120a9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "e9203cb4-bfbc-419e-b87e-5ffd450528a3",
                  "parentUUID": "18ee2aa2-c8b0-431b-baea-e59a8d120a9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f85b272-156e-4b06-aaf8-32ca440816c4",
                "e9203cb4-bfbc-419e-b87e-5ffd450528a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fff5cdb3-ea5d-4cad-9a73-ae3c279300e8",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 319,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "16f52165-2636-4a33-a567-897772ef9111",
                  "parentUUID": "fff5cdb3-ea5d-4cad-9a73-ae3c279300e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "9487cc4c-279c-4a0a-a892-ef742fd31a8a",
                  "parentUUID": "fff5cdb3-ea5d-4cad-9a73-ae3c279300e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9487cc4c-279c-4a0a-a892-ef742fd31a8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "15489b6e-7f4a-467c-9328-c89733048ef6",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56a3eb0d-c328-477d-bd3d-9e25876b5e34",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 480,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "2a7a7bbe-ec7d-4ad7-a362-c9bffb9649d1",
                  "parentUUID": "56a3eb0d-c328-477d-bd3d-9e25876b5e34",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "13d409b3-4173-4464-a852-92b4432f83d8",
                  "parentUUID": "56a3eb0d-c328-477d-bd3d-9e25876b5e34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "cb617dea-3416-4d35-8ba6-1b5697da7924",
                  "parentUUID": "56a3eb0d-c328-477d-bd3d-9e25876b5e34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13d409b3-4173-4464-a852-92b4432f83d8",
                "cb617dea-3416-4d35-8ba6-1b5697da7924"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1dd7e8e7-fae3-421f-a7ff-ecc324160c24",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 334,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "fd2ec569-0721-4a0a-ba6b-6370d4a50040",
                  "parentUUID": "1dd7e8e7-fae3-421f-a7ff-ecc324160c24",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "c6da2c4f-d173-4a5a-94ab-a08188a1e0ef",
                  "parentUUID": "1dd7e8e7-fae3-421f-a7ff-ecc324160c24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "ebf1bf45-9c7d-479a-8d96-19b5fa995dfc",
                  "parentUUID": "1dd7e8e7-fae3-421f-a7ff-ecc324160c24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "16f09358-3bfe-4e0d-b520-c207c0d90880",
                  "parentUUID": "1dd7e8e7-fae3-421f-a7ff-ecc324160c24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6da2c4f-d173-4a5a-94ab-a08188a1e0ef",
                "ebf1bf45-9c7d-479a-8d96-19b5fa995dfc",
                "16f09358-3bfe-4e0d-b520-c207c0d90880"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82253ab7-12ae-478c-bb9e-40bff030b300",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 441,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "5e0c0d7b-a266-4149-ade1-63746cb0e939",
                  "parentUUID": "82253ab7-12ae-478c-bb9e-40bff030b300",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "d2e09560-84ba-4dcd-8599-42ad3d08eb75",
                  "parentUUID": "82253ab7-12ae-478c-bb9e-40bff030b300",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2e09560-84ba-4dcd-8599-42ad3d08eb75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04a98fa5-e483-4639-b016-7cad199edb8b",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 342,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "9c65032e-dfb2-4ac3-946f-8e5aabda8977",
                  "parentUUID": "04a98fa5-e483-4639-b016-7cad199edb8b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "15213dc7-8a12-4a4d-ac64-f88912fad799",
                  "parentUUID": "04a98fa5-e483-4639-b016-7cad199edb8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "b67cf6b4-b250-43dd-b02f-2d9a6eccafb3",
                  "parentUUID": "04a98fa5-e483-4639-b016-7cad199edb8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15213dc7-8a12-4a4d-ac64-f88912fad799",
                "b67cf6b4-b250-43dd-b02f-2d9a6eccafb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c9b278d-e76c-43a2-bbfb-47a9003bb2ff",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad1c790a-8f8e-4bb9-ad28-9c093307be0e",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 34,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "fe9694ff-e3a5-463a-a93a-989889dc45a8",
                  "parentUUID": "ad1c790a-8f8e-4bb9-ad28-9c093307be0e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "4164357f-496b-4568-a154-8cf8f26a7625",
                  "parentUUID": "ad1c790a-8f8e-4bb9-ad28-9c093307be0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "fe32a263-b753-4491-8cb3-688bc43b77d7",
                  "parentUUID": "ad1c790a-8f8e-4bb9-ad28-9c093307be0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4164357f-496b-4568-a154-8cf8f26a7625",
                "fe32a263-b753-4491-8cb3-688bc43b77d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b028f67-cb76-47a4-bc2f-b54df787219f",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "acfae28b-e961-47bb-8fac-05371be0006a",
                  "parentUUID": "3b028f67-cb76-47a4-bc2f-b54df787219f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "114b1027-7bdb-4397-aeb2-8ef8b278062c",
                  "parentUUID": "3b028f67-cb76-47a4-bc2f-b54df787219f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "e2a97d71-0b74-4053-9db1-ac92ee740015",
                  "parentUUID": "3b028f67-cb76-47a4-bc2f-b54df787219f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "e8dcaf88-1fda-40c2-a4c0-fc81e0be7c88",
                  "parentUUID": "3b028f67-cb76-47a4-bc2f-b54df787219f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "1e167440-ccb7-43f6-92b9-3b2f1dede340",
                  "parentUUID": "3b028f67-cb76-47a4-bc2f-b54df787219f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "114b1027-7bdb-4397-aeb2-8ef8b278062c",
                "e2a97d71-0b74-4053-9db1-ac92ee740015",
                "e8dcaf88-1fda-40c2-a4c0-fc81e0be7c88",
                "1e167440-ccb7-43f6-92b9-3b2f1dede340"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac047f73-3277-497c-99bb-2dfd07b5de79",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "50956966-a020-4b98-a795-e75fb3e01738",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c66c7847-a52f-4dbc-b387-de2ba7e6f9a1",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "342986c3-ffb5-4bd5-8620-4386230651e2",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "49e4a1ad-b045-40ee-8c46-922779a512e3",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8bfae8d0-08d1-44e3-9c43-298e2b2acda0",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "412943ec-8fce-43e4-8664-c0234cd8ae20",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a210575c-6c9c-4040-bc12-cac23ef289bb",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c8633738-220f-452d-a326-5cbe036b702d",
                  "parentUUID": "ac047f73-3277-497c-99bb-2dfd07b5de79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c66c7847-a52f-4dbc-b387-de2ba7e6f9a1",
                "342986c3-ffb5-4bd5-8620-4386230651e2",
                "49e4a1ad-b045-40ee-8c46-922779a512e3",
                "8bfae8d0-08d1-44e3-9c43-298e2b2acda0",
                "412943ec-8fce-43e4-8664-c0234cd8ae20",
                "a210575c-6c9c-4040-bc12-cac23ef289bb",
                "c8633738-220f-452d-a326-5cbe036b702d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af19e38c-06f3-4c75-b09e-098722c7a9c8",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "b254a257-5c18-4e3d-a1c1-b10319073f73",
                  "parentUUID": "af19e38c-06f3-4c75-b09e-098722c7a9c8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "946a8efc-d139-424d-b97f-328e621acb4e",
                  "parentUUID": "af19e38c-06f3-4c75-b09e-098722c7a9c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d9a2a7b5-bddf-4b8d-8c4f-01188b9e8128",
                  "parentUUID": "af19e38c-06f3-4c75-b09e-098722c7a9c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "67c611db-61e2-4c03-aa23-a6c0b7f8e3bd",
                  "parentUUID": "af19e38c-06f3-4c75-b09e-098722c7a9c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "946a8efc-d139-424d-b97f-328e621acb4e",
                "d9a2a7b5-bddf-4b8d-8c4f-01188b9e8128",
                "67c611db-61e2-4c03-aa23-a6c0b7f8e3bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f729cef-a710-4816-bb90-9583a1b544d1",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "3ad5b4d6-b25a-46d3-8506-87f31e7fd52f",
                  "parentUUID": "8f729cef-a710-4816-bb90-9583a1b544d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0dc9e193-05b0-475d-a72d-167a73036565",
                  "parentUUID": "8f729cef-a710-4816-bb90-9583a1b544d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "2492b51b-32c9-4071-a2a0-70c45edd70e8",
                  "parentUUID": "8f729cef-a710-4816-bb90-9583a1b544d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dc9e193-05b0-475d-a72d-167a73036565",
                "2492b51b-32c9-4071-a2a0-70c45edd70e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e375d038-b0cc-465f-b8dc-5176e93ce183",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "6c046910-7828-4706-86b5-8a0600cd6e6a",
                  "parentUUID": "e375d038-b0cc-465f-b8dc-5176e93ce183",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "ad394638-8e48-4b40-a363-c319d294f768",
                  "parentUUID": "e375d038-b0cc-465f-b8dc-5176e93ce183",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad394638-8e48-4b40-a363-c319d294f768"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca731c35-24dd-4841-81cf-5e5aa2deb5d7",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "5f674c61-3c68-4a2b-866d-fb812a0476cc",
                  "parentUUID": "ca731c35-24dd-4841-81cf-5e5aa2deb5d7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "2b5a09dc-41b2-4bda-9774-4388eeb3da73",
                  "parentUUID": "ca731c35-24dd-4841-81cf-5e5aa2deb5d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b5a09dc-41b2-4bda-9774-4388eeb3da73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53dc1db4-9661-4fb7-a039-828c58137bee",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 194,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "250dfe7b-9d22-4259-85fd-cf37ac42e6bb",
                  "parentUUID": "53dc1db4-9661-4fb7-a039-828c58137bee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "b75e63ea-b631-4120-b26a-4f1857ffb96f",
                  "parentUUID": "53dc1db4-9661-4fb7-a039-828c58137bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "a640d192-c140-4491-87dc-b80defc77209",
                  "parentUUID": "53dc1db4-9661-4fb7-a039-828c58137bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "0cd5d8cf-d2f7-49c3-b722-2c1e286d9564",
                  "parentUUID": "53dc1db4-9661-4fb7-a039-828c58137bee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b75e63ea-b631-4120-b26a-4f1857ffb96f",
                "a640d192-c140-4491-87dc-b80defc77209",
                "0cd5d8cf-d2f7-49c3-b722-2c1e286d9564"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce867844-609b-4f87-b24d-c384d457443e",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "40efca3a-bc2a-4abd-a2b5-d9c7b5320045",
                  "parentUUID": "ce867844-609b-4f87-b24d-c384d457443e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "ab74cc0e-1dfe-4219-bde9-10fd0fd8089a",
                  "parentUUID": "ce867844-609b-4f87-b24d-c384d457443e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "f71ee021-d9db-4936-9eec-cc5db48f0421",
                  "parentUUID": "ce867844-609b-4f87-b24d-c384d457443e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab74cc0e-1dfe-4219-bde9-10fd0fd8089a",
                "f71ee021-d9db-4936-9eec-cc5db48f0421"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d835940b-e036-4f8d-b605-6836a9bc6fe8",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a807814-eb2b-4837-a840-f12b785fd6e3",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 26,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "cc85ca6c-ea50-4289-a552-53b845e514f9",
                  "parentUUID": "6a807814-eb2b-4837-a840-f12b785fd6e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "7d8121cd-954a-4b62-b1fd-77952f5dca85",
                  "parentUUID": "6a807814-eb2b-4837-a840-f12b785fd6e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "78531e0d-f591-42f4-84af-ff8a75b586df",
                  "parentUUID": "6a807814-eb2b-4837-a840-f12b785fd6e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d8121cd-954a-4b62-b1fd-77952f5dca85",
                "78531e0d-f591-42f4-84af-ff8a75b586df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14e063fd-e38c-4396-9c86-0f7109fe50a2",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 26,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "0652aef8-81dc-4014-aca4-9600aa7979bc",
                  "parentUUID": "14e063fd-e38c-4396-9c86-0f7109fe50a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "1f97292d-3dac-4396-a658-7a9252a6b16a",
                  "parentUUID": "14e063fd-e38c-4396-9c86-0f7109fe50a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "faefb126-39ab-4aa2-83ba-eb767c48fb70",
                  "parentUUID": "14e063fd-e38c-4396-9c86-0f7109fe50a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "cf7b1001-6de9-4813-b326-4db873e2296b",
                  "parentUUID": "14e063fd-e38c-4396-9c86-0f7109fe50a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f97292d-3dac-4396-a658-7a9252a6b16a",
                "faefb126-39ab-4aa2-83ba-eb767c48fb70",
                "cf7b1001-6de9-4813-b326-4db873e2296b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaa14ea5-cf1b-430c-a1ab-ca603b25a58b",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "23aba4d3-f5f3-4fc2-8d89-173616c281e4",
                  "parentUUID": "aaa14ea5-cf1b-430c-a1ab-ca603b25a58b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0618ee7c-fe52-4859-833e-5a03685058be",
                  "parentUUID": "aaa14ea5-cf1b-430c-a1ab-ca603b25a58b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "66a42763-97cf-46f2-8b57-3ccb76da46b6",
                  "parentUUID": "aaa14ea5-cf1b-430c-a1ab-ca603b25a58b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "ff89ecb5-7cf7-4dfb-b13f-efb47bd91806",
                  "parentUUID": "aaa14ea5-cf1b-430c-a1ab-ca603b25a58b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0618ee7c-fe52-4859-833e-5a03685058be",
                "66a42763-97cf-46f2-8b57-3ccb76da46b6",
                "ff89ecb5-7cf7-4dfb-b13f-efb47bd91806"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5993cd0-6bcd-4fc2-8709-e8987d5a76e2",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "9e16cdf3-9986-422f-846d-5006ffbc3eb0",
                  "parentUUID": "f5993cd0-6bcd-4fc2-8709-e8987d5a76e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "9aff0554-cf1a-4af7-a584-f9e117dd0a91",
                  "parentUUID": "f5993cd0-6bcd-4fc2-8709-e8987d5a76e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9aff0554-cf1a-4af7-a584-f9e117dd0a91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe2812ab-b03b-4cde-b771-61a691640f8b",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "a4ece06b-46bb-4416-a48d-98f1b71f3389",
                  "parentUUID": "fe2812ab-b03b-4cde-b771-61a691640f8b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "78a7a6b8-414f-4427-a000-0401617de918",
                  "parentUUID": "fe2812ab-b03b-4cde-b771-61a691640f8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78a7a6b8-414f-4427-a000-0401617de918"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e198bbae-be87-43ae-b470-19b1836b077a",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "36eeb21c-a897-46d0-9b06-bc9c863e3334",
              "parentUUID": "e198bbae-be87-43ae-b470-19b1836b077a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "21abc107-4af7-41de-9c9f-e155d6bce25a",
              "parentUUID": "e198bbae-be87-43ae-b470-19b1836b077a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36eeb21c-a897-46d0-9b06-bc9c863e3334",
            "21abc107-4af7-41de-9c9f-e155d6bce25a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e96bd3f4-b065-4ad9-b75d-545e746438a5",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "d5ecf2df-fd04-4b0c-bd2f-a3c17f089b18",
              "parentUUID": "e96bd3f4-b065-4ad9-b75d-545e746438a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5ecf2df-fd04-4b0c-bd2f-a3c17f089b18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "2be9e5c9-8a09-4f04-b630-97fa7e7d5bc2",
              "parentUUID": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "597cd16a-a227-492a-a138-3ed98bab970a",
              "parentUUID": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "6fa3f1d8-ebfb-49f2-820d-48d6cb4f44ee",
              "parentUUID": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "6f7c0eb3-daae-4299-9f82-fd305972cb61",
              "parentUUID": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 844,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "d4b6eb42-535a-48fb-92f4-bedd0aac7575",
              "parentUUID": "ae0435f6-6db8-4b8f-b5ee-dd0ec3677ed3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2be9e5c9-8a09-4f04-b630-97fa7e7d5bc2",
            "597cd16a-a227-492a-a138-3ed98bab970a",
            "6fa3f1d8-ebfb-49f2-820d-48d6cb4f44ee",
            "6f7c0eb3-daae-4299-9f82-fd305972cb61",
            "d4b6eb42-535a-48fb-92f4-bedd0aac7575"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1457,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c55550d1-f057-48cc-bb96-da28f5051f8a",
          "title": "Check dependency graph",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency graph Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_graph(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_graph.svg');\nfs.writeFileSync(output_path, result.result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_graph.svg');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(result.result, expected);",
              "err": {},
              "uuid": "0db3ce17-c584-4226-ad45-b932349a95ae",
              "parentUUID": "c55550d1-f057-48cc-bb96-da28f5051f8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "0db3ce17-c584-4226-ad45-b932349a95ae"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f21760be-7dbb-41ad-82c9-87910e44a3fe",
          "title": "Check compile order",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check compile order Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_compile_order(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'compile_order.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'compile_order.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "26f840ab-a341-4d84-8c64-74a923bf371a",
              "parentUUID": "f21760be-7dbb-41ad-82c9-87910e44a3fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "26f840ab-a341-4d84-8c64-74a923bf371a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "18fd92b7-3572-4e1b-897b-2c59821dfcc1",
          "title": "Check dependency tree",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency tree Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_tree(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_tree.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_tree.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "87513312-1db5-4fa7-b3c9-325d075830a5",
              "parentUUID": "18fd92b7-3572-4e1b-897b-2c59821dfcc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "87513312-1db5-4fa7-b3c9-325d075830a5"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d1d1874-8238-4381-960d-43b172d11657",
          "title": "Check multi project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/multi_project_manager.spec.ts",
          "file": "/tests/project_manager/project/multi_project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check multi project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = multi_prj.get_name();\nchai_1.assert.equal(prj_name, MULTI_PRJ_NAME, \"Error in project name.\");",
              "err": {},
              "uuid": "7d7de308-b5ea-45d5-a1fe-acf119342d4a",
              "parentUUID": "2d1d1874-8238-4381-960d-43b172d11657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 3 projects",
              "fullTitle": "Check multi project manager Add 3 projects",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create projects\nmulti_prj.create_project(prj_0.name);\nmulti_prj.create_project(prj_1.name);\nmulti_prj.create_project(prj_2.name);\n// Add files\nadd_files(multi_prj, prj_0);\nadd_files(multi_prj, prj_1);\nadd_files(multi_prj, prj_2);\n// Check\ncheck_project(multi_prj, prj_0);\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "0468a25b-ec10-4441-ae70-5813feae6dcd",
              "parentUUID": "2d1d1874-8238-4381-960d-43b172d11657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check multi project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const new_name = 'new-name';\n// Rename project\nmulti_prj.rename_project(prj_0.name, new_name);\n// Check\nprj_0.name = new_name;\ncheck_project(multi_prj, prj_0);",
              "err": {},
              "uuid": "c4fbe1c5-8239-43e8-b994-4ebb483e1eb9",
              "parentUUID": "2d1d1874-8238-4381-960d-43b172d11657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete one",
              "fullTitle": "Check multi project manager Delete one",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete project\nmulti_prj.delete_project(prj_0.name);\n// Check number of projects\nchai_1.assert.equal(multi_prj.get_projects().length, 2);\n// Check projects\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "f7aeb28d-b7ff-4d02-91bd-7d8b376d735c",
              "parentUUID": "2d1d1874-8238-4381-960d-43b172d11657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Select project",
              "fullTitle": "Check multi project manager Select project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select project\nlet result = multi_prj.select_project_current(prj_1.name);\nchai_1.assert.equal(result.successful, true);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);\n// Select project doesn't exist\nresult = multi_prj.select_project_current(prj_0.name);\nchai_1.assert.equal(result.successful, false);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);",
              "err": {},
              "uuid": "74539d4e-a6ed-49c7-a69d-b7dc3b53bf9d",
              "parentUUID": "2d1d1874-8238-4381-960d-43b172d11657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d7de308-b5ea-45d5-a1fe-acf119342d4a",
            "0468a25b-ec10-4441-ae70-5813feae6dcd",
            "c4fbe1c5-8239-43e8-b994-4ebb483e1eb9",
            "f7aeb28d-b7ff-4d02-91bd-7d8b376d735c",
            "74539d4e-a6ed-49c7-a69d-b7dc3b53bf9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
          "title": "Check project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/project_manager.spec.ts",
          "file": "/tests/project_manager/project/project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check project manager Get name after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_0, \"Error in project name.\");",
              "err": {},
              "uuid": "683f9d8b-f8b3-4fb7-841a-ad820bb1e3f2",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Rename project\nconst PRJ_NAME_1 = \"my-prj-1\";\nprj.rename(PRJ_NAME_1);\n// Check project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_1, \"Error in project name.\");",
              "err": {},
              "uuid": "8ff608f7-117b-4f93-82a9-782025dda12d",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 2 individual files",
              "fullTitle": "Check project manager Add 2 individual files",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Add file 0\nprj.add_file(file_0);\n// Add file 1\nprj.add_file(file_1);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 2, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_0.name, \"Error name file 0.\");\nchai_1.assert.equal(file_list[1].name, file_1.name, \"Error name file 1.\");",
              "err": {},
              "uuid": "145cf491-04ec-4540-8f1d-8f79fe11c1ea",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete file",
              "fullTitle": "Check project manager Delete file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete file 0\nprj.delete_file(file_0.name, file_0.logical_name);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 1, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_1.name, \"Error name file 0.\");",
              "err": {},
              "uuid": "7f7ece4c-ab32-43b3-9988-bdf1ed3434ac",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "File in project",
              "fullTitle": "Check project manager File in project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// File 1 in project\nconst check_0 = prj.check_if_file_in_project(file_1.name, file_1.logical_name);\nchai_1.assert.equal(check_0, true, \"Error file 1 in project.\");\n// File random 0 not in project\nconst check_1 = prj.check_if_file_in_project('asd', file_1.logical_name);\nchai_1.assert.equal(check_1, false, \"Error file random name in project.\");\n// File random 1 not in project\nconst check_2 = prj.check_if_file_in_project(file_1.name, 'efg');\nchai_1.assert.equal(check_2, false, \"Error file random logical name in project.\");",
              "err": {},
              "uuid": "40c0b23f-b77d-478b-89db-4e062ecae8df",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set and get config",
              "fullTitle": "Check project manager Set and get config",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myconfig = cfg.get_default_config();\nmyconfig.editor.general.continue_comment = true;\nmyconfig.documentation.general.symbol_vhdl = 'asdf';\n// Set config\nprj.set_config(myconfig);\n// Get config\nconst prj_config = prj.get_config();\n//Check config\nchai_1.assert.equal(prj_config, myconfig, \"Error in config.\");",
              "err": {},
              "uuid": "f70fcaeb-298f-4255-8009-a2ef12be4b66",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add files from CSV",
              "fullTitle": "Check project manager Add files from CSV",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CSV_PATH = paht_lib.join(__dirname, 'helpers', 'files.csv');\n// Add files\nprj.add_file_from_csv(CSV_PATH, true);\n// Get files\nconst file_list = prj.get_project_definition().file_manager.get();\n// Check file 2\nchai_1.assert.equal(file_list[1].name, file_2.name, \"Error name file 2.\");\nchai_1.assert.equal(file_list[1].logical_name, file_2.logical_name, \"Error logical name file 2.\");\n// Check file 3\nchai_1.assert.equal(file_list[2].name, file_3.name, \"Error name file 3.\");\nchai_1.assert.equal(file_list[2].logical_name, file_3.logical_name, \"Error logical name file 3.\");",
              "err": {},
              "uuid": "ae7aa561-8691-41e9-b087-93e1ec523ab7",
              "parentUUID": "73fc2b31-a3ef-43df-90a8-1c0e64e61a82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "683f9d8b-f8b3-4fb7-841a-ad820bb1e3f2",
            "8ff608f7-117b-4f93-82a9-782025dda12d",
            "145cf491-04ec-4540-8f1d-8f79fe11c1ea",
            "7f7ece4c-ab32-43b3-9988-bdf1ed3434ac",
            "40c0b23f-b77d-478b-89db-4e062ecae8df",
            "f70fcaeb-298f-4255-8009-a2ef12be4b66",
            "ae7aa561-8691-41e9-b087-93e1ec523ab7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9716f506-7e89-44ac-8da0-53ab8c2f3d06",
          "title": "Check Edalize",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check GHDL",
              "fullTitle": "Check Edalize Check GHDL",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'ghdl');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder_tb.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"ghdl-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].filename, file_0.name);\n(0, assert_1.equal)(test_list[0].name, 'half_adder_process_tb');\n// Run\nprj.set_config(config);\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "9240cb11-6323-4ffd-abba-107e8bf554a5",
              "parentUUID": "9716f506-7e89-44ac-8da0-53ab8c2f3d06",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "9240cb11-6323-4ffd-abba-107e8bf554a5"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bcc88d2a-0501-4021-8939-8e01bb8c2aa1",
          "title": "Check VUnit",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check one tests in runpy",
              "fullTitle": "Check VUnit Check one tests in runpy",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_0.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "ff5934e8-cf2f-41ea-84fd-dd29f9884d80",
              "parentUUID": "bcc88d2a-0501-4021-8939-8e01bb8c2aa1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check multiple tests in runpy",
              "fullTitle": "Check VUnit Check multiple tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_1.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "ec8f258a-f357-47b0-b3f0-036c055844db",
              "parentUUID": "bcc88d2a-0501-4021-8939-8e01bb8c2aa1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check runpy creation",
              "fullTitle": "Check VUnit Check runpy creation",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.creation;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_counting_errors.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_with_test_cases.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_2 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'test_control.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\nprj.add_file(file_2);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 3);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[2].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n    (0, assert_1.equal)(result[2].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "5d73ef62-b804-4bc7-b657-c83a7c81c8f9",
              "parentUUID": "bcc88d2a-0501-4021-8939-8e01bb8c2aa1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ff5934e8-cf2f-41ea-84fd-dd29f9884d80",
            "ec8f258a-f357-47b0-b3f0-036c055844db",
            "5d73ef62-b804-4bc7-b657-c83a7c81c8f9"
          ],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7dacec7d-78d5-402e-8fd5-12df0b59c813",
          "title": "Check cocotb",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check multiple tests",
              "fullTitle": "Check cocotb Check multiple tests",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "f5b72db2-c916-449b-9ed2-b3a5fccaf609",
              "parentUUID": "7dacec7d-78d5-402e-8fd5-12df0b59c813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one test",
              "fullTitle": "Check cocotb Check one test",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\nconst selected_test = [test_list[0]];\n// Run\nprj.run(undefined, selected_test, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "0fbf7bfd-4f2e-41bc-9619-adde32cae52d",
              "parentUUID": "7dacec7d-78d5-402e-8fd5-12df0b59c813",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "f5b72db2-c916-449b-9ed2-b3a5fccaf609",
            "0fbf7bfd-4f2e-41bc-9619-adde32cae52d"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "593f3020-fdb6-428b-a822-9726e605b8f6",
          "title": "Check OSVVM",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Run test",
              "fullTitle": "Check OSVVM Run test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.osvvm;\nconfig.tools.osvvm.installation_path = \"/home/carlos/repo/osvvm/OsvvmLibraries/\";\nconfig.tools.osvvm.simulator_name = cfg.e_tools_osvvm_simulator_name.ghdl;\nconfig.tools.osvvm.tclsh_binary = \"tclsh8.6\";\n// Files\nconst file_0 = {\n    name: \"/home/carlos/repo/osvvm/OsvvmLibraries/UART/RunDemoTests.pro\",\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\n// Create project\nconst prj = new project_manager_1.Project_manager(\"osvvm-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get testlist\nconst test_list = await prj.get_test_list();\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "ac1ee41e-b4d0-4b4a-8f61-0954f8caa1bf",
              "parentUUID": "593f3020-fdb6-428b-a822-9726e605b8f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ac1ee41e-b4d0-4b4a-8f61-0954f8caa1bf"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0b644e3-88de-42af-86d3-de02302167bd",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9de7ab62-b979-44f1-bc6b-f58d41316078",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "7f7f2f22-64fb-4743-ae76-230f1e72e4e9",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "53c803ab-784b-4d3c-ba31-cd9badaaa8bf",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "19e12768-3bd4-4f76-ac8b-97a3a49fce1a",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "81a3cf47-e774-499c-80bd-44e2fa2bb3b6",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9c3c40a7-73ee-46b4-b43b-37262c5b398f",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "43f37e1a-33cf-40c1-a320-b14cfeb47d3d",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "2add24b5-3b56-418c-8d58-57e22553311c",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "37f70312-2edc-4545-ab33-1b847bc80e72",
              "parentUUID": "a0b644e3-88de-42af-86d3-de02302167bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9de7ab62-b979-44f1-bc6b-f58d41316078",
            "7f7f2f22-64fb-4743-ae76-230f1e72e4e9",
            "53c803ab-784b-4d3c-ba31-cd9badaaa8bf",
            "19e12768-3bd4-4f76-ac8b-97a3a49fce1a",
            "81a3cf47-e774-499c-80bd-44e2fa2bb3b6",
            "9c3c40a7-73ee-46b4-b43b-37262c5b398f",
            "43f37e1a-33cf-40c1-a320-b14cfeb47d3d",
            "2add24b5-3b56-418c-8d58-57e22553311c",
            "37f70312-2edc-4545-ab33-1b847bc80e72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 649,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7539452-48f7-47d0-b5a1-7f235110749e",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9db0176a-f19f-412c-a6f3-f5650b9f40bc",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "5dcdec57-a698-4d8d-a3ca-015af5d3b0b5",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "26a32e0e-6909-4093-ae06-b9266d15fe4d",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "150fbfa6-4c4f-4d98-a1ac-8f5c98a9e060",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "3c6df6eb-bb94-4df5-9eae-4be1dc08e2df",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "2d45411c-2b96-455c-84a5-111fee3d19a2",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ccb87b2b-33eb-4558-b19b-b6e8c24c3152",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "bc6df983-4ed6-4826-a905-eca63243178d",
              "parentUUID": "f7539452-48f7-47d0-b5a1-7f235110749e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9db0176a-f19f-412c-a6f3-f5650b9f40bc",
            "5dcdec57-a698-4d8d-a3ca-015af5d3b0b5",
            "26a32e0e-6909-4093-ae06-b9266d15fe4d",
            "150fbfa6-4c4f-4d98-a1ac-8f5c98a9e060",
            "3c6df6eb-bb94-4df5-9eae-4be1dc08e2df",
            "2d45411c-2b96-455c-84a5-111fee3d19a2",
            "ccb87b2b-33eb-4558-b19b-b6e8c24c3152",
            "bc6df983-4ed6-4826-a905-eca63243178d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bbd470e6-73a6-4238-b857-5a9528b8863a",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "7a085ef9-ebc3-4f0e-af30-ff3c849271d9",
              "parentUUID": "bbd470e6-73a6-4238-b857-5a9528b8863a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "a64ee79a-a5d4-4d24-ae19-33606e8fb415",
              "parentUUID": "bbd470e6-73a6-4238-b857-5a9528b8863a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "8264169f-c5be-4139-bfe2-6a3e3680c63d",
              "parentUUID": "bbd470e6-73a6-4238-b857-5a9528b8863a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "2ed48050-85ac-49a0-a950-734ea4e36e80",
              "parentUUID": "bbd470e6-73a6-4238-b857-5a9528b8863a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a085ef9-ebc3-4f0e-af30-ff3c849271d9",
            "a64ee79a-a5d4-4d24-ae19-33606e8fb415",
            "8264169f-c5be-4139-bfe2-6a3e3680c63d",
            "2ed48050-85ac-49a0-a950-734ea4e36e80"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7886f7ff-672f-4517-abe7-67564d52faef",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "bad8ce68-9028-4a8d-87f0-68b14b51d56e",
              "parentUUID": "7886f7ff-672f-4517-abe7-67564d52faef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "83e89691-df6c-4d49-bcc1-a66eff337233",
              "parentUUID": "7886f7ff-672f-4517-abe7-67564d52faef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bad8ce68-9028-4a8d-87f0-68b14b51d56e",
            "83e89691-df6c-4d49-bcc1-a66eff337233"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e690f590-3f26-4a0b-8e42-a782e878c765",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "477a72ee-1917-4e60-b4ab-6426cf3aa774",
              "parentUUID": "e690f590-3f26-4a0b-8e42-a782e878c765",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "477a72ee-1917-4e60-b4ab-6426cf3aa774"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "82dab3a5-cb97-403b-acf4-165f477cbfdb",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6a1407b6-b835-4a44-b5e2-eac0e947f559",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7f941903-b516-4e1d-bdfb-e2c0a38a2b07",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "969302de-b2d4-4f5f-bff9-8540b7e60cf2",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "467e6f4e-07d6-4610-b975-088df393b520",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "05d6c1c2-c2f1-4d16-ab7f-2fe975da72b4",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9e040952-ccd4-478d-8023-1631345856ab",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ca161c78-52dd-48f9-8c76-f72ee4bf38de",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8e1f28ef-1eff-44dd-9ed3-8c3ae2ba637c",
              "parentUUID": "e66f0058-cd65-4c5d-9c41-637f2a76e72f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82dab3a5-cb97-403b-acf4-165f477cbfdb",
            "6a1407b6-b835-4a44-b5e2-eac0e947f559",
            "7f941903-b516-4e1d-bdfb-e2c0a38a2b07",
            "969302de-b2d4-4f5f-bff9-8540b7e60cf2",
            "467e6f4e-07d6-4610-b975-088df393b520",
            "05d6c1c2-c2f1-4d16-ab7f-2fe975da72b4",
            "9e040952-ccd4-478d-8023-1631345856ab",
            "ca161c78-52dd-48f9-8c76-f72ee4bf38de",
            "8e1f28ef-1eff-44dd-9ed3-8c3ae2ba637c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7c27d173-ca42-444a-9494-75e056261fda",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "3d909653-bcd5-46d7-92e2-b975b20cd711",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1d8f755c-8148-4ef4-a047-85a40e047ad4",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "f92121c1-ff52-438a-bb68-fcc741c47ed5",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "2b095ad2-059c-4616-98fa-347cd5bf9006",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9b620a89-b82b-42ca-8170-811959a6f4e0",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "89f645bb-15d3-43ee-9cd8-457618312697",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ce0ecdfb-b0d3-4a52-885f-daf3bda56016",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1a44d813-aecf-4586-8ed8-5f7eb0fea27d",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "234a5575-57b9-40e2-988b-55cca05be335",
              "parentUUID": "7c27d173-ca42-444a-9494-75e056261fda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d909653-bcd5-46d7-92e2-b975b20cd711",
            "1d8f755c-8148-4ef4-a047-85a40e047ad4",
            "f92121c1-ff52-438a-bb68-fcc741c47ed5",
            "2b095ad2-059c-4616-98fa-347cd5bf9006",
            "9b620a89-b82b-42ca-8170-811959a6f4e0",
            "89f645bb-15d3-43ee-9cd8-457618312697",
            "ce0ecdfb-b0d3-4a52-885f-daf3bda56016",
            "1a44d813-aecf-4586-8ed8-5f7eb0fea27d",
            "234a5575-57b9-40e2-988b-55cca05be335"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "62e2c824-5e9e-4d2e-83b7-4fa782d4f92a",
        "33118b5c-cc0d-43cf-9b38-d8a5680e8240"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}