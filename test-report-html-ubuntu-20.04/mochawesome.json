{
  "stats": {
    "suites": 67,
    "tests": 217,
    "passes": 202,
    "pending": 15,
    "failures": 0,
    "start": "2023-01-11T13:28:09.555Z",
    "end": "2023-01-11T13:28:23.150Z",
    "duration": 13595,
    "testsRegistered": 219,
    "passPercent": 99.01960784313727,
    "pendingPercent": 6.8493150684931505,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "26be325d-09d0-4d34-89af-48fdecc252b6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "183c8d24-70aa-40c0-bf1e-5872a558ad6e",
          "parentUUID": "26be325d-09d0-4d34-89af-48fdecc252b6",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "81affb49-7196-4308-8d9f-3e33ab79f3e1",
          "parentUUID": "26be325d-09d0-4d34-89af-48fdecc252b6",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "18f31304-64c0-4752-8493-ef2cac2a526f",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "377b3b2e-3ada-4789-9590-a190b35c7b89",
              "parentUUID": "18f31304-64c0-4752-8493-ef2cac2a526f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "377b3b2e-3ada-4789-9590-a190b35c7b89"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b02515c5-ff88-450f-9667-becc2d72e178",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 1460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "9b3ccd8f-8f68-4f4b-aa0e-f90176295769",
              "parentUUID": "b02515c5-ff88-450f-9667-becc2d72e178",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b3ccd8f-8f68-4f4b-aa0e-f90176295769"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1460,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "b31543e7-da31-4335-8557-5585c6314c18",
              "parentUUID": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ff74a314-34e2-4d4d-b6f7-7d5875a9fb71",
              "parentUUID": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ff6a29c0-1033-43a2-b227-7b6e896b63d1",
              "parentUUID": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "d5372246-0471-4a29-8fd7-1fdac0b14108",
              "parentUUID": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "45d7df64-5d7a-4f40-8ac6-647ebeb3b668",
              "parentUUID": "b94d0d6d-4612-45e3-a178-84b1e7366ec6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b31543e7-da31-4335-8557-5585c6314c18",
            "ff74a314-34e2-4d4d-b6f7-7d5875a9fb71",
            "ff6a29c0-1033-43a2-b227-7b6e896b63d1",
            "d5372246-0471-4a29-8fd7-1fdac0b14108",
            "45d7df64-5d7a-4f40-8ac6-647ebeb3b668"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e7b131e-477e-4663-98cb-db1a6842a70e",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "87869598-fe77-483a-afcd-97b23f1ea6a7",
              "parentUUID": "3e7b131e-477e-4663-98cb-db1a6842a70e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "8e638098-3604-40f9-a5d9-9fb32ac272e0",
              "parentUUID": "3e7b131e-477e-4663-98cb-db1a6842a70e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 992,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "061296c7-3134-4961-b38c-145b070f4309",
              "parentUUID": "3e7b131e-477e-4663-98cb-db1a6842a70e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "30663de6-4a13-489c-a76c-59494f7ef961",
              "parentUUID": "3e7b131e-477e-4663-98cb-db1a6842a70e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "1d2d6ac5-a987-42a5-80ed-b4aed47b3d2b",
              "parentUUID": "3e7b131e-477e-4663-98cb-db1a6842a70e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87869598-fe77-483a-afcd-97b23f1ea6a7",
            "8e638098-3604-40f9-a5d9-9fb32ac272e0",
            "061296c7-3134-4961-b38c-145b070f4309",
            "30663de6-4a13-489c-a76c-59494f7ef961",
            "1d2d6ac5-a987-42a5-80ed-b4aed47b3d2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2265,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "4ae2f453-83cc-4937-a23a-93f1b8f045d0",
              "parentUUID": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2a917994-c315-420d-bfe1-e895e3dfe7bd",
              "parentUUID": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "cf671d89-b019-4ace-aaf6-2651c0ff23c8",
              "parentUUID": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2a82b548-8cd6-41ed-b362-6a6a7d65df7e",
              "parentUUID": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "fc94fa8a-89e6-4ac2-9ca3-83e3276f125e",
              "parentUUID": "8c939131-4dc8-4860-a694-aeba8ec6c11c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ae2f453-83cc-4937-a23a-93f1b8f045d0",
            "2a917994-c315-420d-bfe1-e895e3dfe7bd",
            "cf671d89-b019-4ace-aaf6-2651c0ff23c8",
            "2a82b548-8cd6-41ed-b362-6a6a7d65df7e",
            "fc94fa8a-89e6-4ac2-9ca3-83e3276f125e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1554,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01ec7fbf-0576-4718-b3af-7573fc547af1",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3ee5ace0-2f66-4d36-a4d2-029638077423",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "646a9591-a078-4158-ba04-67cc970dafea",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "42ad9c18-f2fd-4a9e-a353-27f8996222ef",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "94f38989-835d-4cda-935f-7df33e0b68a0",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "7f9a3638-efa7-4c4d-a593-56a5a9a4ef8d",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "0d41bd51-8da1-44bb-839d-e3d773f780d5",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9888fa31-6380-4348-b1f3-5f11e49c81d4",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "5a39ee37-0dcd-49f3-ab1c-0d204c19be9d",
              "parentUUID": "01ec7fbf-0576-4718-b3af-7573fc547af1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ee5ace0-2f66-4d36-a4d2-029638077423",
            "646a9591-a078-4158-ba04-67cc970dafea",
            "42ad9c18-f2fd-4a9e-a353-27f8996222ef",
            "94f38989-835d-4cda-935f-7df33e0b68a0",
            "7f9a3638-efa7-4c4d-a593-56a5a9a4ef8d",
            "0d41bd51-8da1-44bb-839d-e3d773f780d5",
            "9888fa31-6380-4348-b1f3-5f11e49c81d4",
            "5a39ee37-0dcd-49f3-ab1c-0d204c19be9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5942aa4a-69c9-45d1-9f12-596603526cd0",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "cb3ca70a-88e2-4208-b280-ce264baec4d2",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "42742327-fd87-4213-9535-0ca397a4528f",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "1b93a538-d808-4bab-bc3b-5c529a425db5",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9e23f40a-9e1c-4ed5-990d-85d34b45d8c1",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "8805f9d4-83c8-4745-93f0-941d46749411",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "79649f46-fe24-4010-aacf-8b7bd41dfc1f",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "af3babe5-32a9-48ae-ad02-4804f328ce61",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "36e1d0fb-75c6-4e6a-9b8d-5196b9580728",
              "parentUUID": "5942aa4a-69c9-45d1-9f12-596603526cd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb3ca70a-88e2-4208-b280-ce264baec4d2",
            "42742327-fd87-4213-9535-0ca397a4528f",
            "1b93a538-d808-4bab-bc3b-5c529a425db5",
            "9e23f40a-9e1c-4ed5-990d-85d34b45d8c1",
            "8805f9d4-83c8-4745-93f0-941d46749411",
            "79649f46-fe24-4010-aacf-8b7bd41dfc1f",
            "af3babe5-32a9-48ae-ad02-4804f328ce61",
            "36e1d0fb-75c6-4e6a-9b8d-5196b9580728"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "6a1a5d03-13a5-407c-8cda-476d252aefcc",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "d0488523-a536-499c-9e05-62a300403375",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "388881b9-84fc-456a-a935-ea2701c8f6d8",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "1ee0147c-cc34-4541-8377-616155f27ffb",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "669e8a09-8157-4dea-a6c4-7c067f7ebd1c",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "c273e559-1cf5-4710-9c7a-fced1f570f39",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "0801f0ff-cd28-47e4-85a1-8372743a9e99",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "459393a4-92e1-4761-8892-8a6b895fa4d3",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f58f384b-e698-4cdb-b236-4952a89d0016",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "169c682c-8d89-4f5a-b888-3146cc30c860",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "9139ee61-8205-4f04-8e94-6d6bd2ad198f",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "9375d789-8fa2-4e0d-b33d-1afef89a6d9b",
              "parentUUID": "e719e75c-3c18-45d8-b60e-1e6d969a14c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a1a5d03-13a5-407c-8cda-476d252aefcc",
            "d0488523-a536-499c-9e05-62a300403375",
            "388881b9-84fc-456a-a935-ea2701c8f6d8",
            "669e8a09-8157-4dea-a6c4-7c067f7ebd1c",
            "c273e559-1cf5-4710-9c7a-fced1f570f39",
            "0801f0ff-cd28-47e4-85a1-8372743a9e99",
            "459393a4-92e1-4761-8892-8a6b895fa4d3",
            "f58f384b-e698-4cdb-b236-4952a89d0016",
            "169c682c-8d89-4f5a-b888-3146cc30c860",
            "9139ee61-8205-4f04-8e94-6d6bd2ad198f",
            "9375d789-8fa2-4e0d-b33d-1afef89a6d9b"
          ],
          "failures": [],
          "pending": [
            "1ee0147c-cc34-4541-8377-616155f27ffb"
          ],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "91b95b0b-5a87-4d5d-83e2-17b085520fb5",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "d86cb4c1-d17f-4175-9284-2cb011d03d60",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "0b67f498-e5bb-434f-9a8b-214aa3a1b6c7",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "58595664-17cf-418b-95c2-86f044958dd0",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "babec3b6-bd58-4293-9dea-d299edb87deb",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b4d0e26e-a59a-462e-af02-45ba71c592c8",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "9ad398ea-ee59-4c13-8266-ccc100306a77",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "309c48b8-f67c-4962-84f6-7f12c837a628",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "eee4f43d-546a-4bd1-beb0-d9f152b1fb8d",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ea1e7b87-c346-473e-be63-686d7ac4e925",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ba0996bf-f16c-4646-bdad-7ff27d83b59d",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "e9c4a4a7-b624-4290-ae3d-2b8817f5f3c1",
              "parentUUID": "204ed235-36dd-4d17-b49c-e3e6ab1a9256",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91b95b0b-5a87-4d5d-83e2-17b085520fb5",
            "d86cb4c1-d17f-4175-9284-2cb011d03d60",
            "0b67f498-e5bb-434f-9a8b-214aa3a1b6c7",
            "babec3b6-bd58-4293-9dea-d299edb87deb",
            "b4d0e26e-a59a-462e-af02-45ba71c592c8",
            "309c48b8-f67c-4962-84f6-7f12c837a628",
            "eee4f43d-546a-4bd1-beb0-d9f152b1fb8d",
            "ea1e7b87-c346-473e-be63-686d7ac4e925",
            "ba0996bf-f16c-4646-bdad-7ff27d83b59d",
            "e9c4a4a7-b624-4290-ae3d-2b8817f5f3c1"
          ],
          "failures": [],
          "pending": [
            "58595664-17cf-418b-95c2-86f044958dd0",
            "9ad398ea-ee59-4c13-8266-ccc100306a77"
          ],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "24eec1ab-5645-4de3-9f7d-84ce5d21e7de",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.lowercase,\n    name_case: cfg.e_formatter_standalone_name_case.lowercase,\n    indentation: \"    \",\n    align_port_generic: true,\n    align_comment: true,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "3a53708f-560b-4bf6-988c-bd65c726a083",
              "parentUUID": "24eec1ab-5645-4de3-9f7d-84ce5d21e7de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.uppercase,\n    name_case: cfg.e_formatter_standalone_name_case.uppercase,\n    indentation: \"      \",\n    align_port_generic: true,\n    align_comment: false,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "257d86ec-2188-4738-991a-ad212d0dff72",
              "parentUUID": "24eec1ab-5645-4de3-9f7d-84ce5d21e7de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a53708f-560b-4bf6-988c-bd65c726a083",
            "257d86ec-2188-4738-991a-ad212d0dff72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "61269046-02bf-454c-a7fe-de952fe1baa0",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "526d50a2-fd73-4bec-b484-bee22176fd6d",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "8ebc3628-3de9-437a-9809-b23a579c85dd",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "d0ba0189-18f6-42b3-97ba-5d804528ab22",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 2",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "b063e417-9919-49a2-8696-2a312e7715cf",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "8f27b2c2-be38-46dc-9456-ebd001ccb6b6",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "6216cb73-13fb-4391-9271-770d54391b92",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "8e37fcad-c7ce-4b7d-94e2-1aaa80db3a93",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 6",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 6",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "7a612dd8-74a4-4868-81ca-f08aeda60fbd",
              "parentUUID": "61269046-02bf-454c-a7fe-de952fe1baa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "526d50a2-fd73-4bec-b484-bee22176fd6d",
            "8ebc3628-3de9-437a-9809-b23a579c85dd",
            "d0ba0189-18f6-42b3-97ba-5d804528ab22",
            "b063e417-9919-49a2-8696-2a312e7715cf",
            "8f27b2c2-be38-46dc-9456-ebd001ccb6b6",
            "6216cb73-13fb-4391-9271-770d54391b92",
            "8e37fcad-c7ce-4b7d-94e2-1aaa80db3a93",
            "7a612dd8-74a4-4868-81ca-f08aeda60fbd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ed1117f5-5522-4b9a-b65d-a678bb929ae9",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: false,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "5f0e5941-fd90-458e-ac09-f1d197c19c5c",
              "parentUUID": "ed1117f5-5522-4b9a-b65d-a678bb929ae9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 4\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "2bd714b4-38b0-4978-ad3e-5413e42f63be",
              "parentUUID": "ed1117f5-5522-4b9a-b65d-a678bb929ae9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    one_bind_per_line: false,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"asdf\");",
              "err": {},
              "uuid": "0ffdeb93-f6e6-4b37-a090-19570a4ae290",
              "parentUUID": "ed1117f5-5522-4b9a-b65d-a678bb929ae9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f0e5941-fd90-458e-ac09-f1d197c19c5c",
            "2bd714b4-38b0-4978-ad3e-5413e42f63be",
            "0ffdeb93-f6e6-4b37-a090-19570a4ae290"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 395,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d3b3f50-d51c-479c-aee5-3c47dde0d8d6",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "1512819e-fd2b-4243-8098-2c316a9973eb",
              "parentUUID": "8d3b3f50-d51c-479c-aee5-3c47dde0d8d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1512819e-fd2b-4243-8098-2c316a9973eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 142,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "22b7e592-223a-4326-834e-6ec2ba21af17",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "77658ace-ab2d-4295-84a0-1421208aac39",
              "parentUUID": "22b7e592-223a-4326-834e-6ec2ba21af17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77658ace-ab2d-4295-84a0-1421208aac39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 313,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52ea206a-cd39-41dd-b384-52da22e76c8e",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d1df9d31-13d2-4ffd-bf25-093033d1b5d4",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 238,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "d98036fc-a143-4923-869a-259afaf39483",
                  "parentUUID": "d1df9d31-13d2-4ffd-bf25-093033d1b5d4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "568730fb-24a9-48cf-9e81-87306639af9d",
                  "parentUUID": "d1df9d31-13d2-4ffd-bf25-093033d1b5d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "a93d3e9c-27a1-4bbe-9940-e0488bb4391c",
                  "parentUUID": "d1df9d31-13d2-4ffd-bf25-093033d1b5d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "568730fb-24a9-48cf-9e81-87306639af9d",
                "a93d3e9c-27a1-4bbe-9940-e0488bb4391c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b009ef5d-fa00-42ae-934a-852127502d34",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 245,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "f0d0f988-3b14-47b4-ab65-2b4e6da1f9ac",
                  "parentUUID": "b009ef5d-fa00-42ae-934a-852127502d34",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "fc4f149c-0d32-4dbc-ab50-0a690d149ad9",
                  "parentUUID": "b009ef5d-fa00-42ae-934a-852127502d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "7b31a08d-9213-45eb-b073-85d65bc8ef4a",
                  "parentUUID": "b009ef5d-fa00-42ae-934a-852127502d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "8a523c46-04fc-4472-9ac6-6a531ee5c9f5",
                  "parentUUID": "b009ef5d-fa00-42ae-934a-852127502d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "440a01a5-751e-429c-8892-6aff2dd417cf",
                  "parentUUID": "b009ef5d-fa00-42ae-934a-852127502d34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc4f149c-0d32-4dbc-ab50-0a690d149ad9",
                "7b31a08d-9213-45eb-b073-85d65bc8ef4a",
                "8a523c46-04fc-4472-9ac6-6a531ee5c9f5",
                "440a01a5-751e-429c-8892-6aff2dd417cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6aefda94-32a6-4952-8649-e0118398430f",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 156,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "5c7f74f9-741a-452e-9d5d-c60bee9bad04",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "b80990a2-da8c-478b-ab88-6ebb6796a341",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "313d501f-ce62-494e-9f62-70af467f0a92",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a14a7dd8-0f39-413d-b541-5ce6012602df",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "98a745dd-afd5-4013-9568-e5d322b1e2cb",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a1270f65-f591-4ea4-90f1-12c6c1fec5c9",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "10035772-16ee-4b27-b664-b16665358f77",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0054ff20-04a9-4665-9d5f-39633179bacb",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "75642bc5-0b3e-4ec2-b4d3-b40d718afc3b",
                  "parentUUID": "6aefda94-32a6-4952-8649-e0118398430f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b80990a2-da8c-478b-ab88-6ebb6796a341",
                "313d501f-ce62-494e-9f62-70af467f0a92",
                "a14a7dd8-0f39-413d-b541-5ce6012602df",
                "98a745dd-afd5-4013-9568-e5d322b1e2cb",
                "a1270f65-f591-4ea4-90f1-12c6c1fec5c9",
                "0054ff20-04a9-4665-9d5f-39633179bacb",
                "75642bc5-0b3e-4ec2-b4d3-b40d718afc3b"
              ],
              "failures": [],
              "pending": [
                "10035772-16ee-4b27-b664-b16665358f77"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 224,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "1a8f9b92-e4a4-487d-b059-b24b1d4505f9",
                  "parentUUID": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "98b1f416-7143-4eda-b8e2-00925b8d9dee",
                  "parentUUID": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "2f1a9854-b287-4c86-8848-c7c118ea7cc5",
                  "parentUUID": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "27443505-2135-4846-8200-1e33064da87c",
                  "parentUUID": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "b3c1c733-e760-4fb2-b341-4281fdb3a5bb",
                  "parentUUID": "5aea3457-dff5-4dd2-a75b-e6ae7a7ea6c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98b1f416-7143-4eda-b8e2-00925b8d9dee",
                "2f1a9854-b287-4c86-8848-c7c118ea7cc5",
                "27443505-2135-4846-8200-1e33064da87c",
                "b3c1c733-e760-4fb2-b341-4281fdb3a5bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05ce2574-4fcb-46cf-9cfe-88ec796c780f",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 155,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "dc011785-3293-4109-9dff-6823f11a0a54",
                  "parentUUID": "05ce2574-4fcb-46cf-9cfe-88ec796c780f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "a94a80c2-5b24-4367-baa4-8e3fc2499a26",
                  "parentUUID": "05ce2574-4fcb-46cf-9cfe-88ec796c780f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a94a80c2-5b24-4367-baa4-8e3fc2499a26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58f71aa8-d5ea-4815-9f78-bc4f200abc7e",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 225,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "16bf4a2d-48cb-4f37-bf4e-9eda27e2107d",
                  "parentUUID": "58f71aa8-d5ea-4815-9f78-bc4f200abc7e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "42e06073-7ab0-404f-a5b9-052482125411",
                  "parentUUID": "58f71aa8-d5ea-4815-9f78-bc4f200abc7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42e06073-7ab0-404f-a5b9-052482125411"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 232,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "9d7f6421-947a-4f4f-b0d7-9608cbd20efd",
                  "parentUUID": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "886746af-ed79-437b-ad11-9b540c298631",
                  "parentUUID": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "b1b60b63-4826-4c26-ad74-2912af86f514",
                  "parentUUID": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "4b6be3a8-18d5-40ac-8a95-e721cc940e8b",
                  "parentUUID": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "80e395ad-9afb-4fc1-93e2-0e9210ee9dce",
                  "parentUUID": "8cefb6e9-eabf-4f6c-b626-d0fd35f9c8e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "886746af-ed79-437b-ad11-9b540c298631",
                "b1b60b63-4826-4c26-ad74-2912af86f514",
                "4b6be3a8-18d5-40ac-8a95-e721cc940e8b",
                "80e395ad-9afb-4fc1-93e2-0e9210ee9dce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce667cba-314a-4c16-8ed7-355483f286ba",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 276,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "548b1878-34e0-4ae6-84e5-49b65c94d42b",
                  "parentUUID": "ce667cba-314a-4c16-8ed7-355483f286ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "9221f187-ddb6-4ad9-8cab-7840406a51f2",
                  "parentUUID": "ce667cba-314a-4c16-8ed7-355483f286ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9221f187-ddb6-4ad9-8cab-7840406a51f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d1867b01-c292-474c-8ceb-8551b205542c",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a3e7c3ed-fa21-44a9-bec2-487625a8b89e",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 200,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "4d4adae7-3206-4c7c-97fe-fb3f663ba224",
                  "parentUUID": "a3e7c3ed-fa21-44a9-bec2-487625a8b89e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "cda35485-553b-44cc-977a-6d08479f01d1",
                  "parentUUID": "a3e7c3ed-fa21-44a9-bec2-487625a8b89e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "c206cbbd-1b72-4554-b722-fa35bdcdce6b",
                  "parentUUID": "a3e7c3ed-fa21-44a9-bec2-487625a8b89e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cda35485-553b-44cc-977a-6d08479f01d1",
                "c206cbbd-1b72-4554-b722-fa35bdcdce6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5138c915-2de7-48f6-882f-6cbbddc2cede",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 273,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "2a67c263-bcff-407e-b5ea-4c8293e9b4b3",
                  "parentUUID": "5138c915-2de7-48f6-882f-6cbbddc2cede",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "bc82289f-af48-4d5a-8d41-20f0ed50e70a",
                  "parentUUID": "5138c915-2de7-48f6-882f-6cbbddc2cede",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "eda2e003-5c6a-4f3a-9443-eb5a39a22d63",
                  "parentUUID": "5138c915-2de7-48f6-882f-6cbbddc2cede",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc82289f-af48-4d5a-8d41-20f0ed50e70a",
                "eda2e003-5c6a-4f3a-9443-eb5a39a22d63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcadd47d-b07b-49f6-9a57-077ddcd83607",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 198,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "0abe489e-b3fa-4cb1-bcd9-e2ebca63ba98",
                  "parentUUID": "dcadd47d-b07b-49f6-9a57-077ddcd83607",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "265371cd-6113-4c6e-b082-44b678b7ab82",
                  "parentUUID": "dcadd47d-b07b-49f6-9a57-077ddcd83607",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "265371cd-6113-4c6e-b082-44b678b7ab82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "29dbe56f-1044-4b6e-8bb6-6df223af5d10",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35ba48d4-4699-4e19-8ae1-34a1321e6543",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 280,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "ddaa7207-7d9a-4f1a-8227-5eda011f8917",
                  "parentUUID": "35ba48d4-4699-4e19-8ae1-34a1321e6543",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "db4d3482-5870-4cd3-b11a-95698a79a9eb",
                  "parentUUID": "35ba48d4-4699-4e19-8ae1-34a1321e6543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "fce0b954-8918-4957-bfd0-bb512856f4c2",
                  "parentUUID": "35ba48d4-4699-4e19-8ae1-34a1321e6543",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db4d3482-5870-4cd3-b11a-95698a79a9eb",
                "fce0b954-8918-4957-bfd0-bb512856f4c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ab1d3d7-cf09-418b-9f57-28a86ea998af",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 196,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "2f0d0050-341b-4cf9-afba-28a406fe2a1f",
                  "parentUUID": "5ab1d3d7-cf09-418b-9f57-28a86ea998af",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "b688e570-b2f0-4398-8638-86ffaad9f1d8",
                  "parentUUID": "5ab1d3d7-cf09-418b-9f57-28a86ea998af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "3ad087df-4644-4669-becd-9ddbf632a675",
                  "parentUUID": "5ab1d3d7-cf09-418b-9f57-28a86ea998af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "f76d207b-6edb-4ff9-a648-b8298c637101",
                  "parentUUID": "5ab1d3d7-cf09-418b-9f57-28a86ea998af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b688e570-b2f0-4398-8638-86ffaad9f1d8",
                "3ad087df-4644-4669-becd-9ddbf632a675",
                "f76d207b-6edb-4ff9-a648-b8298c637101"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0955292-c9f1-4ef8-9935-e3f17a91aa46",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 263,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "a6e678a5-3287-49c4-bf01-2e888a43cf00",
                  "parentUUID": "b0955292-c9f1-4ef8-9935-e3f17a91aa46",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "d875aa91-adfb-4335-bcf1-98b912b6aa5d",
                  "parentUUID": "b0955292-c9f1-4ef8-9935-e3f17a91aa46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d875aa91-adfb-4335-bcf1-98b912b6aa5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ae100e7-6f4b-4798-aa91-4b190e1581f0",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "464371d9-1cd7-4edc-b229-b7bed0a6579f",
                  "parentUUID": "4ae100e7-6f4b-4798-aa91-4b190e1581f0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "16c9623f-78e0-4f22-bf94-74ad9166f372",
                  "parentUUID": "4ae100e7-6f4b-4798-aa91-4b190e1581f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "fc869ce6-563e-4891-b374-68dacde61947",
                  "parentUUID": "4ae100e7-6f4b-4798-aa91-4b190e1581f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16c9623f-78e0-4f22-bf94-74ad9166f372",
                "fc869ce6-563e-4891-b374-68dacde61947"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d90a715d-a377-437d-a85d-1e5ea8b601ac",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f694ea0b-eb9a-433b-ae49-15b87def040f",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "af20e17c-e1da-445b-a578-6bbb44f1f21f",
                  "parentUUID": "f694ea0b-eb9a-433b-ae49-15b87def040f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "c43403b3-95df-4a7f-ba32-2bbffe6522c0",
                  "parentUUID": "f694ea0b-eb9a-433b-ae49-15b87def040f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "b9c95b19-93f5-44b2-8f35-65a6fd3767a1",
                  "parentUUID": "f694ea0b-eb9a-433b-ae49-15b87def040f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c43403b3-95df-4a7f-ba32-2bbffe6522c0",
                "b9c95b19-93f5-44b2-8f35-65a6fd3767a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "59f4f11d-1b5e-47c1-ac59-60c69ca0970f",
                  "parentUUID": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "0b0f7bf7-5ac9-4225-bf72-4cf814e4653e",
                  "parentUUID": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "7e90bfd1-716a-41e6-9543-89fd71f45b58",
                  "parentUUID": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "ce3d7f09-8994-4b55-b542-2407e72ee7c7",
                  "parentUUID": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "9131d040-4b2f-4bbe-8b8a-8c1a074201d8",
                  "parentUUID": "5af052ae-7b7c-4243-9281-ba1fac2a6e6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b0f7bf7-5ac9-4225-bf72-4cf814e4653e",
                "7e90bfd1-716a-41e6-9543-89fd71f45b58",
                "ce3d7f09-8994-4b55-b542-2407e72ee7c7",
                "9131d040-4b2f-4bbe-8b8a-8c1a074201d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "79a96337-f67a-4bb2-8afb-25178eb83550",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "49ffcb4f-0ba7-42cc-b094-63fdcc2d5412",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "57313f8b-2e7a-49c9-b42a-23df457ca658",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "d75a328a-6d15-4777-aee0-bf28d6c07024",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "7207c18a-e093-40b2-b5ce-74c97a440ef4",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "30bed9b5-3a64-4f68-b468-324dc1246862",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a404ca56-0ed7-41cb-bf62-18224a09bff2",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8bb8c526-1df6-4686-be1a-7514f2654dac",
                  "parentUUID": "de2d7dd5-3c90-406c-bda9-769946ee52fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49ffcb4f-0ba7-42cc-b094-63fdcc2d5412",
                "57313f8b-2e7a-49c9-b42a-23df457ca658",
                "d75a328a-6d15-4777-aee0-bf28d6c07024",
                "7207c18a-e093-40b2-b5ce-74c97a440ef4",
                "30bed9b5-3a64-4f68-b468-324dc1246862",
                "a404ca56-0ed7-41cb-bf62-18224a09bff2",
                "8bb8c526-1df6-4686-be1a-7514f2654dac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a31b0b3b-3b60-4917-a0e4-022c07159ee8",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "6802c82a-46d1-4e0b-9210-cd82959bb7f5",
                  "parentUUID": "a31b0b3b-3b60-4917-a0e4-022c07159ee8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "9e7d52ae-881d-4db9-9a9d-9f904e989d21",
                  "parentUUID": "a31b0b3b-3b60-4917-a0e4-022c07159ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "eec97bc8-f5ee-4bcf-8e68-0c7a1e7f9ab3",
                  "parentUUID": "a31b0b3b-3b60-4917-a0e4-022c07159ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "aa4d7f8a-e558-4f6f-abfe-fd121b3ba872",
                  "parentUUID": "a31b0b3b-3b60-4917-a0e4-022c07159ee8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e7d52ae-881d-4db9-9a9d-9f904e989d21",
                "eec97bc8-f5ee-4bcf-8e68-0c7a1e7f9ab3",
                "aa4d7f8a-e558-4f6f-abfe-fd121b3ba872"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bcbf085-4e07-4c41-9514-84c9667a8e6c",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "9592bf1a-e82c-4673-8cb0-0b0cf5c54184",
                  "parentUUID": "3bcbf085-4e07-4c41-9514-84c9667a8e6c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "19aa4d26-91b2-4fd8-9e0b-2501afbde15d",
                  "parentUUID": "3bcbf085-4e07-4c41-9514-84c9667a8e6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "612a02ce-735c-4eed-b8ce-c1916fff0a6a",
                  "parentUUID": "3bcbf085-4e07-4c41-9514-84c9667a8e6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19aa4d26-91b2-4fd8-9e0b-2501afbde15d",
                "612a02ce-735c-4eed-b8ce-c1916fff0a6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cf8ad1a-390a-4e98-98cc-e95a1a08fe94",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "3c901b55-ca85-4941-8f8c-c50cba91fd97",
                  "parentUUID": "9cf8ad1a-390a-4e98-98cc-e95a1a08fe94",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "77f3e9e3-e7be-42ab-92da-2fdeab9ff8ac",
                  "parentUUID": "9cf8ad1a-390a-4e98-98cc-e95a1a08fe94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77f3e9e3-e7be-42ab-92da-2fdeab9ff8ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2aa4e755-cffc-4ce8-8337-e0db4519bd8b",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "e09fc230-1a0f-4db5-a4b7-a0c2f92be8ae",
                  "parentUUID": "2aa4e755-cffc-4ce8-8337-e0db4519bd8b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "0bd96bb8-dd6f-4fae-8410-5f730c73eb4a",
                  "parentUUID": "2aa4e755-cffc-4ce8-8337-e0db4519bd8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bd96bb8-dd6f-4fae-8410-5f730c73eb4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eee60f45-06c1-48a3-a0e8-568a4bf7693a",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 132,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "0963f4a6-8e8c-4eba-ba94-92587fa32229",
                  "parentUUID": "eee60f45-06c1-48a3-a0e8-568a4bf7693a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "da8b3efc-0d98-4461-938c-02687bc03321",
                  "parentUUID": "eee60f45-06c1-48a3-a0e8-568a4bf7693a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "54fdc4de-6c37-44eb-8331-7e37d70f98fd",
                  "parentUUID": "eee60f45-06c1-48a3-a0e8-568a4bf7693a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "05b1a598-10bc-4713-b139-bcb2f4c3678c",
                  "parentUUID": "eee60f45-06c1-48a3-a0e8-568a4bf7693a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da8b3efc-0d98-4461-938c-02687bc03321",
                "54fdc4de-6c37-44eb-8331-7e37d70f98fd",
                "05b1a598-10bc-4713-b139-bcb2f4c3678c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1663bbc7-80d0-46cc-a508-f558b61ddf85",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "f5aa47b6-9730-42dd-8927-77bfbc9d537f",
                  "parentUUID": "1663bbc7-80d0-46cc-a508-f558b61ddf85",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "eb232ae6-11d0-4db3-b4f2-300d3acc5e28",
                  "parentUUID": "1663bbc7-80d0-46cc-a508-f558b61ddf85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "4e9638a5-e63a-4a26-ac15-6555e295c5d2",
                  "parentUUID": "1663bbc7-80d0-46cc-a508-f558b61ddf85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb232ae6-11d0-4db3-b4f2-300d3acc5e28",
                "4e9638a5-e63a-4a26-ac15-6555e295c5d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80e2d694-1763-45dd-9498-16bc9a08e1fa",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14b86668-86e0-4919-a0ab-ac0bfd4234a2",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "56b4bd76-0a7b-4595-83fd-7cd0a73ef979",
                  "parentUUID": "14b86668-86e0-4919-a0ab-ac0bfd4234a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "e188c17c-7198-430c-82a7-41ab3d35ad1a",
                  "parentUUID": "14b86668-86e0-4919-a0ab-ac0bfd4234a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "9a847fb1-3107-440e-ba88-ce7a8b994540",
                  "parentUUID": "14b86668-86e0-4919-a0ab-ac0bfd4234a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e188c17c-7198-430c-82a7-41ab3d35ad1a",
                "9a847fb1-3107-440e-ba88-ce7a8b994540"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3b18bbe-de42-42b1-88b3-a1a2dc531126",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "d670ceeb-fb77-4ac2-89ec-7879072e8c1d",
                  "parentUUID": "b3b18bbe-de42-42b1-88b3-a1a2dc531126",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "1a2434ef-598f-4af2-8fbf-ab4bde069333",
                  "parentUUID": "b3b18bbe-de42-42b1-88b3-a1a2dc531126",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "36543ccf-d0c9-40fd-999d-b8c95dc88717",
                  "parentUUID": "b3b18bbe-de42-42b1-88b3-a1a2dc531126",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "fc06157a-b18a-44f7-947d-0e0b9ba28d31",
                  "parentUUID": "b3b18bbe-de42-42b1-88b3-a1a2dc531126",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a2434ef-598f-4af2-8fbf-ab4bde069333",
                "36543ccf-d0c9-40fd-999d-b8c95dc88717",
                "fc06157a-b18a-44f7-947d-0e0b9ba28d31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3215499-2889-458f-a41e-3367d76118ae",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "3752ccea-a9c6-4c65-92b6-e885b3967327",
                  "parentUUID": "d3215499-2889-458f-a41e-3367d76118ae",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "60a0a7ea-e1ef-4ec6-b1c5-c66c765425b5",
                  "parentUUID": "d3215499-2889-458f-a41e-3367d76118ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "4329bf2e-5942-4f61-88db-780d89b71732",
                  "parentUUID": "d3215499-2889-458f-a41e-3367d76118ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "562fe8d0-5f78-41a7-8ff8-ddb318aff99a",
                  "parentUUID": "d3215499-2889-458f-a41e-3367d76118ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60a0a7ea-e1ef-4ec6-b1c5-c66c765425b5",
                "4329bf2e-5942-4f61-88db-780d89b71732",
                "562fe8d0-5f78-41a7-8ff8-ddb318aff99a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eafd12ef-287c-40cc-878d-38da36b14082",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "008f3c1e-8416-4718-ba74-3d2ed1c1f05c",
                  "parentUUID": "eafd12ef-287c-40cc-878d-38da36b14082",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "14f95634-78e5-4b04-b5f7-9acd924fcac9",
                  "parentUUID": "eafd12ef-287c-40cc-878d-38da36b14082",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14f95634-78e5-4b04-b5f7-9acd924fcac9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a191642-2464-4b79-bf92-b869a0765604",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "96e97732-0f4d-4d6d-95c4-737a8bcaae98",
                  "parentUUID": "6a191642-2464-4b79-bf92-b869a0765604",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "e8adc44f-7271-4387-8c34-610e9434d0ec",
                  "parentUUID": "6a191642-2464-4b79-bf92-b869a0765604",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8adc44f-7271-4387-8c34-610e9434d0ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "788c4c8d-36b6-4c8f-b648-fd51e2ed44ac",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "7edee24b-a550-477c-9d0a-1c95850398a5",
              "parentUUID": "788c4c8d-36b6-4c8f-b648-fd51e2ed44ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "7148b92d-e2d4-43a3-a823-588d3e494d7e",
              "parentUUID": "788c4c8d-36b6-4c8f-b648-fd51e2ed44ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7edee24b-a550-477c-9d0a-1c95850398a5",
            "7148b92d-e2d4-43a3-a823-588d3e494d7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c45f3574-fb21-4742-a3d6-f89ab4c84222",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "7f6963d6-a775-4a45-9f48-89700ac24b14",
              "parentUUID": "c45f3574-fb21-4742-a3d6-f89ab4c84222",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f6963d6-a775-4a45-9f48-89700ac24b14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6a52296-3953-4828-91c5-e7ca52d03d09",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "6024d73f-da21-4abd-9afb-8df33ed609aa",
              "parentUUID": "a6a52296-3953-4828-91c5-e7ca52d03d09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "f39911e6-ebb1-4bd7-87e4-3199119b6581",
              "parentUUID": "a6a52296-3953-4828-91c5-e7ca52d03d09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "d735da15-60eb-474c-957c-4481b13a301b",
              "parentUUID": "a6a52296-3953-4828-91c5-e7ca52d03d09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "2c36cadb-4212-4b08-b4d2-fbd9504c68b5",
              "parentUUID": "a6a52296-3953-4828-91c5-e7ca52d03d09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "6634b951-29eb-43ba-bfcf-bb473ef3d2a4",
              "parentUUID": "a6a52296-3953-4828-91c5-e7ca52d03d09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6024d73f-da21-4abd-9afb-8df33ed609aa",
            "f39911e6-ebb1-4bd7-87e4-3199119b6581",
            "d735da15-60eb-474c-957c-4481b13a301b",
            "2c36cadb-4212-4b08-b4d2-fbd9504c68b5",
            "6634b951-29eb-43ba-bfcf-bb473ef3d2a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 612,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d0666a96-c201-40bb-a73e-f6a1442206f0",
          "title": "Check dependency graph",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency graph Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_graph(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_graph.svg');\nfs.writeFileSync(output_path, result.result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_graph.svg');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(result.result, expected);",
              "err": {},
              "uuid": "fc42de40-9b49-49ba-b8b9-35db75222ea9",
              "parentUUID": "d0666a96-c201-40bb-a73e-f6a1442206f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "fc42de40-9b49-49ba-b8b9-35db75222ea9"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "158c7198-2a13-4379-af6e-6630da85e4d1",
          "title": "Check compile order",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check compile order Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_compile_order(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'compile_order.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'compile_order.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "291c0f58-e2be-4f5f-8655-b8c0a9aa8192",
              "parentUUID": "158c7198-2a13-4379-af6e-6630da85e4d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "291c0f58-e2be-4f5f-8655-b8c0a9aa8192"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d0f02ea0-9a8c-4cbc-905e-e97f22c3705b",
          "title": "Check dependency tree",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency tree Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_tree(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_tree.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_tree.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "4c780b31-3745-4769-9197-3e8b9acac3e2",
              "parentUUID": "d0f02ea0-9a8c-4cbc-905e-e97f22c3705b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "4c780b31-3745-4769-9197-3e8b9acac3e2"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b903d97-f412-4fee-9147-11a929ed73a3",
          "title": "Check multi project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/multi_project_manager.spec.ts",
          "file": "/tests/project_manager/project/multi_project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check multi project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = multi_prj.get_name();\nchai_1.assert.equal(prj_name, MULTI_PRJ_NAME, \"Error in project name.\");",
              "err": {},
              "uuid": "544bdb45-a2cf-4ce9-937f-9f334eac46af",
              "parentUUID": "4b903d97-f412-4fee-9147-11a929ed73a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 3 projects",
              "fullTitle": "Check multi project manager Add 3 projects",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create projects\nmulti_prj.create_project(prj_0.name);\nmulti_prj.create_project(prj_1.name);\nmulti_prj.create_project(prj_2.name);\n// Add files\nadd_files(multi_prj, prj_0);\nadd_files(multi_prj, prj_1);\nadd_files(multi_prj, prj_2);\n// Check\ncheck_project(multi_prj, prj_0);\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "a6831600-81bf-4640-a013-00d13e92a72f",
              "parentUUID": "4b903d97-f412-4fee-9147-11a929ed73a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check multi project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const new_name = 'new-name';\n// Rename project\nmulti_prj.rename_project(prj_0.name, new_name);\n// Check\nprj_0.name = new_name;\ncheck_project(multi_prj, prj_0);",
              "err": {},
              "uuid": "d2e97782-3339-42aa-a2e2-aa572edb9bdf",
              "parentUUID": "4b903d97-f412-4fee-9147-11a929ed73a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete one",
              "fullTitle": "Check multi project manager Delete one",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete project\nmulti_prj.delete_project(prj_0.name);\n// Check number of projects\nchai_1.assert.equal(multi_prj.get_projects().length, 2);\n// Check projects\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "2899a804-c85d-4e92-a720-98cc6c651fd8",
              "parentUUID": "4b903d97-f412-4fee-9147-11a929ed73a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Select project",
              "fullTitle": "Check multi project manager Select project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select project\nlet result = multi_prj.select_project_current(prj_1.name);\nchai_1.assert.equal(result.successful, true);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);\n// Select project doesn't exist\nresult = multi_prj.select_project_current(prj_0.name);\nchai_1.assert.equal(result.successful, false);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);",
              "err": {},
              "uuid": "b44cbaf8-6d9b-44ae-96a7-c4213fc5b864",
              "parentUUID": "4b903d97-f412-4fee-9147-11a929ed73a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "544bdb45-a2cf-4ce9-937f-9f334eac46af",
            "a6831600-81bf-4640-a013-00d13e92a72f",
            "d2e97782-3339-42aa-a2e2-aa572edb9bdf",
            "2899a804-c85d-4e92-a720-98cc6c651fd8",
            "b44cbaf8-6d9b-44ae-96a7-c4213fc5b864"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "375d121b-9b77-49df-97d4-05a13de2a17a",
          "title": "Check project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/project_manager.spec.ts",
          "file": "/tests/project_manager/project/project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_0, \"Error in project name.\");",
              "err": {},
              "uuid": "62e4748e-f561-4f0e-a95d-aa02115e36eb",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check project manager Rename project",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Rename project\nconst PRJ_NAME_1 = \"my-prj-1\";\nprj.rename(PRJ_NAME_1);\n// Check project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_1, \"Error in project name.\");",
              "err": {},
              "uuid": "89de5ae2-43d4-4040-9897-017655f5aee9",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 2 individual files",
              "fullTitle": "Check project manager Add 2 individual files",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Add file 0\nprj.add_file(file_0);\n// Add file 1\nprj.add_file(file_1);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 2, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_0.name, \"Error name file 0.\");\nchai_1.assert.equal(file_list[1].name, file_1.name, \"Error name file 1.\");",
              "err": {},
              "uuid": "d20fc1f9-7b66-47f9-b43b-9923cfe2ef68",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete file",
              "fullTitle": "Check project manager Delete file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete file 0\nprj.delete_file(file_0.name, file_0.logical_name);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 1, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_1.name, \"Error name file 0.\");",
              "err": {},
              "uuid": "bc373c5f-fd19-42e4-b5e2-d50abc578153",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "File in project",
              "fullTitle": "Check project manager File in project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// File 1 in project\nconst check_0 = prj.check_if_file_in_project(file_1.name, file_1.logical_name);\nchai_1.assert.equal(check_0, true, \"Error file 1 in project.\");\n// File random 0 not in project\nconst check_1 = prj.check_if_file_in_project('asd', file_1.logical_name);\nchai_1.assert.equal(check_1, false, \"Error file random name in project.\");\n// File random 1 not in project\nconst check_2 = prj.check_if_file_in_project(file_1.name, 'efg');\nchai_1.assert.equal(check_2, false, \"Error file random logical name in project.\");",
              "err": {},
              "uuid": "d378e973-b7ff-4260-bebd-8b0976254403",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set and get config",
              "fullTitle": "Check project manager Set and get config",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myconfig = cfg.get_default_config();\nmyconfig.editor.general.continue_comment = true;\nmyconfig.documentation.general.symbol_vhdl = 'asdf';\n// Set config\nprj.set_config(myconfig);\n// Get config\nconst prj_config = prj.get_config();\n//Check config\nchai_1.assert.equal(prj_config, myconfig, \"Error in config.\");",
              "err": {},
              "uuid": "7a60b422-275b-4057-911d-74433549d9f1",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add files from CSV",
              "fullTitle": "Check project manager Add files from CSV",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CSV_PATH = paht_lib.join(__dirname, 'helpers', 'files.csv');\n// Add files\nprj.add_file_from_csv(CSV_PATH, true);\n// Get files\nconst file_list = prj.get_project_definition().file_manager.get();\n// Check file 2\nchai_1.assert.equal(file_list[1].name, file_2.name, \"Error name file 2.\");\nchai_1.assert.equal(file_list[1].logical_name, file_2.logical_name, \"Error logical name file 2.\");\n// Check file 3\nchai_1.assert.equal(file_list[2].name, file_3.name, \"Error name file 3.\");\nchai_1.assert.equal(file_list[2].logical_name, file_3.logical_name, \"Error logical name file 3.\");",
              "err": {},
              "uuid": "75a06194-2ef9-483a-9e83-1da3cafbec10",
              "parentUUID": "375d121b-9b77-49df-97d4-05a13de2a17a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62e4748e-f561-4f0e-a95d-aa02115e36eb",
            "89de5ae2-43d4-4040-9897-017655f5aee9",
            "d20fc1f9-7b66-47f9-b43b-9923cfe2ef68",
            "bc373c5f-fd19-42e4-b5e2-d50abc578153",
            "d378e973-b7ff-4260-bebd-8b0976254403",
            "7a60b422-275b-4057-911d-74433549d9f1",
            "75a06194-2ef9-483a-9e83-1da3cafbec10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d225a85d-f10b-4826-8fa7-adb2f0ae997b",
          "title": "Check Edalize",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check GHDL",
              "fullTitle": "Check Edalize Check GHDL",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'ghdl');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder_tb.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"ghdl-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].filename, file_0.name);\n(0, assert_1.equal)(test_list[0].name, 'half_adder_process_tb');\n// Run\nprj.set_config(config);\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "c622af66-700c-4ecf-957d-9373de25031d",
              "parentUUID": "d225a85d-f10b-4826-8fa7-adb2f0ae997b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "c622af66-700c-4ecf-957d-9373de25031d"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73d32e5c-5cd9-414b-8ebf-05fcaeabb9e2",
          "title": "Check VUnit",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check one tests in runpy",
              "fullTitle": "Check VUnit Check one tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_0.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "102f8466-97c9-49ef-b296-306f3d666026",
              "parentUUID": "73d32e5c-5cd9-414b-8ebf-05fcaeabb9e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check multiple tests in runpy",
              "fullTitle": "Check VUnit Check multiple tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_1.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "32ec2448-c55f-4546-ab92-bd0a8ec44159",
              "parentUUID": "73d32e5c-5cd9-414b-8ebf-05fcaeabb9e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check runpy creation",
              "fullTitle": "Check VUnit Check runpy creation",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.creation;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_counting_errors.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_with_test_cases.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_2 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'test_control.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\nprj.add_file(file_2);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 3);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[2].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n    (0, assert_1.equal)(result[2].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "2d83186f-49c4-48ac-8586-6a1ab3c08f3b",
              "parentUUID": "73d32e5c-5cd9-414b-8ebf-05fcaeabb9e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "102f8466-97c9-49ef-b296-306f3d666026",
            "32ec2448-c55f-4546-ab92-bd0a8ec44159",
            "2d83186f-49c4-48ac-8586-6a1ab3c08f3b"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9433ce7a-9191-4c6e-a18c-e7db42eb24c8",
          "title": "Check cocotb",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check multiple tests",
              "fullTitle": "Check cocotb Check multiple tests",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "eba29115-3bed-4d09-b3ee-6b8de41525c6",
              "parentUUID": "9433ce7a-9191-4c6e-a18c-e7db42eb24c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one test",
              "fullTitle": "Check cocotb Check one test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\nconst selected_test = [test_list[0]];\n// Run\nprj.run(undefined, selected_test, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "32b1e80f-7342-4c98-be0c-d45be1433ebf",
              "parentUUID": "9433ce7a-9191-4c6e-a18c-e7db42eb24c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "eba29115-3bed-4d09-b3ee-6b8de41525c6",
            "32b1e80f-7342-4c98-be0c-d45be1433ebf"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9c2920e-802b-4140-965c-7bc34d8581eb",
          "title": "Check OSVVM",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Run test",
              "fullTitle": "Check OSVVM Run test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.osvvm;\nconfig.tools.osvvm.installation_path = \"/home/carlos/repo/osvvm/OsvvmLibraries/\";\nconfig.tools.osvvm.simulator_name = cfg.e_tools_osvvm_simulator_name.ghdl;\nconfig.tools.osvvm.tclsh_binary = \"tclsh8.6\";\n// Files\nconst file_0 = {\n    name: \"/home/carlos/repo/osvvm/OsvvmLibraries/UART/RunDemoTests.pro\",\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\n// Create project\nconst prj = new project_manager_1.Project_manager(\"osvvm-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get testlist\nconst test_list = await prj.get_test_list();\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "37399d0d-b40c-4c4f-89f1-75ad7cbdad1d",
              "parentUUID": "f9c2920e-802b-4140-965c-7bc34d8581eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "37399d0d-b40c-4c4f-89f1-75ad7cbdad1d"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "71e23f06-e9b0-4cc8-b3f5-08049fd3b62b",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9672afe7-400b-40e7-b87e-7343207cbccb",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "48cb1ee0-38cd-4644-82b7-cc7a20a16760",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f496facc-fe96-444e-8800-2befefa0cc38",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "efcd56b9-b77d-4457-98e7-521b63b5014e",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "cff7a4f9-64a5-4100-b25d-c233c875bbe1",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9d126681-3f82-48e4-aab5-b8573ecc8fc9",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "1423ea99-1e87-4dcb-8d53-9e13c1df242b",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "a185e81c-aeb7-43b7-b6ca-9309daad8f9c",
              "parentUUID": "e42e5f0a-7565-4e12-9db5-e9b1b7f3fe87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71e23f06-e9b0-4cc8-b3f5-08049fd3b62b",
            "9672afe7-400b-40e7-b87e-7343207cbccb",
            "48cb1ee0-38cd-4644-82b7-cc7a20a16760",
            "f496facc-fe96-444e-8800-2befefa0cc38",
            "efcd56b9-b77d-4457-98e7-521b63b5014e",
            "cff7a4f9-64a5-4100-b25d-c233c875bbe1",
            "9d126681-3f82-48e4-aab5-b8573ecc8fc9",
            "1423ea99-1e87-4dcb-8d53-9e13c1df242b",
            "a185e81c-aeb7-43b7-b6ca-9309daad8f9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 429,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e87edc17-0281-49aa-b341-bf22f9567cce",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "37b7b9a6-51e8-4f5a-bfb0-b1800c134fb3",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "d80a631c-c29e-4bff-bf61-8a02e5b79a7b",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e29c3f7b-dfe6-4046-a2ee-21bb22c8733c",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "00b4303d-772b-4933-9a00-8f59247fcf8f",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "23b2abc5-a79f-4784-8d4d-8dd6812300e7",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "576659e6-bf62-4082-8a05-5ef50fb51db7",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ffd03ea8-c5f3-44fe-9fa2-ef32be211eab",
              "parentUUID": "56bde2dd-7453-49fa-a09f-6d41af87fdc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e87edc17-0281-49aa-b341-bf22f9567cce",
            "37b7b9a6-51e8-4f5a-bfb0-b1800c134fb3",
            "d80a631c-c29e-4bff-bf61-8a02e5b79a7b",
            "e29c3f7b-dfe6-4046-a2ee-21bb22c8733c",
            "00b4303d-772b-4933-9a00-8f59247fcf8f",
            "23b2abc5-a79f-4784-8d4d-8dd6812300e7",
            "576659e6-bf62-4082-8a05-5ef50fb51db7",
            "ffd03ea8-c5f3-44fe-9fa2-ef32be211eab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1916,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2cb2133-57a1-4b60-9212-edd25bde5f26",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "d00b6724-c768-4631-9c2e-cb6c7fc8e244",
              "parentUUID": "c2cb2133-57a1-4b60-9212-edd25bde5f26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "e87b3979-0aa6-4b9f-9ea6-f1b94124cb22",
              "parentUUID": "c2cb2133-57a1-4b60-9212-edd25bde5f26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "df99fddb-3b3b-4ef9-b65c-585ae92887a0",
              "parentUUID": "c2cb2133-57a1-4b60-9212-edd25bde5f26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "f358f322-8c6f-4fa6-b14a-7d3d98eab179",
              "parentUUID": "c2cb2133-57a1-4b60-9212-edd25bde5f26",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d00b6724-c768-4631-9c2e-cb6c7fc8e244",
            "e87b3979-0aa6-4b9f-9ea6-f1b94124cb22",
            "df99fddb-3b3b-4ef9-b65c-585ae92887a0",
            "f358f322-8c6f-4fa6-b14a-7d3d98eab179"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c4c31900-70e4-409c-a0f9-5d8cfd7c4b70",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "c63fcbed-2bfa-484b-9cec-f1a3ef89d4cb",
              "parentUUID": "c4c31900-70e4-409c-a0f9-5d8cfd7c4b70",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "c7addef0-d9c2-4866-8025-afe5536dc18c",
              "parentUUID": "c4c31900-70e4-409c-a0f9-5d8cfd7c4b70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c63fcbed-2bfa-484b-9cec-f1a3ef89d4cb",
            "c7addef0-d9c2-4866-8025-afe5536dc18c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d24550f-dedc-43a8-ba0f-b9f8f8028ea8",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "d44e5917-7b9c-48fc-bdd9-f83e30386e9a",
              "parentUUID": "5d24550f-dedc-43a8-ba0f-b9f8f8028ea8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d44e5917-7b9c-48fc-bdd9-f83e30386e9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "18dc252c-79bb-451f-942c-52a7f38fe158",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7ad21ebc-f8b1-46c9-b96c-ad9325fe5ca7",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b17e2906-e079-4f22-889d-2018f7788b78",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b6860e80-2317-47cc-a3dc-6e3e85df8f07",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "f52ac4bf-8740-4811-b4dd-aa9ea7625ae2",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "2facc786-e9b7-488a-8c27-86f5cb34f610",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6d60341f-c9d5-4d59-9f62-aaa4af7350ac",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ed71226a-9d13-412b-b378-0df89633e1a9",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "cc5bef1b-1c05-426f-a50a-8c73781b9829",
              "parentUUID": "195f7379-b24b-42ff-98b7-8130fdbd1afe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18dc252c-79bb-451f-942c-52a7f38fe158",
            "7ad21ebc-f8b1-46c9-b96c-ad9325fe5ca7",
            "b17e2906-e079-4f22-889d-2018f7788b78",
            "b6860e80-2317-47cc-a3dc-6e3e85df8f07",
            "f52ac4bf-8740-4811-b4dd-aa9ea7625ae2",
            "2facc786-e9b7-488a-8c27-86f5cb34f610",
            "6d60341f-c9d5-4d59-9f62-aaa4af7350ac",
            "ed71226a-9d13-412b-b378-0df89633e1a9",
            "cc5bef1b-1c05-426f-a50a-8c73781b9829"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "08d64037-a4a3-489a-a1ce-a98368c269ea",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "529a21ba-a433-4f12-9648-e077ed47c47f",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a8435888-12d9-41ce-bb64-46d6998d378b",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8c8f0977-50e1-4735-9abf-a3a3de679c7b",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7ad6fca9-b312-4fe8-97c0-41c593e6621e",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "91ce0136-bdf2-473e-9a21-c5e4c6fe18ce",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "45f870be-7513-4890-bf16-f81e9eef083c",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8e43f693-d67e-4a0d-bb1b-626c1290d291",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b0e5a2d9-6990-4d5c-a0fe-f337cb3a37d6",
              "parentUUID": "73bd4b13-5150-4ff2-aea1-13dc76f11dba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08d64037-a4a3-489a-a1ce-a98368c269ea",
            "529a21ba-a433-4f12-9648-e077ed47c47f",
            "a8435888-12d9-41ce-bb64-46d6998d378b",
            "8c8f0977-50e1-4735-9abf-a3a3de679c7b",
            "7ad6fca9-b312-4fe8-97c0-41c593e6621e",
            "91ce0136-bdf2-473e-9a21-c5e4c6fe18ce",
            "45f870be-7513-4890-bf16-f81e9eef083c",
            "8e43f693-d67e-4a0d-bb1b-626c1290d291",
            "b0e5a2d9-6990-4d5c-a0fe-f337cb3a37d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "183c8d24-70aa-40c0-bf1e-5872a558ad6e",
        "81affb49-7196-4308-8d9f-3e33ab79f3e1"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}