#!/usr/bin/env node
// Copyright 2021 Teros Technology
//
// Ismael Perez Rojo
// Carlos Alberto Ruiz Naranjo
// Alfredo Saez
//
// This file is part of Colibri.
//
// Colibri is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Colibri is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Colibri.  If not, see <https://www.gnu.org/licenses/>.
/* eslint-disable no-console */

let custom_yml = require('./custom_yml');
let edam_yml = require('./edam');
let program = require('commander');
const path_lib = require('path');
const { exit } = require('process');

const doc_options_choice = ['none', 'all', 'only_commented'];

program.version(require('../package.json').version)
    .option('-fcustom, --filecustom [path]', 'Path of the YML file for documenter')
    .option('-f, --file [path]', 'Path of the EDAM yml file for documenter')
    .option('-o, --out [type]', 'Documentation format: md, html')
    .option('-dep, --dep', `Include dependency graph in the documentation: ${doc_options_choice}`, true)
    .option('-fsm, --fsm', `Include finite state machines in the documentation: ${doc_options_choice}`, true)
    .option('-s, --signals <type>', `Include signals/regs/wires in the documentation: ${doc_options_choice}`, 'none')
    .option('-c, --constants <type>', `Include constants/types in the documentation: ${doc_options_choice}`, 'none')
    .option('-p, --process <type>', `Include process/always in the documentation: ${doc_options_choice}`, 'none')
    .option('-sym, --symbol <type>', `Special character to parse comments into documentation`,'!')
    .usage('[options] <hdl-documenter>')
    .parse(process.argv);

program.parse(process.argv);
const options = program.opts();

let doc_config = get_documentation_config(options);
check_file_ext(options, doc_config);

function get_documentation_config(options){
  let include_dependency_graph = options.dep;
  if (include_dependency_graph === undefined){
    include_dependency_graph = false;
  }

  let include_fsm = options.fsm;
  if (include_fsm === undefined){
    include_fsm = false;
  }

  let include_signals = options.signals;
  validate_config('signals',include_signals);
  let include_constants = options.constants;
  validate_config('constants',include_constants);
  let include_process = options.process;
  validate_config('process',include_process);

  let doc_symbol = options.symbol;

  let config = {
    "dependency_graph": include_dependency_graph,
    "fsm": include_fsm,
    "signals": include_signals,
    "constants": include_constants,
    "process": include_process,
    "symbol": doc_symbol
  };
  return config;
}

function validate_config(name, config_data){
  if (doc_options_choice.includes(config_data) === false){
    console.log(`Error in config ${name}. Possible values: ${doc_options_choice}`);
    exit();
  }
}

function check_file_ext(options, doc_config){
  let file_custom = options.filecustom;
  if (file_custom !== undefined) {
    let file_ext = path_lib.extname(file_custom);
    if (file_ext === ".yml" || file_ext === ".YML" ) {
      let custom_yml = custom_yml.Custom_yml(doc_config);
      custom_yml.doc_yml(options);
    }
  }
  else{
    // eslint-disable-next-line no-console
    console.log("Invalid input custom file: It must be an'.yml' file ");
  }
  let file = options.file;
  if (file !== undefined) {
    let file_ext = path_lib.extname(file);
    if (file_ext === ".yml" || file_ext === ".YML" ){
      let edam_yml = edam_yml.Doc_edam(doc_config);
      edam_yml.doc_trs(options);
    }
  }
  else{
    // eslint-disable-next-line no-console
    console.log("Invalid input file: It must be an EDAM '.yml' file ");
  }
}














