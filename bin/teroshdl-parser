#!/usr/bin/env node

/* eslint-disable max-len */
// Copyright 2021 Teros Technology
//
// Ismael Perez Rojo
// Carlos Alberto Ruiz Naranjo
// Alfredo Saez
//
// This file is part of Colibri.
//
// Colibri is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Colibri is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Colibri.  If not, see <https://www.gnu.org/licenses/>.
/* eslint-disable no-console */

let program = require('commander');
let fs = require('fs');
const parser = require('../src/parser/factory');


const default_input = '/home/carlos/.vscode/extensions/teros-technology.teroshdl-2.0.7/resources/project_manager/examples/state_machine/state_machine_4.vhd';
const default_type = 'vhdl';
const default_comment_symbol = '!';
const default_output = '/home/carlos/Desktop/sample.json';

program.version(require('../package.json').version)
    .option('-i, --input [path]', 'Input path', default_input)
    .option('-l, --lang [lang]', 'HDL language', default_type)
    .option('-s, --symbol [symbol]', 'Comment symbol', default_comment_symbol)
    .option('-o, --output [path]', 'Output path', default_output)
    .usage('[options] <hdl-documenter>')
    .parse(process.argv);

program.parse(process.argv);
let options = program.opts();


let input = options.input;
let lang = options.lang;
let symbol = options.symbol;
let output = options.output;

(async() => {
    const data_code = fs.readFileSync(input, 'utf8');

    let factory = new parser.ParserFactory();
    let parser_hdl = await factory.getParser(lang, symbol);
    let tree = await parser_hdl.get_all(data_code, symbol);
    let fsm = await parser_hdl.get_svg_sm(data_code, symbol);
    tree.fsm = fsm;

    let data = JSON.stringify(tree);
    fs.writeFileSync(output, data);
})();