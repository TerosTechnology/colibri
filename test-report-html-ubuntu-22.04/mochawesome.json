{
  "stats": {
    "suites": 67,
    "tests": 217,
    "passes": 202,
    "pending": 15,
    "failures": 0,
    "start": "2023-01-11T17:41:03.360Z",
    "end": "2023-01-11T17:41:19.482Z",
    "duration": 16122,
    "testsRegistered": 219,
    "passPercent": 99.01960784313727,
    "pendingPercent": 6.8493150684931505,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "25e43142-cd6e-429e-96fe-e617797c71a8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "fbe8b616-b94d-4e82-9f53-4369737677bc",
          "parentUUID": "25e43142-cd6e-429e-96fe-e617797c71a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "d488484b-0e52-4a3a-8539-1d824bf0c59d",
          "parentUUID": "25e43142-cd6e-429e-96fe-e617797c71a8",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "dd9bbd76-4798-4786-9034-c532f815d71b",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e9db627c-952a-4499-91dd-3921ed6c6660",
              "parentUUID": "dd9bbd76-4798-4786-9034-c532f815d71b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "e9db627c-952a-4499-91dd-3921ed6c6660"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ffe8ef0c-36f1-4190-9a24-c7e7757d34df",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 1506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "6ccb39be-4c16-4b8a-9e22-6747d5eb193c",
              "parentUUID": "ffe8ef0c-36f1-4190-9a24-c7e7757d34df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ccb39be-4c16-4b8a-9e22-6747d5eb193c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "bafa4da6-d4a9-4a5c-b785-04ef710d11fd",
              "parentUUID": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "353f36fc-a5f7-483e-a8d5-ceb796e7241e",
              "parentUUID": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "dd073799-5354-4e95-a1df-6c7ca8b28d7e",
              "parentUUID": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ac2fedfc-b04a-4116-97c8-f9e8023b29e2",
              "parentUUID": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "11bfa941-157c-48cd-ac18-2547acb0aac4",
              "parentUUID": "8205ed1c-0148-42c1-9819-1cf3f416eb34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bafa4da6-d4a9-4a5c-b785-04ef710d11fd",
            "353f36fc-a5f7-483e-a8d5-ceb796e7241e",
            "dd073799-5354-4e95-a1df-6c7ca8b28d7e",
            "ac2fedfc-b04a-4116-97c8-f9e8023b29e2",
            "11bfa941-157c-48cd-ac18-2547acb0aac4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 285,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2ba47145-6143-477b-97c4-9b9cdd21848e",
              "parentUUID": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "7e971d4c-4e09-4b3f-8842-887cb54f7ec3",
              "parentUUID": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "85a22623-d020-4cb2-99a1-43cc948c58fe",
              "parentUUID": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "76a19178-ebfe-464e-b23e-64934c2e320b",
              "parentUUID": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "6107b512-9381-4c6a-b5c2-9fd584c03a8c",
              "parentUUID": "9a1b25b2-910d-4528-bb74-8cb8a0703a99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ba47145-6143-477b-97c4-9b9cdd21848e",
            "7e971d4c-4e09-4b3f-8842-887cb54f7ec3",
            "85a22623-d020-4cb2-99a1-43cc948c58fe",
            "76a19178-ebfe-464e-b23e-64934c2e320b",
            "6107b512-9381-4c6a-b5c2-9fd584c03a8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2757,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "785b735b-f21c-489e-82c8-1dcef20c17c7",
              "parentUUID": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "405af070-411c-4ec1-a586-971905426c26",
              "parentUUID": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "f5a8e4f1-3939-43a0-a123-92181ab9046c",
              "parentUUID": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "5ac6aacd-dcf3-4c30-ad87-e5c661d0bf8a",
              "parentUUID": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "eabcebad-5374-49f2-a04a-1ef743366a69",
              "parentUUID": "a8eea5f1-4b22-4e85-b5a1-9121c755d452",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "785b735b-f21c-489e-82c8-1dcef20c17c7",
            "405af070-411c-4ec1-a586-971905426c26",
            "f5a8e4f1-3939-43a0-a123-92181ab9046c",
            "5ac6aacd-dcf3-4c30-ad87-e5c661d0bf8a",
            "eabcebad-5374-49f2-a04a-1ef743366a69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1725,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57fb5781-f93d-4530-9b77-a7faf955f5da",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "4f74b761-8208-49ec-b732-56fc59f6beb2",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "753377a1-fcc8-482d-9053-6aabcd9f8e69",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "03373020-daba-4df4-a010-d7caa56ae8b3",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9080b98a-bd73-49bb-a337-6dd6fef71ed8",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "29340dff-0ad5-4380-ab27-a0e7275a144e",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "106cf84b-e04e-4683-a8a4-eaab08553a89",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "601fea56-8738-4d11-beea-97e47931bbc0",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "930c1d6a-0634-4153-82b8-93b81c6568f8",
              "parentUUID": "57fb5781-f93d-4530-9b77-a7faf955f5da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f74b761-8208-49ec-b732-56fc59f6beb2",
            "753377a1-fcc8-482d-9053-6aabcd9f8e69",
            "03373020-daba-4df4-a010-d7caa56ae8b3",
            "9080b98a-bd73-49bb-a337-6dd6fef71ed8",
            "29340dff-0ad5-4380-ab27-a0e7275a144e",
            "106cf84b-e04e-4683-a8a4-eaab08553a89",
            "601fea56-8738-4d11-beea-97e47931bbc0",
            "930c1d6a-0634-4153-82b8-93b81c6568f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f8afbbe-2006-4be9-b567-aaea1e231164",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "2a576f83-d4d6-4e7c-8662-84c5857af10c",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "8691e69c-35d0-49c9-8de5-a62139f08563",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "7215bc11-3fde-47ee-beb6-9f1a3fc94df6",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "623b0960-ce21-42cf-be82-3c53a935f01a",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "6c53466c-8478-4e13-b8a3-a165c5c8f9bf",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "00790740-5f3c-4c1f-b0fa-21d7191404e7",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "890e8ef4-0db9-406d-8808-d504ec62dc8e",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "844c64c4-4d1e-447f-9819-e267be9da0c2",
              "parentUUID": "3f8afbbe-2006-4be9-b567-aaea1e231164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a576f83-d4d6-4e7c-8662-84c5857af10c",
            "8691e69c-35d0-49c9-8de5-a62139f08563",
            "7215bc11-3fde-47ee-beb6-9f1a3fc94df6",
            "623b0960-ce21-42cf-be82-3c53a935f01a",
            "6c53466c-8478-4e13-b8a3-a165c5c8f9bf",
            "00790740-5f3c-4c1f-b0fa-21d7191404e7",
            "890e8ef4-0db9-406d-8808-d504ec62dc8e",
            "844c64c4-4d1e-447f-9819-e267be9da0c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1e06bab-a089-45fb-b259-7618ffb9394b",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "7b0ecb3c-2d77-44a4-b4d1-b1a4afb9acf4",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f2c85265-7a49-41d9-98ff-607ba7479fcf",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "2ce930a8-6644-488b-b707-eaa06f95944c",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "62ce8143-aaa6-4d9f-99d0-1f1a0065fe71",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "9d2f394f-1f54-49a2-ad37-b54763ffb204",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "258f5313-c7ef-4a74-b4b2-1674b1bb7d6c",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "bba18a6b-0a66-435a-89aa-050b7dbc479c",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "92edd926-d906-4a70-9bff-c9dec3ef87f0",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f0d12e9a-0025-4a95-82b2-08160dce99a2",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b56cef76-5cbf-4f8b-9a2e-5489816d78a8",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3d843b6e-124e-4e10-a4a5-1a730213c4c2",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "16d06d13-d59e-4111-8591-98d9f78bacff",
              "parentUUID": "f1e06bab-a089-45fb-b259-7618ffb9394b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b0ecb3c-2d77-44a4-b4d1-b1a4afb9acf4",
            "f2c85265-7a49-41d9-98ff-607ba7479fcf",
            "2ce930a8-6644-488b-b707-eaa06f95944c",
            "9d2f394f-1f54-49a2-ad37-b54763ffb204",
            "258f5313-c7ef-4a74-b4b2-1674b1bb7d6c",
            "bba18a6b-0a66-435a-89aa-050b7dbc479c",
            "92edd926-d906-4a70-9bff-c9dec3ef87f0",
            "f0d12e9a-0025-4a95-82b2-08160dce99a2",
            "b56cef76-5cbf-4f8b-9a2e-5489816d78a8",
            "3d843b6e-124e-4e10-a4a5-1a730213c4c2",
            "16d06d13-d59e-4111-8591-98d9f78bacff"
          ],
          "failures": [],
          "pending": [
            "62ce8143-aaa6-4d9f-99d0-1f1a0065fe71"
          ],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "1cbfdc42-5376-4128-a9f4-a7e0d551c80e",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "a3233ba8-1961-4ec5-9a9a-ae45e100f5a3",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "553a425d-0534-4310-98e2-83570931ae10",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "d2f24236-fdc2-4e0f-b00d-222e10d2e286",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "a97133db-5e0a-4925-b07f-66ff1b34592e",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "319babf0-7bc7-4582-9959-497bcc6bd790",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "7eba2beb-4344-4502-92e4-7cbd5328d3f5",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b92da211-c875-41c4-a6aa-04b422d4dd72",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "be903c25-e1a2-4127-b8d6-f99de11fae3e",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "90ba3f8b-ba3a-4b9c-bf52-bd1377add8f3",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "6282312a-df87-4ab9-88c3-c7799adfc178",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "63002d25-42da-4d07-9597-302ab397cb35",
              "parentUUID": "d9fbf9f9-b3c9-4fce-bf9d-420e89c90fa3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1cbfdc42-5376-4128-a9f4-a7e0d551c80e",
            "a3233ba8-1961-4ec5-9a9a-ae45e100f5a3",
            "553a425d-0534-4310-98e2-83570931ae10",
            "a97133db-5e0a-4925-b07f-66ff1b34592e",
            "319babf0-7bc7-4582-9959-497bcc6bd790",
            "b92da211-c875-41c4-a6aa-04b422d4dd72",
            "be903c25-e1a2-4127-b8d6-f99de11fae3e",
            "90ba3f8b-ba3a-4b9c-bf52-bd1377add8f3",
            "6282312a-df87-4ab9-88c3-c7799adfc178",
            "63002d25-42da-4d07-9597-302ab397cb35"
          ],
          "failures": [],
          "pending": [
            "d2f24236-fdc2-4e0f-b00d-222e10d2e286",
            "7eba2beb-4344-4502-92e4-7cbd5328d3f5"
          ],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8f294a05-0322-44c1-8f1c-a45dd5af3c50",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.lowercase,\n    name_case: cfg.e_formatter_standalone_name_case.lowercase,\n    indentation: \"    \",\n    align_port_generic: true,\n    align_comment: true,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "549ad66a-d726-41a3-99c9-74d427341667",
              "parentUUID": "8f294a05-0322-44c1-8f1c-a45dd5af3c50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.uppercase,\n    name_case: cfg.e_formatter_standalone_name_case.uppercase,\n    indentation: \"      \",\n    align_port_generic: true,\n    align_comment: false,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "9ca91dfd-a1a4-4c3b-a227-80088e687fde",
              "parentUUID": "8f294a05-0322-44c1-8f1c-a45dd5af3c50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "549ad66a-d726-41a3-99c9-74d427341667",
            "9ca91dfd-a1a4-4c3b-a227-80088e687fde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "7ee43ef8-095c-4fbe-9614-a815610f0d76",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "672e0399-3209-47c2-a239-f4e860a021a4",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "24a4186d-ab69-435b-a09b-9efd17c8c1ac",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 2",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 2",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "566bcd43-140c-47bf-844d-14cccc4c3f3f",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "b10646bc-5593-45ec-98fa-2f80612300b4",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "9c752226-7e45-4a21-9199-697d23afcecb",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "9502dca6-2258-4174-841d-8dc87be2f8f9",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 6",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 6",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "5d8ea01d-1f37-4dd9-807f-a6ebeda9c2fe",
              "parentUUID": "f9c6c57e-af8d-4bf5-afbe-79a0d1129cb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ee43ef8-095c-4fbe-9614-a815610f0d76",
            "672e0399-3209-47c2-a239-f4e860a021a4",
            "24a4186d-ab69-435b-a09b-9efd17c8c1ac",
            "566bcd43-140c-47bf-844d-14cccc4c3f3f",
            "b10646bc-5593-45ec-98fa-2f80612300b4",
            "9c752226-7e45-4a21-9199-697d23afcecb",
            "9502dca6-2258-4174-841d-8dc87be2f8f9",
            "5d8ea01d-1f37-4dd9-807f-a6ebeda9c2fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ee5d271d-6fd2-43e4-9408-81b014348d36",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: false,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "19f45375-e473-4514-af4f-8322d4c47698",
              "parentUUID": "ee5d271d-6fd2-43e4-9408-81b014348d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 4\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "192e1a8f-4bf9-4c7d-9518-25f2892b9b1b",
              "parentUUID": "ee5d271d-6fd2-43e4-9408-81b014348d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    one_bind_per_line: false,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"asdf\");",
              "err": {},
              "uuid": "7a7cd80a-11d1-44ba-b64d-7190cdff97ef",
              "parentUUID": "ee5d271d-6fd2-43e4-9408-81b014348d36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19f45375-e473-4514-af4f-8322d4c47698",
            "192e1a8f-4bf9-4c7d-9518-25f2892b9b1b",
            "7a7cd80a-11d1-44ba-b64d-7190cdff97ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 448,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1398b260-9cba-4cbe-ac99-1c88e3539e84",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "f88a6570-ce7b-4ffc-8972-039bdbdc937a",
              "parentUUID": "1398b260-9cba-4cbe-ac99-1c88e3539e84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f88a6570-ce7b-4ffc-8972-039bdbdc937a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2280ee95-8474-4ccc-a50a-a16a71babe72",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "3521af29-6dd0-4031-8e8e-161621c347c7",
              "parentUUID": "2280ee95-8474-4ccc-a50a-a16a71babe72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3521af29-6dd0-4031-8e8e-161621c347c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 396,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9eaf3859-7c47-4261-b504-38e2067d1740",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9fc5dc45-1136-4be7-973d-b5e09514158e",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 285,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "877c9543-d191-4c25-9bdb-ce32c314adb3",
                  "parentUUID": "9fc5dc45-1136-4be7-973d-b5e09514158e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "dae7e63b-715e-40a0-a1cd-a0f3a4a87515",
                  "parentUUID": "9fc5dc45-1136-4be7-973d-b5e09514158e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "3dbf6619-9f0b-4df5-9c9a-3170de20b052",
                  "parentUUID": "9fc5dc45-1136-4be7-973d-b5e09514158e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dae7e63b-715e-40a0-a1cd-a0f3a4a87515",
                "3dbf6619-9f0b-4df5-9c9a-3170de20b052"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cccfd48b-8a55-4940-834e-4022df69f98c",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 288,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "48227698-c9a9-4d03-997e-154f9f0049f8",
                  "parentUUID": "cccfd48b-8a55-4940-834e-4022df69f98c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "b7aedf98-e414-431a-ac63-e0afdf44a2da",
                  "parentUUID": "cccfd48b-8a55-4940-834e-4022df69f98c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "c1a28027-a761-4b9f-ac84-7c60a11b34a1",
                  "parentUUID": "cccfd48b-8a55-4940-834e-4022df69f98c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "799dc7b9-610e-4878-942b-dc896696eee6",
                  "parentUUID": "cccfd48b-8a55-4940-834e-4022df69f98c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "a18c4916-16ac-4393-92b8-653799a7a636",
                  "parentUUID": "cccfd48b-8a55-4940-834e-4022df69f98c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7aedf98-e414-431a-ac63-e0afdf44a2da",
                "c1a28027-a761-4b9f-ac84-7c60a11b34a1",
                "799dc7b9-610e-4878-942b-dc896696eee6",
                "a18c4916-16ac-4393-92b8-653799a7a636"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbab2f20-a454-4f39-9e83-32c412635136",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 304,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "c9a6e4e9-cee7-4a54-b0ec-0783ce796e7d",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a64d6680-9eb1-43f2-97a0-f7a98ece7556",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a0eab2d9-42c6-4f60-9802-de337004c657",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8bd19791-88fb-4bf9-ae4b-188e03b6ad0b",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ea95d6b9-bdcb-4827-8ad8-d5de2fd44d7a",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0ed5e34d-9aff-4504-9c1c-bb2c9bf0fd26",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "1bdb990d-8b0e-49ad-8750-6913fbb72d29",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "3e89855f-1a1d-4b9e-868f-d430fa4ab8f0",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "eae4007c-9fcb-485a-9f5e-6c621f45885c",
                  "parentUUID": "cbab2f20-a454-4f39-9e83-32c412635136",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a64d6680-9eb1-43f2-97a0-f7a98ece7556",
                "a0eab2d9-42c6-4f60-9802-de337004c657",
                "8bd19791-88fb-4bf9-ae4b-188e03b6ad0b",
                "ea95d6b9-bdcb-4827-8ad8-d5de2fd44d7a",
                "0ed5e34d-9aff-4504-9c1c-bb2c9bf0fd26",
                "3e89855f-1a1d-4b9e-868f-d430fa4ab8f0",
                "eae4007c-9fcb-485a-9f5e-6c621f45885c"
              ],
              "failures": [],
              "pending": [
                "1bdb990d-8b0e-49ad-8750-6913fbb72d29"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "114271a8-aff2-4134-a52b-7d90edbb35ec",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 300,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "3ddb5f87-be99-45df-9a77-4c10434b9518",
                  "parentUUID": "114271a8-aff2-4134-a52b-7d90edbb35ec",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "00a0ccc8-bc45-4065-a76a-690a4e45f7bc",
                  "parentUUID": "114271a8-aff2-4134-a52b-7d90edbb35ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "b68f6fbc-73da-40f6-bf73-033946b78a3f",
                  "parentUUID": "114271a8-aff2-4134-a52b-7d90edbb35ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "a0c519f3-0d35-431e-bda2-5ee78874c472",
                  "parentUUID": "114271a8-aff2-4134-a52b-7d90edbb35ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "a2c24e8d-6fbf-4966-a4c4-8ccdb78a8675",
                  "parentUUID": "114271a8-aff2-4134-a52b-7d90edbb35ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00a0ccc8-bc45-4065-a76a-690a4e45f7bc",
                "b68f6fbc-73da-40f6-bf73-033946b78a3f",
                "a0c519f3-0d35-431e-bda2-5ee78874c472",
                "a2c24e8d-6fbf-4966-a4c4-8ccdb78a8675"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17d71689-286b-4a3a-85a7-872c258467ae",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 285,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "75b69ea0-fe9f-4282-8a50-4aaf397ab451",
                  "parentUUID": "17d71689-286b-4a3a-85a7-872c258467ae",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "47ecb004-2162-44ba-a762-36299608c663",
                  "parentUUID": "17d71689-286b-4a3a-85a7-872c258467ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47ecb004-2162-44ba-a762-36299608c663"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66f9f3b1-01bd-4dd3-be3d-61e8c83e1f70",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 273,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "55ea7754-82aa-490a-bb5e-b0df10521ddb",
                  "parentUUID": "66f9f3b1-01bd-4dd3-be3d-61e8c83e1f70",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "381ded55-3bc9-4f99-8830-adb03582bdd2",
                  "parentUUID": "66f9f3b1-01bd-4dd3-be3d-61e8c83e1f70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "381ded55-3bc9-4f99-8830-adb03582bdd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 289,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "2922e359-57b4-4532-8347-393c05b4ad82",
                  "parentUUID": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "4c67ad82-68a8-4ceb-ab06-e4949e0e93c2",
                  "parentUUID": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "3c379046-8db2-400b-8ade-729b51324ed6",
                  "parentUUID": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "288b5e45-57c0-443e-9781-b2c3bb759bef",
                  "parentUUID": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "922c8262-97e1-4efc-bbda-9d59ed1473ca",
                  "parentUUID": "6e82c5f5-20b4-4dcf-8a94-961d8c064a46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c67ad82-68a8-4ceb-ab06-e4949e0e93c2",
                "3c379046-8db2-400b-8ade-729b51324ed6",
                "288b5e45-57c0-443e-9781-b2c3bb759bef",
                "922c8262-97e1-4efc-bbda-9d59ed1473ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b264ed08-438b-4c0c-955f-e80a47dd9614",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 374,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "9e14ad29-6e4d-4273-a7da-7a84cf7e405a",
                  "parentUUID": "b264ed08-438b-4c0c-955f-e80a47dd9614",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "a020c12e-6746-4f8a-a9e3-9496a4bac8ae",
                  "parentUUID": "b264ed08-438b-4c0c-955f-e80a47dd9614",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a020c12e-6746-4f8a-a9e3-9496a4bac8ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "126218a1-e63c-4cd6-939c-8ccc66d3786c",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f0150fc5-68e5-469a-a66b-c6c61b95b35d",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 259,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "acdbba0e-16c0-4597-b5f0-422074b85298",
                  "parentUUID": "f0150fc5-68e5-469a-a66b-c6c61b95b35d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "5597e8d3-9e4f-46ca-9f9f-7467cb9bc0ca",
                  "parentUUID": "f0150fc5-68e5-469a-a66b-c6c61b95b35d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "1d4b397a-92ba-49f2-ba4e-b6b35c3b538d",
                  "parentUUID": "f0150fc5-68e5-469a-a66b-c6c61b95b35d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5597e8d3-9e4f-46ca-9f9f-7467cb9bc0ca",
                "1d4b397a-92ba-49f2-ba4e-b6b35c3b538d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b18f64c-bb1a-45b4-8d27-86b10cdbf6e7",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 346,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "66b6b6a5-3980-4056-a465-7bf95541ba2f",
                  "parentUUID": "9b18f64c-bb1a-45b4-8d27-86b10cdbf6e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "314dd93b-eef3-43c1-a1da-92684408169a",
                  "parentUUID": "9b18f64c-bb1a-45b4-8d27-86b10cdbf6e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "15f52702-85c6-48ed-98ac-1c074c217a22",
                  "parentUUID": "9b18f64c-bb1a-45b4-8d27-86b10cdbf6e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "314dd93b-eef3-43c1-a1da-92684408169a",
                "15f52702-85c6-48ed-98ac-1c074c217a22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10170817-84aa-417c-8446-d5d6a01d57bc",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 248,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "d70f1dad-c192-4aca-a6f2-502cc90b4f4a",
                  "parentUUID": "10170817-84aa-417c-8446-d5d6a01d57bc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "333cbe6a-d920-4008-9979-71319c61b39c",
                  "parentUUID": "10170817-84aa-417c-8446-d5d6a01d57bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "333cbe6a-d920-4008-9979-71319c61b39c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e9d4c0c-4357-4916-b2b8-753c16e60795",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b67fe18a-7ee3-4e3d-b630-37f916a8c26a",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 354,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "39f7fe37-394c-491e-9b49-d35fb1b774c9",
                  "parentUUID": "b67fe18a-7ee3-4e3d-b630-37f916a8c26a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "5dbc2dc3-dfdd-47ab-9f77-1a82ee77bfa3",
                  "parentUUID": "b67fe18a-7ee3-4e3d-b630-37f916a8c26a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "ec78a097-9f70-45fd-95ce-a1389c59fd30",
                  "parentUUID": "b67fe18a-7ee3-4e3d-b630-37f916a8c26a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5dbc2dc3-dfdd-47ab-9f77-1a82ee77bfa3",
                "ec78a097-9f70-45fd-95ce-a1389c59fd30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edbdebe3-9aa2-42ec-8f12-bfc6279a5e9d",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 248,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "cfb1ef58-9384-4cd9-a858-6024e541c15e",
                  "parentUUID": "edbdebe3-9aa2-42ec-8f12-bfc6279a5e9d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8fc9d63b-6d5c-40f2-b7f9-2bfe9c099d92",
                  "parentUUID": "edbdebe3-9aa2-42ec-8f12-bfc6279a5e9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0eef4a53-6ea2-4b99-a4e9-50c0bc1f249c",
                  "parentUUID": "edbdebe3-9aa2-42ec-8f12-bfc6279a5e9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8898cbb9-60af-4356-8e2b-dc74ea3c9b31",
                  "parentUUID": "edbdebe3-9aa2-42ec-8f12-bfc6279a5e9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fc9d63b-6d5c-40f2-b7f9-2bfe9c099d92",
                "0eef4a53-6ea2-4b99-a4e9-50c0bc1f249c",
                "8898cbb9-60af-4356-8e2b-dc74ea3c9b31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d744f749-c51a-4ded-ba11-bfc78fda69fd",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 361,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "c0464927-b103-41f2-8833-03e6d58dadbe",
                  "parentUUID": "d744f749-c51a-4ded-ba11-bfc78fda69fd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "00f18956-260f-4d04-8cc0-d72ed4fe36d3",
                  "parentUUID": "d744f749-c51a-4ded-ba11-bfc78fda69fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00f18956-260f-4d04-8cc0-d72ed4fe36d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56e85530-d930-4724-a9d6-95cd8224de05",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 261,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "2a46f542-a899-4432-b9bf-2c276e74ab10",
                  "parentUUID": "56e85530-d930-4724-a9d6-95cd8224de05",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "1db6e5e7-8852-4a2c-81e8-be02d08e04bb",
                  "parentUUID": "56e85530-d930-4724-a9d6-95cd8224de05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "923fd029-9fef-4466-b086-8eb8a742a49a",
                  "parentUUID": "56e85530-d930-4724-a9d6-95cd8224de05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1db6e5e7-8852-4a2c-81e8-be02d08e04bb",
                "923fd029-9fef-4466-b086-8eb8a742a49a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e13773e-adce-4820-bc85-72a9706954f4",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "85edd69d-978a-4b8d-acdf-d8bf59c4c42c",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 37,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "fc31f69e-f2b3-43b5-9604-a5a2fbebb68c",
                  "parentUUID": "85edd69d-978a-4b8d-acdf-d8bf59c4c42c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "c44d29a5-8514-4236-823b-85647ca82354",
                  "parentUUID": "85edd69d-978a-4b8d-acdf-d8bf59c4c42c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "d3501110-e163-48d2-ad7f-43bb9f4c7f92",
                  "parentUUID": "85edd69d-978a-4b8d-acdf-d8bf59c4c42c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c44d29a5-8514-4236-823b-85647ca82354",
                "d3501110-e163-48d2-ad7f-43bb9f4c7f92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34266f76-0ed9-494d-ad0a-863b92330e21",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "e499497c-28be-41e8-8491-26e1d12cc622",
                  "parentUUID": "34266f76-0ed9-494d-ad0a-863b92330e21",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "3a5fff18-924a-4753-947f-1445aa4c3255",
                  "parentUUID": "34266f76-0ed9-494d-ad0a-863b92330e21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "4a594b07-f40e-45c9-89de-a5e36a4450c7",
                  "parentUUID": "34266f76-0ed9-494d-ad0a-863b92330e21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "79e66b54-75b8-44f7-a25f-2d0511c846f1",
                  "parentUUID": "34266f76-0ed9-494d-ad0a-863b92330e21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "a1ec6bfd-df6d-4304-9eb2-85ca66b3b23b",
                  "parentUUID": "34266f76-0ed9-494d-ad0a-863b92330e21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a5fff18-924a-4753-947f-1445aa4c3255",
                "4a594b07-f40e-45c9-89de-a5e36a4450c7",
                "79e66b54-75b8-44f7-a25f-2d0511c846f1",
                "a1ec6bfd-df6d-4304-9eb2-85ca66b3b23b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "072bf96d-6f75-4b3d-8bfb-fd15e06be42f",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "d8025e2d-a1ec-46c1-90e9-e6f833f9776f",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "48e81bb1-b3ec-445c-9dcd-99a592cf2c8c",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9a901746-95cd-48a7-b609-90745bb76d60",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "42a5e718-48de-4efe-aa55-e72ed6ac8ebe",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0f270ca5-2360-40c3-848f-5dc3edfa3add",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "fedc7ae3-dd28-4a9f-9242-0091451c9244",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "f4b3eb2f-7a66-472f-a8b0-0b070c34023c",
                  "parentUUID": "c8cc5237-ebbd-4d82-bfd2-71ad3d11f000",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8025e2d-a1ec-46c1-90e9-e6f833f9776f",
                "48e81bb1-b3ec-445c-9dcd-99a592cf2c8c",
                "9a901746-95cd-48a7-b609-90745bb76d60",
                "42a5e718-48de-4efe-aa55-e72ed6ac8ebe",
                "0f270ca5-2360-40c3-848f-5dc3edfa3add",
                "fedc7ae3-dd28-4a9f-9242-0091451c9244",
                "f4b3eb2f-7a66-472f-a8b0-0b070c34023c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f96ff6c-f2e4-4c5a-b771-d3c7a6350ec8",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "899ce3d3-e3c6-4097-8f36-ad913f1cf2a8",
                  "parentUUID": "6f96ff6c-f2e4-4c5a-b771-d3c7a6350ec8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "5af036bb-f21f-4550-9825-1b7ff4bf1844",
                  "parentUUID": "6f96ff6c-f2e4-4c5a-b771-d3c7a6350ec8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "3ccff1ad-d12d-4265-b1cd-946d92b427e2",
                  "parentUUID": "6f96ff6c-f2e4-4c5a-b771-d3c7a6350ec8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "2facb614-7fda-4bde-bfff-091e2c706d44",
                  "parentUUID": "6f96ff6c-f2e4-4c5a-b771-d3c7a6350ec8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5af036bb-f21f-4550-9825-1b7ff4bf1844",
                "3ccff1ad-d12d-4265-b1cd-946d92b427e2",
                "2facb614-7fda-4bde-bfff-091e2c706d44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb26e477-d2be-46dc-af83-46b3185e3bec",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "ce9d0c61-8555-4848-9ee3-a2c2a85dcba3",
                  "parentUUID": "cb26e477-d2be-46dc-af83-46b3185e3bec",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "f5ec61f4-0ce3-47ce-a2ef-7d76bcdcf7e7",
                  "parentUUID": "cb26e477-d2be-46dc-af83-46b3185e3bec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "dd388375-440d-4bdd-bf6c-627b9a593ac7",
                  "parentUUID": "cb26e477-d2be-46dc-af83-46b3185e3bec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5ec61f4-0ce3-47ce-a2ef-7d76bcdcf7e7",
                "dd388375-440d-4bdd-bf6c-627b9a593ac7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d219392c-dd20-4d95-80d0-7713e9a9cc5f",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "621db27f-1e46-453c-baa8-5bc14478ed67",
                  "parentUUID": "d219392c-dd20-4d95-80d0-7713e9a9cc5f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "ca6fe347-16fc-4754-9b0f-ea39a8d0c48d",
                  "parentUUID": "d219392c-dd20-4d95-80d0-7713e9a9cc5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca6fe347-16fc-4754-9b0f-ea39a8d0c48d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d406bb88-99f9-4cca-9ac8-36967b18accb",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "ba917b1d-a9ab-4bb8-bab0-da70bd69fb65",
                  "parentUUID": "d406bb88-99f9-4cca-9ac8-36967b18accb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "280b8677-617d-4956-a78b-bd53788edf60",
                  "parentUUID": "d406bb88-99f9-4cca-9ac8-36967b18accb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "280b8677-617d-4956-a78b-bd53788edf60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29a5d528-dcd5-4760-826f-01841e4670e7",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 160,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "da1fa85c-cbd8-4314-9cd0-2b754486524a",
                  "parentUUID": "29a5d528-dcd5-4760-826f-01841e4670e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "13c30a2e-cd9c-432e-90fa-f0530156aa43",
                  "parentUUID": "29a5d528-dcd5-4760-826f-01841e4670e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "e0b72e19-8b42-44ee-925e-6a8532d3bc07",
                  "parentUUID": "29a5d528-dcd5-4760-826f-01841e4670e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "996ecbc5-088f-404f-b3a0-5d051667362d",
                  "parentUUID": "29a5d528-dcd5-4760-826f-01841e4670e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13c30a2e-cd9c-432e-90fa-f0530156aa43",
                "e0b72e19-8b42-44ee-925e-6a8532d3bc07",
                "996ecbc5-088f-404f-b3a0-5d051667362d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "715800f5-2ada-485e-8198-63e5333b7007",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "85fd91d4-f0ad-46a4-a715-439b27d4e49d",
                  "parentUUID": "715800f5-2ada-485e-8198-63e5333b7007",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "3f96cfcb-b116-45d8-a030-41d6baf474af",
                  "parentUUID": "715800f5-2ada-485e-8198-63e5333b7007",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "75089987-a065-402f-828f-347e539bc878",
                  "parentUUID": "715800f5-2ada-485e-8198-63e5333b7007",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f96cfcb-b116-45d8-a030-41d6baf474af",
                "75089987-a065-402f-828f-347e539bc878"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b3754d2c-b2dc-437c-8b42-fb640211eb15",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1af38708-8488-4b1d-80da-44f38688c160",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "bde3c3b3-24c1-47ef-b9e4-b608b2219cb6",
                  "parentUUID": "1af38708-8488-4b1d-80da-44f38688c160",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "033497bf-2762-46d0-856f-90d03d3544a0",
                  "parentUUID": "1af38708-8488-4b1d-80da-44f38688c160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "aeb57917-732b-4064-9831-126034d473e2",
                  "parentUUID": "1af38708-8488-4b1d-80da-44f38688c160",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "033497bf-2762-46d0-856f-90d03d3544a0",
                "aeb57917-732b-4064-9831-126034d473e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4433c80-c8bd-4a06-b981-e8e0303d1787",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "3bf6c265-31a5-4410-a57d-e05857bce9b1",
                  "parentUUID": "b4433c80-c8bd-4a06-b981-e8e0303d1787",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "7770aba7-befa-496a-9ea7-aea900c3d9cb",
                  "parentUUID": "b4433c80-c8bd-4a06-b981-e8e0303d1787",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "7e050885-7e40-4cbc-be81-af7357b946b0",
                  "parentUUID": "b4433c80-c8bd-4a06-b981-e8e0303d1787",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "a74f86cf-b858-4cb0-a721-2a8ff77f474a",
                  "parentUUID": "b4433c80-c8bd-4a06-b981-e8e0303d1787",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7770aba7-befa-496a-9ea7-aea900c3d9cb",
                "7e050885-7e40-4cbc-be81-af7357b946b0",
                "a74f86cf-b858-4cb0-a721-2a8ff77f474a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1063162f-3193-4f36-8a1d-70a35e4327ef",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "24c6fd70-d6d1-4a1e-9a18-3482a96f29d8",
                  "parentUUID": "1063162f-3193-4f36-8a1d-70a35e4327ef",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "a17d1956-2089-4f05-b287-4c4d1d1552f0",
                  "parentUUID": "1063162f-3193-4f36-8a1d-70a35e4327ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "84450301-a2d1-4dd0-96de-15b1326084cf",
                  "parentUUID": "1063162f-3193-4f36-8a1d-70a35e4327ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "3fad5ade-9e8f-42a2-acf5-83f761fbd996",
                  "parentUUID": "1063162f-3193-4f36-8a1d-70a35e4327ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a17d1956-2089-4f05-b287-4c4d1d1552f0",
                "84450301-a2d1-4dd0-96de-15b1326084cf",
                "3fad5ade-9e8f-42a2-acf5-83f761fbd996"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52c608af-5714-4050-80f7-726ad3185995",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "6ab3231d-8907-439a-9063-809ed597a88a",
                  "parentUUID": "52c608af-5714-4050-80f7-726ad3185995",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "4a15dab4-0bbe-4723-a197-341a4d9bfea7",
                  "parentUUID": "52c608af-5714-4050-80f7-726ad3185995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a15dab4-0bbe-4723-a197-341a4d9bfea7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a148ef1e-8a39-4f10-9763-7cc8928d2d4b",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "56f7f4f3-9062-4d2b-a37b-71fb125f552d",
                  "parentUUID": "a148ef1e-8a39-4f10-9763-7cc8928d2d4b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "93871482-30b2-4cbc-887d-e5fc5b9c1fd4",
                  "parentUUID": "a148ef1e-8a39-4f10-9763-7cc8928d2d4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93871482-30b2-4cbc-887d-e5fc5b9c1fd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "13735076-2df3-4e51-8941-cde1a9546b0c",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "1a7bca3f-4747-4dec-87ec-6f3a431d8b1f",
              "parentUUID": "13735076-2df3-4e51-8941-cde1a9546b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "c72869f4-0fd5-4541-b867-6fe0e209f930",
              "parentUUID": "13735076-2df3-4e51-8941-cde1a9546b0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a7bca3f-4747-4dec-87ec-6f3a431d8b1f",
            "c72869f4-0fd5-4541-b867-6fe0e209f930"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4900403a-f366-4556-8e43-26921cc2eabf",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "24eea54e-5c6d-4ae5-8f55-32a53df7d50d",
              "parentUUID": "4900403a-f366-4556-8e43-26921cc2eabf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24eea54e-5c6d-4ae5-8f55-32a53df7d50d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "4eaba11b-8950-48a1-86ec-2cf258fb4980",
              "parentUUID": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "744a37ce-50a4-4b51-8e67-bb6395cde134",
              "parentUUID": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "62fba831-4d5f-4b60-9984-8d60f27bf18e",
              "parentUUID": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "4cb399cc-235f-413d-9f0a-8203c34745bb",
              "parentUUID": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "e8a4b313-b4a4-41bf-98a9-0d12497ab3aa",
              "parentUUID": "bb0bf405-62ff-4cd7-bf44-de3bbe40894d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4eaba11b-8950-48a1-86ec-2cf258fb4980",
            "744a37ce-50a4-4b51-8e67-bb6395cde134",
            "62fba831-4d5f-4b60-9984-8d60f27bf18e",
            "4cb399cc-235f-413d-9f0a-8203c34745bb",
            "e8a4b313-b4a4-41bf-98a9-0d12497ab3aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "85e15393-03fa-4b1d-95de-b3906dc32bb1",
          "title": "Check dependency graph",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency graph Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_graph(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_graph.svg');\nfs.writeFileSync(output_path, result.result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_graph.svg');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(result.result, expected);",
              "err": {},
              "uuid": "13eb6039-2824-4895-9a2f-e026d486e585",
              "parentUUID": "85e15393-03fa-4b1d-95de-b3906dc32bb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "13eb6039-2824-4895-9a2f-e026d486e585"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e44116b-2f66-4253-877f-d7b841a596e1",
          "title": "Check compile order",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check compile order Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_compile_order(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'compile_order.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'compile_order.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "2331d9b2-4f8b-4b96-8c80-98987a59a8a3",
              "parentUUID": "6e44116b-2f66-4253-877f-d7b841a596e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "2331d9b2-4f8b-4b96-8c80-98987a59a8a3"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aedfce6c-ff34-477a-ba0e-e879200d409b",
          "title": "Check dependency tree",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency tree Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_tree(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_tree.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_tree.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "3b2baad9-0adc-4e9f-b422-0d478418b5c8",
              "parentUUID": "aedfce6c-ff34-477a-ba0e-e879200d409b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "3b2baad9-0adc-4e9f-b422-0d478418b5c8"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
          "title": "Check multi project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/multi_project_manager.spec.ts",
          "file": "/tests/project_manager/project/multi_project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check multi project manager Get name after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = multi_prj.get_name();\nchai_1.assert.equal(prj_name, MULTI_PRJ_NAME, \"Error in project name.\");",
              "err": {},
              "uuid": "351346b4-8221-4f59-8707-1604d5a490e7",
              "parentUUID": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 3 projects",
              "fullTitle": "Check multi project manager Add 3 projects",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create projects\nmulti_prj.create_project(prj_0.name);\nmulti_prj.create_project(prj_1.name);\nmulti_prj.create_project(prj_2.name);\n// Add files\nadd_files(multi_prj, prj_0);\nadd_files(multi_prj, prj_1);\nadd_files(multi_prj, prj_2);\n// Check\ncheck_project(multi_prj, prj_0);\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "07360dd8-e4cd-4971-a20c-60e9ef68052b",
              "parentUUID": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check multi project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const new_name = 'new-name';\n// Rename project\nmulti_prj.rename_project(prj_0.name, new_name);\n// Check\nprj_0.name = new_name;\ncheck_project(multi_prj, prj_0);",
              "err": {},
              "uuid": "45a94f08-f1a4-4b85-8d6c-445bdeee8c80",
              "parentUUID": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete one",
              "fullTitle": "Check multi project manager Delete one",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete project\nmulti_prj.delete_project(prj_0.name);\n// Check number of projects\nchai_1.assert.equal(multi_prj.get_projects().length, 2);\n// Check projects\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "b20539a5-8567-43d5-814e-a6f9022de9ef",
              "parentUUID": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Select project",
              "fullTitle": "Check multi project manager Select project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select project\nlet result = multi_prj.select_project_current(prj_1.name);\nchai_1.assert.equal(result.successful, true);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);\n// Select project doesn't exist\nresult = multi_prj.select_project_current(prj_0.name);\nchai_1.assert.equal(result.successful, false);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);",
              "err": {},
              "uuid": "fa3a980d-4b12-4faa-a887-b09f8a6a3878",
              "parentUUID": "c5c6e435-bd9d-4702-9d7b-0a3a323f3770",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "351346b4-8221-4f59-8707-1604d5a490e7",
            "07360dd8-e4cd-4971-a20c-60e9ef68052b",
            "45a94f08-f1a4-4b85-8d6c-445bdeee8c80",
            "b20539a5-8567-43d5-814e-a6f9022de9ef",
            "fa3a980d-4b12-4faa-a887-b09f8a6a3878"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7aa1544-25b6-4885-864c-61318f29885f",
          "title": "Check project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/project_manager.spec.ts",
          "file": "/tests/project_manager/project/project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_0, \"Error in project name.\");",
              "err": {},
              "uuid": "0212392e-934f-4734-a199-8fc57af3c5a8",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Rename project\nconst PRJ_NAME_1 = \"my-prj-1\";\nprj.rename(PRJ_NAME_1);\n// Check project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_1, \"Error in project name.\");",
              "err": {},
              "uuid": "dac072cb-31b5-4fa7-aecf-97f17e483be3",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 2 individual files",
              "fullTitle": "Check project manager Add 2 individual files",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Add file 0\nprj.add_file(file_0);\n// Add file 1\nprj.add_file(file_1);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 2, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_0.name, \"Error name file 0.\");\nchai_1.assert.equal(file_list[1].name, file_1.name, \"Error name file 1.\");",
              "err": {},
              "uuid": "a092518c-e04c-4f7a-9f96-687bc888943a",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete file",
              "fullTitle": "Check project manager Delete file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete file 0\nprj.delete_file(file_0.name, file_0.logical_name);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 1, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_1.name, \"Error name file 0.\");",
              "err": {},
              "uuid": "0241db2c-a8c1-4b4f-b573-e1dd9b4f2a54",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "File in project",
              "fullTitle": "Check project manager File in project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// File 1 in project\nconst check_0 = prj.check_if_file_in_project(file_1.name, file_1.logical_name);\nchai_1.assert.equal(check_0, true, \"Error file 1 in project.\");\n// File random 0 not in project\nconst check_1 = prj.check_if_file_in_project('asd', file_1.logical_name);\nchai_1.assert.equal(check_1, false, \"Error file random name in project.\");\n// File random 1 not in project\nconst check_2 = prj.check_if_file_in_project(file_1.name, 'efg');\nchai_1.assert.equal(check_2, false, \"Error file random logical name in project.\");",
              "err": {},
              "uuid": "950ade10-c19f-4d7a-be8c-f529e4cbcd3c",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set and get config",
              "fullTitle": "Check project manager Set and get config",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myconfig = cfg.get_default_config();\nmyconfig.editor.general.continue_comment = true;\nmyconfig.documentation.general.symbol_vhdl = 'asdf';\n// Set config\nprj.set_config(myconfig);\n// Get config\nconst prj_config = prj.get_config();\n//Check config\nchai_1.assert.equal(prj_config, myconfig, \"Error in config.\");",
              "err": {},
              "uuid": "46eda0be-4cdf-4335-ae0c-da61bb7f2a29",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add files from CSV",
              "fullTitle": "Check project manager Add files from CSV",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CSV_PATH = paht_lib.join(__dirname, 'helpers', 'files.csv');\n// Add files\nprj.add_file_from_csv(CSV_PATH, true);\n// Get files\nconst file_list = prj.get_project_definition().file_manager.get();\n// Check file 2\nchai_1.assert.equal(file_list[1].name, file_2.name, \"Error name file 2.\");\nchai_1.assert.equal(file_list[1].logical_name, file_2.logical_name, \"Error logical name file 2.\");\n// Check file 3\nchai_1.assert.equal(file_list[2].name, file_3.name, \"Error name file 3.\");\nchai_1.assert.equal(file_list[2].logical_name, file_3.logical_name, \"Error logical name file 3.\");",
              "err": {},
              "uuid": "5597a19f-ca8d-440d-ad12-b94930161dad",
              "parentUUID": "e7aa1544-25b6-4885-864c-61318f29885f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0212392e-934f-4734-a199-8fc57af3c5a8",
            "dac072cb-31b5-4fa7-aecf-97f17e483be3",
            "a092518c-e04c-4f7a-9f96-687bc888943a",
            "0241db2c-a8c1-4b4f-b573-e1dd9b4f2a54",
            "950ade10-c19f-4d7a-be8c-f529e4cbcd3c",
            "46eda0be-4cdf-4335-ae0c-da61bb7f2a29",
            "5597a19f-ca8d-440d-ad12-b94930161dad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57f62da8-b1b3-4926-a9f6-20aa69930768",
          "title": "Check Edalize",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check GHDL",
              "fullTitle": "Check Edalize Check GHDL",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'ghdl');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder_tb.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"ghdl-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].filename, file_0.name);\n(0, assert_1.equal)(test_list[0].name, 'half_adder_process_tb');\n// Run\nprj.set_config(config);\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "9bb15fea-05ad-4f7d-8776-484719fc1b58",
              "parentUUID": "57f62da8-b1b3-4926-a9f6-20aa69930768",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "9bb15fea-05ad-4f7d-8776-484719fc1b58"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "687afc83-6f79-4e92-8936-ce24e9e94585",
          "title": "Check VUnit",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check one tests in runpy",
              "fullTitle": "Check VUnit Check one tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_0.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "60a86a4f-0003-4097-8ed8-3d07cff8455a",
              "parentUUID": "687afc83-6f79-4e92-8936-ce24e9e94585",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check multiple tests in runpy",
              "fullTitle": "Check VUnit Check multiple tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_1.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "671ff408-3927-4c2d-a82e-3963003259cb",
              "parentUUID": "687afc83-6f79-4e92-8936-ce24e9e94585",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check runpy creation",
              "fullTitle": "Check VUnit Check runpy creation",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.creation;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_counting_errors.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_with_test_cases.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_2 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'test_control.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\nprj.add_file(file_2);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 3);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[2].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n    (0, assert_1.equal)(result[2].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "451b50f5-462c-4451-8060-8c52964041d5",
              "parentUUID": "687afc83-6f79-4e92-8936-ce24e9e94585",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "60a86a4f-0003-4097-8ed8-3d07cff8455a",
            "671ff408-3927-4c2d-a82e-3963003259cb",
            "451b50f5-462c-4451-8060-8c52964041d5"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2dd8196a-c0ec-477b-b301-f7213f4ccd1a",
          "title": "Check cocotb",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check multiple tests",
              "fullTitle": "Check cocotb Check multiple tests",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "6d1c94fb-8f1d-4627-be5c-42df523c8f00",
              "parentUUID": "2dd8196a-c0ec-477b-b301-f7213f4ccd1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one test",
              "fullTitle": "Check cocotb Check one test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\nconst selected_test = [test_list[0]];\n// Run\nprj.run(undefined, selected_test, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "9298e27a-cb43-4e35-80a4-87b375058272",
              "parentUUID": "2dd8196a-c0ec-477b-b301-f7213f4ccd1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "6d1c94fb-8f1d-4627-be5c-42df523c8f00",
            "9298e27a-cb43-4e35-80a4-87b375058272"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1271d7b1-e84f-4370-8211-db8b219846af",
          "title": "Check OSVVM",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Run test",
              "fullTitle": "Check OSVVM Run test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.osvvm;\nconfig.tools.osvvm.installation_path = \"/home/carlos/repo/osvvm/OsvvmLibraries/\";\nconfig.tools.osvvm.simulator_name = cfg.e_tools_osvvm_simulator_name.ghdl;\nconfig.tools.osvvm.tclsh_binary = \"tclsh8.6\";\n// Files\nconst file_0 = {\n    name: \"/home/carlos/repo/osvvm/OsvvmLibraries/UART/RunDemoTests.pro\",\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\n// Create project\nconst prj = new project_manager_1.Project_manager(\"osvvm-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get testlist\nconst test_list = await prj.get_test_list();\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "7e08c92f-3985-4d51-8b8d-08e97d6af40e",
              "parentUUID": "1271d7b1-e84f-4370-8211-db8b219846af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "7e08c92f-3985-4d51-8b8d-08e97d6af40e"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b236ce4-6e5f-464d-a140-057a66239a28",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "6c15480a-6757-4625-8ebf-26c7e77a9a18",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "32ea5f58-d373-4cdc-9b7a-43de51868b3d",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "db4461e7-2797-4217-986b-7499926e4098",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "0a035109-26a9-4b43-b36c-f70389ed5651",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "3d38cf3a-552f-4c2b-92f0-b60dacdaa47d",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "a949549e-eb78-41b9-89ff-1ecd8ee86aca",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "081f8b2d-fa07-45b4-99d0-a331470c8071",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "966600b1-39c4-4e87-9a00-fd49096645fd",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "a3b6efa5-46f9-42f2-8d68-60de03a1de4d",
              "parentUUID": "1b236ce4-6e5f-464d-a140-057a66239a28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c15480a-6757-4625-8ebf-26c7e77a9a18",
            "32ea5f58-d373-4cdc-9b7a-43de51868b3d",
            "db4461e7-2797-4217-986b-7499926e4098",
            "0a035109-26a9-4b43-b36c-f70389ed5651",
            "3d38cf3a-552f-4c2b-92f0-b60dacdaa47d",
            "a949549e-eb78-41b9-89ff-1ecd8ee86aca",
            "081f8b2d-fa07-45b4-99d0-a331470c8071",
            "966600b1-39c4-4e87-9a00-fd49096645fd",
            "a3b6efa5-46f9-42f2-8d68-60de03a1de4d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "761bda62-c36b-416b-bc02-47d2332c3432",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "81de1a7c-b93f-44f4-9a03-52f3c0262847",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "aef79a9d-ecbe-4848-8264-830f13c5e7e4",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e4b4fcac-83fa-4ab8-903a-0d300cdebf6f",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "24920751-381d-45b9-a1a2-e756a48ead02",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ae806570-8bb8-4846-9379-a1a0fc19c3bf",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "836ff6a5-16cf-4e23-9b69-971cfc2fae2d",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f73dba1f-0797-4198-aa89-1a61c62f8eb6",
              "parentUUID": "d6334502-33d2-4ba8-8208-3e08525fb9a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "761bda62-c36b-416b-bc02-47d2332c3432",
            "81de1a7c-b93f-44f4-9a03-52f3c0262847",
            "aef79a9d-ecbe-4848-8264-830f13c5e7e4",
            "e4b4fcac-83fa-4ab8-903a-0d300cdebf6f",
            "24920751-381d-45b9-a1a2-e756a48ead02",
            "ae806570-8bb8-4846-9379-a1a0fc19c3bf",
            "836ff6a5-16cf-4e23-9b69-971cfc2fae2d",
            "f73dba1f-0797-4198-aa89-1a61c62f8eb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb07bc6c-4fd6-4831-8c5d-af870f021989",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "57faefc3-4f8a-42a9-b0f8-26a26025b1e1",
              "parentUUID": "eb07bc6c-4fd6-4831-8c5d-af870f021989",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "bf728096-1235-4930-be54-e1cfc9c5784b",
              "parentUUID": "eb07bc6c-4fd6-4831-8c5d-af870f021989",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "b126faca-968d-4707-9932-1f8aad456be2",
              "parentUUID": "eb07bc6c-4fd6-4831-8c5d-af870f021989",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "97c4803b-c055-4f59-acaa-ffbdc514e14b",
              "parentUUID": "eb07bc6c-4fd6-4831-8c5d-af870f021989",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57faefc3-4f8a-42a9-b0f8-26a26025b1e1",
            "bf728096-1235-4930-be54-e1cfc9c5784b",
            "b126faca-968d-4707-9932-1f8aad456be2",
            "97c4803b-c055-4f59-acaa-ffbdc514e14b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53c2fd7c-6399-4e07-99bd-de0f4d8d0626",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "4178e391-1588-45b9-902b-041775d67cf3",
              "parentUUID": "53c2fd7c-6399-4e07-99bd-de0f4d8d0626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "e5283836-bdc7-4647-9359-15fc53cfb69b",
              "parentUUID": "53c2fd7c-6399-4e07-99bd-de0f4d8d0626",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4178e391-1588-45b9-902b-041775d67cf3",
            "e5283836-bdc7-4647-9359-15fc53cfb69b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f4c49ba6-065d-4163-aefc-23b3cd0a6897",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "ecb486c4-1c04-4701-847d-29e09a17b58d",
              "parentUUID": "f4c49ba6-065d-4163-aefc-23b3cd0a6897",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecb486c4-1c04-4701-847d-29e09a17b58d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b7dd15d6-f6fb-440f-9f8d-7f8738013922",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "2489aeb8-f20e-4323-a37e-84ef6829ac89",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6e2e7b49-5e58-4a7b-a055-3ae854ac1930",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7b8b144c-0d92-4941-8adf-300e21dff5ef",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a7eb0576-e601-41d5-9776-bd8028b13c35",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "cc77ea25-556d-4115-89af-76108762dab8",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "acc7a702-eb17-4510-876c-3665263e83fb",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a9b4a670-382e-4ccf-9adb-0e0f2c420f13",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1d5131e0-3a02-4990-90e5-6a403397ba15",
              "parentUUID": "a0718f61-cffb-499c-a7eb-65ecee036bc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7dd15d6-f6fb-440f-9f8d-7f8738013922",
            "2489aeb8-f20e-4323-a37e-84ef6829ac89",
            "6e2e7b49-5e58-4a7b-a055-3ae854ac1930",
            "7b8b144c-0d92-4941-8adf-300e21dff5ef",
            "a7eb0576-e601-41d5-9776-bd8028b13c35",
            "cc77ea25-556d-4115-89af-76108762dab8",
            "acc7a702-eb17-4510-876c-3665263e83fb",
            "a9b4a670-382e-4ccf-9adb-0e0f2c420f13",
            "1d5131e0-3a02-4990-90e5-6a403397ba15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d0bbda30-4ab8-4b61-b37f-ff1f4083b600",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "e50dc78c-5c7a-4135-bddb-eff0bf63d9ea",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "32c1b298-ff7c-4653-8c91-7addb9b28164",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "76218164-cac2-4fda-be4c-39512f46b92d",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "f6aad90b-d380-4026-9f37-9519d75dcc8b",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ab6fafbb-485b-4b47-bd3c-0e9fdce26cc6",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9ad71e2e-b34e-4593-b3c2-91138560f1c8",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a402879c-ce02-4f2a-82b8-9f27a9f66c07",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "de1792bb-2567-4e95-898d-e17a5cb4e708",
              "parentUUID": "bb508cb5-4e3b-471d-8a04-bc452e70218a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0bbda30-4ab8-4b61-b37f-ff1f4083b600",
            "e50dc78c-5c7a-4135-bddb-eff0bf63d9ea",
            "32c1b298-ff7c-4653-8c91-7addb9b28164",
            "76218164-cac2-4fda-be4c-39512f46b92d",
            "f6aad90b-d380-4026-9f37-9519d75dcc8b",
            "ab6fafbb-485b-4b47-bd3c-0e9fdce26cc6",
            "9ad71e2e-b34e-4593-b3c2-91138560f1c8",
            "a402879c-ce02-4f2a-82b8-9f27a9f66c07",
            "de1792bb-2567-4e95-898d-e17a5cb4e708"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "fbe8b616-b94d-4e82-9f53-4369737677bc",
        "d488484b-0e52-4a3a-8539-1d824bf0c59d"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}