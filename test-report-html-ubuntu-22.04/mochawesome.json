{
  "stats": {
    "suites": 67,
    "tests": 217,
    "passes": 202,
    "pending": 15,
    "failures": 0,
    "start": "2023-01-11T13:28:11.746Z",
    "end": "2023-01-11T13:28:25.062Z",
    "duration": 13316,
    "testsRegistered": 219,
    "passPercent": 99.01960784313727,
    "pendingPercent": 6.8493150684931505,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "f84c86dc-9eb2-4fa9-8962-8cef79308366",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "0ba88cd4-4cde-464c-9647-d0d606a602bf",
          "parentUUID": "f84c86dc-9eb2-4fa9-8962-8cef79308366",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "ea21921c-d5b0-4a00-8b77-8428e22e0ce6",
          "parentUUID": "f84c86dc-9eb2-4fa9-8962-8cef79308366",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "de776a0a-7aa0-4c81-b9a4-16696bf2074d",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "25ae67da-44b2-4bea-a81b-1ae3ddb02b20",
              "parentUUID": "de776a0a-7aa0-4c81-b9a4-16696bf2074d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "25ae67da-44b2-4bea-a81b-1ae3ddb02b20"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "860fde3b-3926-4f2b-b343-c89f2642281a",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 1494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "6a240b8b-0c1a-4104-8077-a388db5ff492",
              "parentUUID": "860fde3b-3926-4f2b-b343-c89f2642281a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a240b8b-0c1a-4104-8077-a388db5ff492"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1494,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "89b07123-7009-44a8-913f-636c4e7b5b6e",
              "parentUUID": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "3cb92cc4-dd64-4b7c-8014-3d57552837b4",
              "parentUUID": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "adbc2d23-9a10-4272-b047-8be2ef2196c6",
              "parentUUID": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "e1b918a9-be7f-4c76-8325-6d31082ae5f2",
              "parentUUID": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "8ebc160a-79bd-47e3-b9b0-505e685afce0",
              "parentUUID": "2907eacb-38f4-4bcb-9656-2b83aa2e859a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89b07123-7009-44a8-913f-636c4e7b5b6e",
            "3cb92cc4-dd64-4b7c-8014-3d57552837b4",
            "adbc2d23-9a10-4272-b047-8be2ef2196c6",
            "e1b918a9-be7f-4c76-8325-6d31082ae5f2",
            "8ebc160a-79bd-47e3-b9b0-505e685afce0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "73ab806a-da85-47f8-b711-40509a8e6d66",
              "parentUUID": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "274d3356-0892-4c3a-9a51-5bd105e4b7ac",
              "parentUUID": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "90264690-3283-4f0c-8fa3-b4ce98a79c67",
              "parentUUID": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ab974c62-3f23-48d7-8621-aa69b845d0cb",
              "parentUUID": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "6d263448-d9fd-4f9d-b085-fd3a6cbd4280",
              "parentUUID": "d1d623bd-e827-4d4c-9dd4-913796c61a6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73ab806a-da85-47f8-b711-40509a8e6d66",
            "274d3356-0892-4c3a-9a51-5bd105e4b7ac",
            "90264690-3283-4f0c-8fa3-b4ce98a79c67",
            "ab974c62-3f23-48d7-8621-aa69b845d0cb",
            "6d263448-d9fd-4f9d-b085-fd3a6cbd4280"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ef0ce6c3-f283-4cce-acbb-8469f3158dd0",
              "parentUUID": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ccd46dad-fed4-4fdb-8cdf-ee30889056ed",
              "parentUUID": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "72cf0cad-6936-42b4-9daa-5fccbc9b1e37",
              "parentUUID": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "19c15d07-e281-41e3-8796-4fe1d04d8f15",
              "parentUUID": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "8620008c-0a13-491c-b83e-87f5d19984bc",
              "parentUUID": "eef2bb35-6fb6-428e-99e0-ccef25c608fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef0ce6c3-f283-4cce-acbb-8469f3158dd0",
            "ccd46dad-fed4-4fdb-8cdf-ee30889056ed",
            "72cf0cad-6936-42b4-9daa-5fccbc9b1e37",
            "19c15d07-e281-41e3-8796-4fe1d04d8f15",
            "8620008c-0a13-491c-b83e-87f5d19984bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1585,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9eb31b4f-f61f-4b81-bee0-6591f128655e",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "611f1139-a252-45b1-ba3d-e62f2e81d0c7",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "0c05efc0-4873-4774-bd2e-f6feeb26b61e",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "c0663841-f622-46ff-8f55-3fb00352ea3f",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "60349868-f70f-4c2f-9a14-c3f23010c73e",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9694cde7-68e6-4575-a232-1cbed4bb5615",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "fa416ca6-7f1f-4fa7-aeaf-b8d5e856a556",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "8ee344da-4c88-4978-b9e2-85b00c6833af",
              "parentUUID": "cf29eadd-9361-4d6d-a8e6-4a76c9093488",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9eb31b4f-f61f-4b81-bee0-6591f128655e",
            "611f1139-a252-45b1-ba3d-e62f2e81d0c7",
            "0c05efc0-4873-4774-bd2e-f6feeb26b61e",
            "c0663841-f622-46ff-8f55-3fb00352ea3f",
            "60349868-f70f-4c2f-9a14-c3f23010c73e",
            "9694cde7-68e6-4575-a232-1cbed4bb5615",
            "fa416ca6-7f1f-4fa7-aeaf-b8d5e856a556",
            "8ee344da-4c88-4978-b9e2-85b00c6833af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3c84a594-4654-4f76-84ca-f34c58fa9492",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "7d6e5fbc-8366-4633-bfb5-aa702bbfa922",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "2a0cc9d1-6e2b-43d0-83a3-6e748fc1a2fc",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "02db2d62-ceae-4227-bce7-46cba9f97ab7",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "0685d29e-a9eb-4cb2-8bcf-866590c1ea3b",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a99efad4-8e33-40db-b66e-93172955fc9a",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b4d678a8-357e-49c7-8218-4e3288bd63ec",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "5d1d7dec-3ab3-4ab0-b2b7-aabc3a2d8911",
              "parentUUID": "fd674187-c971-4e5d-a34d-50a3b7132aa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c84a594-4654-4f76-84ca-f34c58fa9492",
            "7d6e5fbc-8366-4633-bfb5-aa702bbfa922",
            "2a0cc9d1-6e2b-43d0-83a3-6e748fc1a2fc",
            "02db2d62-ceae-4227-bce7-46cba9f97ab7",
            "0685d29e-a9eb-4cb2-8bcf-866590c1ea3b",
            "a99efad4-8e33-40db-b66e-93172955fc9a",
            "b4d678a8-357e-49c7-8218-4e3288bd63ec",
            "5d1d7dec-3ab3-4ab0-b2b7-aabc3a2d8911"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "93f80f1d-b3c2-4447-8042-cd8728c9faca",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3dea6b43-af6c-406a-b756-21bc6be3168b",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "9eb42502-7bd4-47d3-9f71-7b6d4d092d40",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "5b499280-f301-4460-ab7e-4b2d453930fc",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "45db4c49-f270-4e54-864c-a4dd9918a38d",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "735dffe1-20b9-4215-9f10-4b9a90e1b321",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3189b1e1-40a5-462f-bd4c-ec3325a8cc9d",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "cd157006-75d4-4208-8461-6b60a3703d12",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "739a7540-470c-41bb-b0fe-d7b0f6536882",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ddd7c4d7-46b1-41c1-ab11-7966c3c93f18",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "25c10cb2-ccd1-4399-b431-c54126bd3bb5",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "68152d50-4cc6-4700-8ed7-75c4e9d0918d",
              "parentUUID": "1a84b2bc-37c5-4531-abe6-9261884cd38c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93f80f1d-b3c2-4447-8042-cd8728c9faca",
            "3dea6b43-af6c-406a-b756-21bc6be3168b",
            "9eb42502-7bd4-47d3-9f71-7b6d4d092d40",
            "45db4c49-f270-4e54-864c-a4dd9918a38d",
            "735dffe1-20b9-4215-9f10-4b9a90e1b321",
            "3189b1e1-40a5-462f-bd4c-ec3325a8cc9d",
            "cd157006-75d4-4208-8461-6b60a3703d12",
            "739a7540-470c-41bb-b0fe-d7b0f6536882",
            "ddd7c4d7-46b1-41c1-ab11-7966c3c93f18",
            "25c10cb2-ccd1-4399-b431-c54126bd3bb5",
            "68152d50-4cc6-4700-8ed7-75c4e9d0918d"
          ],
          "failures": [],
          "pending": [
            "5b499280-f301-4460-ab7e-4b2d453930fc"
          ],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "7c460c48-c804-42ff-8312-00f591ec618f",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "4aa4c093-9c41-44be-b185-5cef30ad7110",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "5793c0be-df6d-40e6-812d-57a6d869df99",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "b3b931a7-e2de-4e10-abb9-ddc65e8d09db",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "13b69c8d-7edb-4837-85fd-7fe1e21b96fe",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "a4699d11-0dab-4498-b068-5d6b56d2abb9",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "c7ca75be-6ada-4d2a-bd18-752e57a963c2",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "001d9631-3047-48d0-9e01-6f1bdf60d649",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "bb842ec0-20a2-4a97-99fb-4b15b417bf71",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "d3c41853-b5a6-4de8-8288-1d54e9b941ff",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3db94195-c111-467c-a4b2-372e4b675895",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b0e77b94-df2e-468f-9820-2d7caadb93e4",
              "parentUUID": "17cd34cd-dd6a-477c-b65d-eddfae7f24bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c460c48-c804-42ff-8312-00f591ec618f",
            "4aa4c093-9c41-44be-b185-5cef30ad7110",
            "5793c0be-df6d-40e6-812d-57a6d869df99",
            "13b69c8d-7edb-4837-85fd-7fe1e21b96fe",
            "a4699d11-0dab-4498-b068-5d6b56d2abb9",
            "001d9631-3047-48d0-9e01-6f1bdf60d649",
            "bb842ec0-20a2-4a97-99fb-4b15b417bf71",
            "d3c41853-b5a6-4de8-8288-1d54e9b941ff",
            "3db94195-c111-467c-a4b2-372e4b675895",
            "b0e77b94-df2e-468f-9820-2d7caadb93e4"
          ],
          "failures": [],
          "pending": [
            "b3b931a7-e2de-4e10-abb9-ddc65e8d09db",
            "c7ca75be-6ada-4d2a-bd18-752e57a963c2"
          ],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f17ec9d0-2355-44af-ab7d-8fccc17e14e4",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.lowercase,\n    name_case: cfg.e_formatter_standalone_name_case.lowercase,\n    indentation: \"    \",\n    align_port_generic: true,\n    align_comment: true,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "3335e08a-8ec0-429a-a75b-3021fcd80612",
              "parentUUID": "f17ec9d0-2355-44af-ab7d-8fccc17e14e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.uppercase,\n    name_case: cfg.e_formatter_standalone_name_case.uppercase,\n    indentation: \"      \",\n    align_port_generic: true,\n    align_comment: false,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "a01781ce-1627-43f6-a954-83e5c9243560",
              "parentUUID": "f17ec9d0-2355-44af-ab7d-8fccc17e14e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3335e08a-8ec0-429a-a75b-3021fcd80612",
            "a01781ce-1627-43f6-a954-83e5c9243560"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "7346e41d-3249-459b-9d1b-869e904b5e4e",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "74c37fd5-8913-45dc-9991-c9c8cae7f1ef",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "187564a0-d50c-4a21-bce2-3a11ff1ddccf",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 2",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 2",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "86c61cf6-ce0e-4c8d-b544-5536abfb5ef4",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "a94b5963-e7b8-4606-a26a-a6a3a66eb398",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "b68daab0-13c5-4f08-ae4e-4f707aa24186",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "1da2abaf-d306-4a99-8f0e-e49da400e475",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 6",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 6",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "eeb96fb7-3258-4095-8793-77c5d62d6412",
              "parentUUID": "8b3f6b30-46fe-4705-8baa-2b75825cf1d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7346e41d-3249-459b-9d1b-869e904b5e4e",
            "74c37fd5-8913-45dc-9991-c9c8cae7f1ef",
            "187564a0-d50c-4a21-bce2-3a11ff1ddccf",
            "86c61cf6-ce0e-4c8d-b544-5536abfb5ef4",
            "a94b5963-e7b8-4606-a26a-a6a3a66eb398",
            "b68daab0-13c5-4f08-ae4e-4f707aa24186",
            "1da2abaf-d306-4a99-8f0e-e49da400e475",
            "eeb96fb7-3258-4095-8793-77c5d62d6412"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1307ae8f-2dd1-45b0-9ce0-e961b06660fb",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: false,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "bb6ef8cf-d4d1-468d-a728-92a4cc0c08a3",
              "parentUUID": "1307ae8f-2dd1-45b0-9ce0-e961b06660fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 4\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "6cb611e9-923b-41d9-9a31-f63d003a03df",
              "parentUUID": "1307ae8f-2dd1-45b0-9ce0-e961b06660fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    one_bind_per_line: false,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"asdf\");",
              "err": {},
              "uuid": "d4351803-d1fc-47ad-bf52-334deb16a5cd",
              "parentUUID": "1307ae8f-2dd1-45b0-9ce0-e961b06660fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb6ef8cf-d4d1-468d-a728-92a4cc0c08a3",
            "6cb611e9-923b-41d9-9a31-f63d003a03df",
            "d4351803-d1fc-47ad-bf52-334deb16a5cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 418,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c650f1a-9344-43df-a4da-dbc6ec4d24d8",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "0c8d6b49-ce81-43cb-8fb7-3fdd40c367b6",
              "parentUUID": "9c650f1a-9344-43df-a4da-dbc6ec4d24d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c8d6b49-ce81-43cb-8fb7-3fdd40c367b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1119017-92bf-4f82-b9c4-dde3780c8aa4",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "8554d874-f161-4a9f-a7e7-1a771af35d43",
              "parentUUID": "e1119017-92bf-4f82-b9c4-dde3780c8aa4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8554d874-f161-4a9f-a7e7-1a771af35d43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 307,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8089bc0b-56be-45fb-9afa-6d3c81913cd0",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1c6b4039-fcc0-4e96-8ca6-b1917239e73f",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 214,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "4bf87ddb-abe8-4137-9612-985a6322f53c",
                  "parentUUID": "1c6b4039-fcc0-4e96-8ca6-b1917239e73f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "fa0d7ae8-ebb0-410e-91bb-d83edb1bf153",
                  "parentUUID": "1c6b4039-fcc0-4e96-8ca6-b1917239e73f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "8ed2505e-015e-4b17-a5d2-73a87a51f827",
                  "parentUUID": "1c6b4039-fcc0-4e96-8ca6-b1917239e73f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa0d7ae8-ebb0-410e-91bb-d83edb1bf153",
                "8ed2505e-015e-4b17-a5d2-73a87a51f827"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 169,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "fb2c5982-386a-4449-9d4b-a63fbbbc0940",
                  "parentUUID": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "37a36e28-bce9-4049-b767-bd81bb3a1bc9",
                  "parentUUID": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "c69d7224-4e64-4953-8a20-946390529580",
                  "parentUUID": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "0a13b4f4-17e2-40f9-95d3-8646917cb106",
                  "parentUUID": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "66370a1a-1354-4e23-840b-6cf00d841dad",
                  "parentUUID": "4d8c4201-c082-4574-b7b6-4d138fde6a77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37a36e28-bce9-4049-b767-bd81bb3a1bc9",
                "c69d7224-4e64-4953-8a20-946390529580",
                "0a13b4f4-17e2-40f9-95d3-8646917cb106",
                "66370a1a-1354-4e23-840b-6cf00d841dad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "676af91e-547f-48d7-9192-108598de8f1e",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 153,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "5ba7e91d-2055-462f-9a4b-c5254705c6f3",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ff5033b3-ea7e-4ae9-b1d8-51fc60f835a4",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ed113b95-c988-4759-8ec8-8f3cc0056ede",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "3cc097de-97c2-4542-bb1c-67afb3f6d22c",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "e6def0e5-9368-414b-859a-7e84145e1854",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ec3f39ed-50ec-42ca-81b7-1cf561c2df95",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "22ae4c98-0d28-4311-a4df-657fa8fab5b1",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "f2e67099-eb97-427b-afde-ebef668c7195",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "af587f36-3172-4c4b-9512-3a67dc926826",
                  "parentUUID": "676af91e-547f-48d7-9192-108598de8f1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff5033b3-ea7e-4ae9-b1d8-51fc60f835a4",
                "ed113b95-c988-4759-8ec8-8f3cc0056ede",
                "3cc097de-97c2-4542-bb1c-67afb3f6d22c",
                "e6def0e5-9368-414b-859a-7e84145e1854",
                "ec3f39ed-50ec-42ca-81b7-1cf561c2df95",
                "f2e67099-eb97-427b-afde-ebef668c7195",
                "af587f36-3172-4c4b-9512-3a67dc926826"
              ],
              "failures": [],
              "pending": [
                "22ae4c98-0d28-4311-a4df-657fa8fab5b1"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 206,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "4d22338c-c04c-4668-89c7-74c2c7b60e25",
                  "parentUUID": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "065b7b90-22b3-4a19-8972-c72be5f1f89d",
                  "parentUUID": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "10796f23-79f0-4874-b4dd-0a5882afa028",
                  "parentUUID": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "e5b44ed8-85fe-4cce-9ede-c63771dd3451",
                  "parentUUID": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "c16deec7-a69c-40f0-84e0-5029b4f0304b",
                  "parentUUID": "e7bcb4e6-f190-4a5a-9b28-8d33473b4fc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "065b7b90-22b3-4a19-8972-c72be5f1f89d",
                "10796f23-79f0-4874-b4dd-0a5882afa028",
                "e5b44ed8-85fe-4cce-9ede-c63771dd3451",
                "c16deec7-a69c-40f0-84e0-5029b4f0304b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6185652-47f3-45eb-8095-7a64c50977e5",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 154,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "b6cdca95-0a4b-4992-b83b-ee00455dc1a3",
                  "parentUUID": "f6185652-47f3-45eb-8095-7a64c50977e5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8427b43c-9fa0-48e1-9ae2-212679358a3d",
                  "parentUUID": "f6185652-47f3-45eb-8095-7a64c50977e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8427b43c-9fa0-48e1-9ae2-212679358a3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ed40de3-ca3d-49b0-97f0-0930e1c9e44a",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 197,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "935a6946-4177-492b-bb39-5ff222c5d36a",
                  "parentUUID": "6ed40de3-ca3d-49b0-97f0-0930e1c9e44a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "754277cf-da1e-40af-81e9-d6bd1b953092",
                  "parentUUID": "6ed40de3-ca3d-49b0-97f0-0930e1c9e44a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "754277cf-da1e-40af-81e9-d6bd1b953092"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 239,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "f70293ea-6fc7-4c02-949b-3bbad040c056",
                  "parentUUID": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "59006711-0dcc-4305-b38d-8312e98e6bc0",
                  "parentUUID": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "e6803d46-6953-4cd0-8734-41ffecbbba6d",
                  "parentUUID": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "9dc25212-3fe0-49af-a07d-6819a607a7c3",
                  "parentUUID": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "a4ad7395-c854-42d4-a39a-0265ae235480",
                  "parentUUID": "17e8e29a-de02-4e0a-9a9b-eb3f09d44d06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59006711-0dcc-4305-b38d-8312e98e6bc0",
                "e6803d46-6953-4cd0-8734-41ffecbbba6d",
                "9dc25212-3fe0-49af-a07d-6819a607a7c3",
                "a4ad7395-c854-42d4-a39a-0265ae235480"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d89f0458-684f-4282-ac4c-100175273c46",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 292,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "2445ae71-5bd3-40f9-95bf-e8f0b677ce66",
                  "parentUUID": "d89f0458-684f-4282-ac4c-100175273c46",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "cac2c504-24ac-4b8e-9f40-2882e7cc37c3",
                  "parentUUID": "d89f0458-684f-4282-ac4c-100175273c46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cac2c504-24ac-4b8e-9f40-2882e7cc37c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ce78950-8681-4d0f-bbb7-7cd256c92154",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fefb0b9e-4ff4-46eb-8adc-463ef79afe2a",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 195,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "2be17576-6dd3-4624-9aad-3d2c01941118",
                  "parentUUID": "fefb0b9e-4ff4-46eb-8adc-463ef79afe2a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "6d719c0f-f344-4c3a-afb3-daa413ec7ab0",
                  "parentUUID": "fefb0b9e-4ff4-46eb-8adc-463ef79afe2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "aa9e585d-7e54-4a6a-8817-1b58f902c0d2",
                  "parentUUID": "fefb0b9e-4ff4-46eb-8adc-463ef79afe2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d719c0f-f344-4c3a-afb3-daa413ec7ab0",
                "aa9e585d-7e54-4a6a-8817-1b58f902c0d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3a3b70c-e16e-4e81-962e-d71c3870bbee",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 283,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "598dc7ca-5291-4583-9451-c8ff0cb0f431",
                  "parentUUID": "b3a3b70c-e16e-4e81-962e-d71c3870bbee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "a86ff031-2f21-4f33-baca-32ebd544297b",
                  "parentUUID": "b3a3b70c-e16e-4e81-962e-d71c3870bbee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "22194dde-2101-4093-84f5-1cc3f6141829",
                  "parentUUID": "b3a3b70c-e16e-4e81-962e-d71c3870bbee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a86ff031-2f21-4f33-baca-32ebd544297b",
                "22194dde-2101-4093-84f5-1cc3f6141829"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86487708-6f3c-4b72-a643-00446013def1",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 186,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "95f49479-9b80-47c3-8bd8-f6bcb0fbe2f0",
                  "parentUUID": "86487708-6f3c-4b72-a643-00446013def1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "14ac8a8e-5802-494a-8619-a794e228c150",
                  "parentUUID": "86487708-6f3c-4b72-a643-00446013def1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14ac8a8e-5802-494a-8619-a794e228c150"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40ab1e66-a8e4-445b-a19f-aea6770b5d32",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff476720-a75e-4935-85d9-bccdd1af9b85",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 276,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "91821efa-ef9b-4699-aced-36c415361169",
                  "parentUUID": "ff476720-a75e-4935-85d9-bccdd1af9b85",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "8d90dd00-3335-4bee-81bc-cdec75c11ba4",
                  "parentUUID": "ff476720-a75e-4935-85d9-bccdd1af9b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "a1bf916a-b676-47ee-a135-651cf6808490",
                  "parentUUID": "ff476720-a75e-4935-85d9-bccdd1af9b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d90dd00-3335-4bee-81bc-cdec75c11ba4",
                "a1bf916a-b676-47ee-a135-651cf6808490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "781a27ee-1f9f-4fbc-9f52-c83beec7979d",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 212,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "d0e67e2a-0197-4d3d-b890-0fd5b92fece3",
                  "parentUUID": "781a27ee-1f9f-4fbc-9f52-c83beec7979d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "af8950ae-7e67-41f6-aea1-568cd46fe181",
                  "parentUUID": "781a27ee-1f9f-4fbc-9f52-c83beec7979d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "1280a21f-4813-4ea2-8805-abd27bb884ad",
                  "parentUUID": "781a27ee-1f9f-4fbc-9f52-c83beec7979d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "622e9d3f-1a9a-4458-85b2-10287880c9ff",
                  "parentUUID": "781a27ee-1f9f-4fbc-9f52-c83beec7979d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af8950ae-7e67-41f6-aea1-568cd46fe181",
                "1280a21f-4813-4ea2-8805-abd27bb884ad",
                "622e9d3f-1a9a-4458-85b2-10287880c9ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d92ad44-c25c-4497-9e32-b922d26fa0b5",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 251,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "34495f32-7134-4564-b7d3-37a03c723c1b",
                  "parentUUID": "8d92ad44-c25c-4497-9e32-b922d26fa0b5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "186cdcc7-571e-4a5d-ae45-e7c9daed9fe4",
                  "parentUUID": "8d92ad44-c25c-4497-9e32-b922d26fa0b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "186cdcc7-571e-4a5d-ae45-e7c9daed9fe4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f502e6e2-2f94-4957-90b4-418ed08233f7",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 206,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "8d330168-b879-4071-bf09-14f01a7f8c3f",
                  "parentUUID": "f502e6e2-2f94-4957-90b4-418ed08233f7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "6ebb7457-6ba8-4d76-a093-f6ed95203167",
                  "parentUUID": "f502e6e2-2f94-4957-90b4-418ed08233f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "ba368862-354c-4585-abf9-dd4474fc4573",
                  "parentUUID": "f502e6e2-2f94-4957-90b4-418ed08233f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ebb7457-6ba8-4d76-a093-f6ed95203167",
                "ba368862-354c-4585-abf9-dd4474fc4573"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34adacdb-0aae-4445-a014-f01965d65cc2",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54b2f61e-ca3e-4e1d-bed5-6a651ee19d8d",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "47c8de8c-9e50-45fb-8a4d-e069f0da4d94",
                  "parentUUID": "54b2f61e-ca3e-4e1d-bed5-6a651ee19d8d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "e330aab1-6c71-4f38-a7e5-314754bc0a2f",
                  "parentUUID": "54b2f61e-ca3e-4e1d-bed5-6a651ee19d8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "c0dacfe3-5fc9-4fd5-a8e9-543e7cdba463",
                  "parentUUID": "54b2f61e-ca3e-4e1d-bed5-6a651ee19d8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e330aab1-6c71-4f38-a7e5-314754bc0a2f",
                "c0dacfe3-5fc9-4fd5-a8e9-543e7cdba463"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "5aa650dd-f904-43f4-8a4b-3dfcc2b4ae6c",
                  "parentUUID": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "a4bc6188-56c9-4fd7-833e-3720fc8621e0",
                  "parentUUID": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "a6b18dfa-a80f-403e-a6ad-f355edd1fba3",
                  "parentUUID": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "941c393f-07d2-44ed-9584-ffebdbcf9697",
                  "parentUUID": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "23a0cc9c-457e-4d72-aa41-cc968073b70d",
                  "parentUUID": "bc5dd9d4-f7f8-407b-904b-3478ad43a93c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4bc6188-56c9-4fd7-833e-3720fc8621e0",
                "a6b18dfa-a80f-403e-a6ad-f355edd1fba3",
                "941c393f-07d2-44ed-9584-ffebdbcf9697",
                "23a0cc9c-457e-4d72-aa41-cc968073b70d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "e0c168cb-3fcb-4c5b-9966-fb853e1d67ea",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0c8df192-97ea-4d28-ab8d-7a260b862bf3",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "4b5064b2-ac07-418d-910c-4f34f80c5570",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "6b415646-f835-4dcb-b7c1-7f7ad9ff48ca",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9e6da832-3c7b-43fc-ab07-57a43fedc09a",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "896b420f-bd98-4098-b7bb-4ccd4658a78d",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "12b791d7-5239-471e-869a-57e4ad0b1b8f",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "1eba04bc-1ceb-42b6-ab1b-83d213a5d79c",
                  "parentUUID": "cac71086-02aa-4e42-ba32-d8955f80ecbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c8df192-97ea-4d28-ab8d-7a260b862bf3",
                "4b5064b2-ac07-418d-910c-4f34f80c5570",
                "6b415646-f835-4dcb-b7c1-7f7ad9ff48ca",
                "9e6da832-3c7b-43fc-ab07-57a43fedc09a",
                "896b420f-bd98-4098-b7bb-4ccd4658a78d",
                "12b791d7-5239-471e-869a-57e4ad0b1b8f",
                "1eba04bc-1ceb-42b6-ab1b-83d213a5d79c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16d0422a-58ab-4794-94bc-e56f288d20e6",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "0e42b340-d066-4518-b310-1298cd34dbdc",
                  "parentUUID": "16d0422a-58ab-4794-94bc-e56f288d20e6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "8c823b7b-6c97-4547-9eed-b2cac744e533",
                  "parentUUID": "16d0422a-58ab-4794-94bc-e56f288d20e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "81458d44-d01d-48c3-a5e1-f48c2172e7f2",
                  "parentUUID": "16d0422a-58ab-4794-94bc-e56f288d20e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "e49ca96c-9dab-4ff8-bbc8-9ebc145275f3",
                  "parentUUID": "16d0422a-58ab-4794-94bc-e56f288d20e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c823b7b-6c97-4547-9eed-b2cac744e533",
                "81458d44-d01d-48c3-a5e1-f48c2172e7f2",
                "e49ca96c-9dab-4ff8-bbc8-9ebc145275f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "426da1a9-73c9-423d-8df5-2b7da245cf38",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "de91cf85-0ba1-49e5-a55b-2811ad63f033",
                  "parentUUID": "426da1a9-73c9-423d-8df5-2b7da245cf38",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "7ec75953-1668-465f-97fe-f4746b2698ac",
                  "parentUUID": "426da1a9-73c9-423d-8df5-2b7da245cf38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "6466a704-5a80-4dc9-bb90-78208edd5472",
                  "parentUUID": "426da1a9-73c9-423d-8df5-2b7da245cf38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec75953-1668-465f-97fe-f4746b2698ac",
                "6466a704-5a80-4dc9-bb90-78208edd5472"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23594115-341a-424a-a94f-ed86fa7e3659",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "d2b37c9f-420a-4b7f-ae2f-4f8b34605f87",
                  "parentUUID": "23594115-341a-424a-a94f-ed86fa7e3659",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "831b3fc4-345a-4b62-8fb7-c3c97f2f1fd6",
                  "parentUUID": "23594115-341a-424a-a94f-ed86fa7e3659",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "831b3fc4-345a-4b62-8fb7-c3c97f2f1fd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f91d3728-b2bc-4816-86a9-b1a5616dc0d6",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "cffa7cfa-4c3f-4dcb-a7a6-1b86af5a957b",
                  "parentUUID": "f91d3728-b2bc-4816-86a9-b1a5616dc0d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "41b95160-c8c9-4ec3-b65d-74aeef301b42",
                  "parentUUID": "f91d3728-b2bc-4816-86a9-b1a5616dc0d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41b95160-c8c9-4ec3-b65d-74aeef301b42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef9428e9-e9da-4552-8278-d9546da62e4a",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 143,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "9f1049f7-3766-42f8-8ee1-ca9aa055cd3a",
                  "parentUUID": "ef9428e9-e9da-4552-8278-d9546da62e4a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "8ec12ee9-3da8-4792-a992-15cae37785e6",
                  "parentUUID": "ef9428e9-e9da-4552-8278-d9546da62e4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "33c07fa6-26b6-4fb5-a96b-5bc549fa0a09",
                  "parentUUID": "ef9428e9-e9da-4552-8278-d9546da62e4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "52a59824-8de3-4655-a5ea-e92d912ad8ae",
                  "parentUUID": "ef9428e9-e9da-4552-8278-d9546da62e4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ec12ee9-3da8-4792-a992-15cae37785e6",
                "33c07fa6-26b6-4fb5-a96b-5bc549fa0a09",
                "52a59824-8de3-4655-a5ea-e92d912ad8ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b02f0dc7-7c9c-4de8-85f5-c9f50674899e",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "d7454d0a-b2d0-4346-8ef3-ac499f0a8742",
                  "parentUUID": "b02f0dc7-7c9c-4de8-85f5-c9f50674899e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "7f89be2e-9c09-4bcc-8b90-41db941225ed",
                  "parentUUID": "b02f0dc7-7c9c-4de8-85f5-c9f50674899e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "a08eca94-d5bf-4060-a0f8-f9e9197bcea1",
                  "parentUUID": "b02f0dc7-7c9c-4de8-85f5-c9f50674899e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f89be2e-9c09-4bcc-8b90-41db941225ed",
                "a08eca94-d5bf-4060-a0f8-f9e9197bcea1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8589339-f00e-4dc5-9f22-d1b23e1f4d19",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c71c387a-8778-446e-99b5-36f2dff50cce",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "af97ade4-c4a4-4c7d-8826-03fc0af8b06f",
                  "parentUUID": "c71c387a-8778-446e-99b5-36f2dff50cce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "63eb0350-282a-4d53-8eb6-49c7251a2d9b",
                  "parentUUID": "c71c387a-8778-446e-99b5-36f2dff50cce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "42bd54be-0d3b-4ba8-9df9-974d7d585a7f",
                  "parentUUID": "c71c387a-8778-446e-99b5-36f2dff50cce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63eb0350-282a-4d53-8eb6-49c7251a2d9b",
                "42bd54be-0d3b-4ba8-9df9-974d7d585a7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eac600ca-80f9-4c02-a5ff-2693d4a08cac",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "879dc33e-f837-4506-9044-2efb58cf00d3",
                  "parentUUID": "eac600ca-80f9-4c02-a5ff-2693d4a08cac",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d05b6d54-ddea-4b6b-935e-426a501bb87a",
                  "parentUUID": "eac600ca-80f9-4c02-a5ff-2693d4a08cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "2c2205ae-1d2d-4ff7-a8a9-6d05d2e7f664",
                  "parentUUID": "eac600ca-80f9-4c02-a5ff-2693d4a08cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "a1c1d22a-a8dd-40f1-b32e-e23b4aa0cd20",
                  "parentUUID": "eac600ca-80f9-4c02-a5ff-2693d4a08cac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d05b6d54-ddea-4b6b-935e-426a501bb87a",
                "2c2205ae-1d2d-4ff7-a8a9-6d05d2e7f664",
                "a1c1d22a-a8dd-40f1-b32e-e23b4aa0cd20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d124ba36-c4c7-4349-808d-44f92d5f2462",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "476e1136-821c-48b7-b2d1-e7dccb1a6f7a",
                  "parentUUID": "d124ba36-c4c7-4349-808d-44f92d5f2462",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "91e3c0c0-2d12-43c8-89cb-0f2a5e37606a",
                  "parentUUID": "d124ba36-c4c7-4349-808d-44f92d5f2462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8fed548e-47cf-498c-8f93-65be4cfa95dc",
                  "parentUUID": "d124ba36-c4c7-4349-808d-44f92d5f2462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "b0c44482-2177-47c1-811d-f6e55b542b0b",
                  "parentUUID": "d124ba36-c4c7-4349-808d-44f92d5f2462",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91e3c0c0-2d12-43c8-89cb-0f2a5e37606a",
                "8fed548e-47cf-498c-8f93-65be4cfa95dc",
                "b0c44482-2177-47c1-811d-f6e55b542b0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b48c2fe8-4612-45a4-b26b-65394c662932",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "56f9ebc8-bbc3-4e47-882b-b0524d967c3c",
                  "parentUUID": "b48c2fe8-4612-45a4-b26b-65394c662932",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "0a0b759b-50f1-40b4-a0ff-4a9c87e5191a",
                  "parentUUID": "b48c2fe8-4612-45a4-b26b-65394c662932",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a0b759b-50f1-40b4-a0ff-4a9c87e5191a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9acceb93-5d4a-4c47-ac87-f9dc2ce4ce02",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "6975d4f6-dbef-4942-8586-883ee99c4fa7",
                  "parentUUID": "9acceb93-5d4a-4c47-ac87-f9dc2ce4ce02",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "5fcbee26-4a63-4550-90ba-303eb37e1bad",
                  "parentUUID": "9acceb93-5d4a-4c47-ac87-f9dc2ce4ce02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fcbee26-4a63-4550-90ba-303eb37e1bad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "df502b2c-b1ef-4a6d-925a-237b83e2f59d",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "06ba101d-fc67-4e77-9434-cec1ea032ebe",
              "parentUUID": "df502b2c-b1ef-4a6d-925a-237b83e2f59d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "ad3af939-60c7-4f22-a616-6dfcbd5c288a",
              "parentUUID": "df502b2c-b1ef-4a6d-925a-237b83e2f59d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06ba101d-fc67-4e77-9434-cec1ea032ebe",
            "ad3af939-60c7-4f22-a616-6dfcbd5c288a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2955702f-5f8f-4542-8886-05ea18557008",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "a24857d7-88e5-4831-83da-35da9004f5da",
              "parentUUID": "2955702f-5f8f-4542-8886-05ea18557008",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a24857d7-88e5-4831-83da-35da9004f5da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "4f2a18e9-23f0-407a-9d27-0757c3cf7548",
              "parentUUID": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "a7a6c9e3-c48d-439d-95e7-16a5392ae059",
              "parentUUID": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "2210c3fc-3318-445e-85b1-2b8951993c20",
              "parentUUID": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "af67dc6c-7e72-4abc-b082-f0c074deba89",
              "parentUUID": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "f2eadae4-92ea-41bc-9c02-f6b8d9b96ad9",
              "parentUUID": "103bb7a6-7499-4b09-a895-d9b4d92fc9bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f2a18e9-23f0-407a-9d27-0757c3cf7548",
            "a7a6c9e3-c48d-439d-95e7-16a5392ae059",
            "2210c3fc-3318-445e-85b1-2b8951993c20",
            "af67dc6c-7e72-4abc-b082-f0c074deba89",
            "f2eadae4-92ea-41bc-9c02-f6b8d9b96ad9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f941c675-2146-4a6a-b3d8-470674dd809c",
          "title": "Check dependency graph",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency graph Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_graph(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_graph.svg');\nfs.writeFileSync(output_path, result.result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_graph.svg');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(result.result, expected);",
              "err": {},
              "uuid": "c8d2ffc5-939d-4a9a-9db9-32c59a274d74",
              "parentUUID": "f941c675-2146-4a6a-b3d8-470674dd809c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "c8d2ffc5-939d-4a9a-9db9-32c59a274d74"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93107f5a-0ca5-4b4f-9055-6fab810eafda",
          "title": "Check compile order",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check compile order Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_compile_order(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'compile_order.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'compile_order.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "92d6539a-55fa-4041-8f05-293ec5a8f79a",
              "parentUUID": "93107f5a-0ca5-4b4f-9055-6fab810eafda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "92d6539a-55fa-4041-8f05-293ec5a8f79a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd0c1da1-66ea-4fe8-9424-b9be0bac44c3",
          "title": "Check dependency tree",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency tree Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_tree(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_tree.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_tree.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "ecd074a7-986f-4736-adb8-72b8d210b23a",
              "parentUUID": "fd0c1da1-66ea-4fe8-9424-b9be0bac44c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ecd074a7-986f-4736-adb8-72b8d210b23a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7fefeea6-0911-40ba-be52-e8be1244a56d",
          "title": "Check multi project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/multi_project_manager.spec.ts",
          "file": "/tests/project_manager/project/multi_project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check multi project manager Get name after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = multi_prj.get_name();\nchai_1.assert.equal(prj_name, MULTI_PRJ_NAME, \"Error in project name.\");",
              "err": {},
              "uuid": "87ff76f1-fac2-4e99-a49d-7dc8579f9480",
              "parentUUID": "7fefeea6-0911-40ba-be52-e8be1244a56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 3 projects",
              "fullTitle": "Check multi project manager Add 3 projects",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create projects\nmulti_prj.create_project(prj_0.name);\nmulti_prj.create_project(prj_1.name);\nmulti_prj.create_project(prj_2.name);\n// Add files\nadd_files(multi_prj, prj_0);\nadd_files(multi_prj, prj_1);\nadd_files(multi_prj, prj_2);\n// Check\ncheck_project(multi_prj, prj_0);\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "140bf634-972f-4526-ba9c-5e5894932d86",
              "parentUUID": "7fefeea6-0911-40ba-be52-e8be1244a56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check multi project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const new_name = 'new-name';\n// Rename project\nmulti_prj.rename_project(prj_0.name, new_name);\n// Check\nprj_0.name = new_name;\ncheck_project(multi_prj, prj_0);",
              "err": {},
              "uuid": "9b6e5eaf-fd49-4755-aaa3-cd1f4e7a605d",
              "parentUUID": "7fefeea6-0911-40ba-be52-e8be1244a56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete one",
              "fullTitle": "Check multi project manager Delete one",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete project\nmulti_prj.delete_project(prj_0.name);\n// Check number of projects\nchai_1.assert.equal(multi_prj.get_projects().length, 2);\n// Check projects\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "72209ee6-bd62-40d0-94ad-81dc5cde5b77",
              "parentUUID": "7fefeea6-0911-40ba-be52-e8be1244a56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Select project",
              "fullTitle": "Check multi project manager Select project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select project\nlet result = multi_prj.select_project_current(prj_1.name);\nchai_1.assert.equal(result.successful, true);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);\n// Select project doesn't exist\nresult = multi_prj.select_project_current(prj_0.name);\nchai_1.assert.equal(result.successful, false);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);",
              "err": {},
              "uuid": "0b98b86d-84b9-45a7-a1e7-e495d0bac53d",
              "parentUUID": "7fefeea6-0911-40ba-be52-e8be1244a56d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87ff76f1-fac2-4e99-a49d-7dc8579f9480",
            "140bf634-972f-4526-ba9c-5e5894932d86",
            "9b6e5eaf-fd49-4755-aaa3-cd1f4e7a605d",
            "72209ee6-bd62-40d0-94ad-81dc5cde5b77",
            "0b98b86d-84b9-45a7-a1e7-e495d0bac53d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
          "title": "Check project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/project_manager.spec.ts",
          "file": "/tests/project_manager/project/project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_0, \"Error in project name.\");",
              "err": {},
              "uuid": "b945da85-501d-4f4e-a5b6-eaf718019745",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Rename project\nconst PRJ_NAME_1 = \"my-prj-1\";\nprj.rename(PRJ_NAME_1);\n// Check project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_1, \"Error in project name.\");",
              "err": {},
              "uuid": "e0c17c15-17e1-493a-8b86-c81e694d40f2",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 2 individual files",
              "fullTitle": "Check project manager Add 2 individual files",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Add file 0\nprj.add_file(file_0);\n// Add file 1\nprj.add_file(file_1);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 2, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_0.name, \"Error name file 0.\");\nchai_1.assert.equal(file_list[1].name, file_1.name, \"Error name file 1.\");",
              "err": {},
              "uuid": "465238da-7a91-4fe0-b5e6-2efed1d703fd",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete file",
              "fullTitle": "Check project manager Delete file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete file 0\nprj.delete_file(file_0.name, file_0.logical_name);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 1, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_1.name, \"Error name file 0.\");",
              "err": {},
              "uuid": "557e8f7c-236a-4b48-9357-83d1361bef73",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "File in project",
              "fullTitle": "Check project manager File in project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// File 1 in project\nconst check_0 = prj.check_if_file_in_project(file_1.name, file_1.logical_name);\nchai_1.assert.equal(check_0, true, \"Error file 1 in project.\");\n// File random 0 not in project\nconst check_1 = prj.check_if_file_in_project('asd', file_1.logical_name);\nchai_1.assert.equal(check_1, false, \"Error file random name in project.\");\n// File random 1 not in project\nconst check_2 = prj.check_if_file_in_project(file_1.name, 'efg');\nchai_1.assert.equal(check_2, false, \"Error file random logical name in project.\");",
              "err": {},
              "uuid": "87697759-e2cf-4ed5-a25e-504ca5e2358f",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set and get config",
              "fullTitle": "Check project manager Set and get config",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myconfig = cfg.get_default_config();\nmyconfig.editor.general.continue_comment = true;\nmyconfig.documentation.general.symbol_vhdl = 'asdf';\n// Set config\nprj.set_config(myconfig);\n// Get config\nconst prj_config = prj.get_config();\n//Check config\nchai_1.assert.equal(prj_config, myconfig, \"Error in config.\");",
              "err": {},
              "uuid": "426d6685-fe8e-4bda-a070-1cb6bbbaad8f",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add files from CSV",
              "fullTitle": "Check project manager Add files from CSV",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CSV_PATH = paht_lib.join(__dirname, 'helpers', 'files.csv');\n// Add files\nprj.add_file_from_csv(CSV_PATH, true);\n// Get files\nconst file_list = prj.get_project_definition().file_manager.get();\n// Check file 2\nchai_1.assert.equal(file_list[1].name, file_2.name, \"Error name file 2.\");\nchai_1.assert.equal(file_list[1].logical_name, file_2.logical_name, \"Error logical name file 2.\");\n// Check file 3\nchai_1.assert.equal(file_list[2].name, file_3.name, \"Error name file 3.\");\nchai_1.assert.equal(file_list[2].logical_name, file_3.logical_name, \"Error logical name file 3.\");",
              "err": {},
              "uuid": "0ed98805-e0c0-40e3-83e6-5b5574c1a38c",
              "parentUUID": "3665abf1-da6a-4845-9028-aeb3dccf91b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b945da85-501d-4f4e-a5b6-eaf718019745",
            "e0c17c15-17e1-493a-8b86-c81e694d40f2",
            "465238da-7a91-4fe0-b5e6-2efed1d703fd",
            "557e8f7c-236a-4b48-9357-83d1361bef73",
            "87697759-e2cf-4ed5-a25e-504ca5e2358f",
            "426d6685-fe8e-4bda-a070-1cb6bbbaad8f",
            "0ed98805-e0c0-40e3-83e6-5b5574c1a38c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be270b9b-611f-4615-a804-e932175aaee7",
          "title": "Check Edalize",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check GHDL",
              "fullTitle": "Check Edalize Check GHDL",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'ghdl');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder_tb.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"ghdl-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].filename, file_0.name);\n(0, assert_1.equal)(test_list[0].name, 'half_adder_process_tb');\n// Run\nprj.set_config(config);\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "5e6fcced-f6ba-4d3e-bd6e-35cda7b06621",
              "parentUUID": "be270b9b-611f-4615-a804-e932175aaee7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "5e6fcced-f6ba-4d3e-bd6e-35cda7b06621"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "06bc85c1-d5ff-49e2-b291-b39c789f0efa",
          "title": "Check VUnit",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check one tests in runpy",
              "fullTitle": "Check VUnit Check one tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_0.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "b78c81bc-930a-462c-b8c5-98c35bec7f66",
              "parentUUID": "06bc85c1-d5ff-49e2-b291-b39c789f0efa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check multiple tests in runpy",
              "fullTitle": "Check VUnit Check multiple tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_1.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "fd12b9ce-b271-4b0c-a6e3-f269cb8167c6",
              "parentUUID": "06bc85c1-d5ff-49e2-b291-b39c789f0efa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check runpy creation",
              "fullTitle": "Check VUnit Check runpy creation",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.creation;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_counting_errors.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_with_test_cases.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_2 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'test_control.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\nprj.add_file(file_2);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 3);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[2].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n    (0, assert_1.equal)(result[2].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "7bf6968f-7a45-4b36-b281-1f68c9229956",
              "parentUUID": "06bc85c1-d5ff-49e2-b291-b39c789f0efa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b78c81bc-930a-462c-b8c5-98c35bec7f66",
            "fd12b9ce-b271-4b0c-a6e3-f269cb8167c6",
            "7bf6968f-7a45-4b36-b281-1f68c9229956"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76b90903-9df4-4d9d-a0c6-73eb60a5bacf",
          "title": "Check cocotb",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check multiple tests",
              "fullTitle": "Check cocotb Check multiple tests",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "5ee1e0f6-cadb-45ea-b0ae-368b2c83e20e",
              "parentUUID": "76b90903-9df4-4d9d-a0c6-73eb60a5bacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one test",
              "fullTitle": "Check cocotb Check one test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\nconst selected_test = [test_list[0]];\n// Run\nprj.run(undefined, selected_test, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "583f4667-a8ad-4e97-a853-fefeb5659c15",
              "parentUUID": "76b90903-9df4-4d9d-a0c6-73eb60a5bacf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "5ee1e0f6-cadb-45ea-b0ae-368b2c83e20e",
            "583f4667-a8ad-4e97-a853-fefeb5659c15"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "00034743-db0c-4a66-a063-4c9f55d69922",
          "title": "Check OSVVM",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Run test",
              "fullTitle": "Check OSVVM Run test",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.osvvm;\nconfig.tools.osvvm.installation_path = \"/home/carlos/repo/osvvm/OsvvmLibraries/\";\nconfig.tools.osvvm.simulator_name = cfg.e_tools_osvvm_simulator_name.ghdl;\nconfig.tools.osvvm.tclsh_binary = \"tclsh8.6\";\n// Files\nconst file_0 = {\n    name: \"/home/carlos/repo/osvvm/OsvvmLibraries/UART/RunDemoTests.pro\",\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\n// Create project\nconst prj = new project_manager_1.Project_manager(\"osvvm-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get testlist\nconst test_list = await prj.get_test_list();\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "b73d3eb7-1e10-4b07-a5ea-8da4b6f40059",
              "parentUUID": "00034743-db0c-4a66-a063-4c9f55d69922",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b73d3eb7-1e10-4b07-a5ea-8da4b6f40059"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "da1375c6-675e-4dae-8a82-941f95f676bd",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "28d5ebfb-ec85-4bbc-a574-e996c7a43b06",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c2aa1094-d768-4e04-9374-dfbfb7d69e2f",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "22b26d0c-23d4-46a6-ab46-64ebf76e7b87",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c2941405-2bc9-4e2a-a588-1cdc2de6fa09",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "988b0a88-7ffd-4c75-b4e5-d8ba8ead5700",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "b865c48e-1db5-4b88-aa09-a865f403effe",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "41a3526a-d424-45c0-a42e-e8afeb94a5cc",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "99d42e1a-7d2b-449b-9fb0-c173ae132b6f",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "def8ba48-b4c5-44bc-b30b-5a62505a9d89",
              "parentUUID": "da1375c6-675e-4dae-8a82-941f95f676bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28d5ebfb-ec85-4bbc-a574-e996c7a43b06",
            "c2aa1094-d768-4e04-9374-dfbfb7d69e2f",
            "22b26d0c-23d4-46a6-ab46-64ebf76e7b87",
            "c2941405-2bc9-4e2a-a588-1cdc2de6fa09",
            "988b0a88-7ffd-4c75-b4e5-d8ba8ead5700",
            "b865c48e-1db5-4b88-aa09-a865f403effe",
            "41a3526a-d424-45c0-a42e-e8afeb94a5cc",
            "99d42e1a-7d2b-449b-9fb0-c173ae132b6f",
            "def8ba48-b4c5-44bc-b30b-5a62505a9d89"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 321,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f62867a-d2b5-405b-91f9-e108d59ae055",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "29e37423-b6a3-4672-a158-aaad3f28705b",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "2ffc78de-0fae-451a-af80-13233992f7bc",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "1a410d81-48f8-4c11-8f0d-55076b2c837a",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f2059e00-2c96-4af9-8cd2-2c7163fe6ee1",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "9b6c8e60-fefa-482c-b1b3-5da976e06ae8",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "66b984f3-e1c0-4acf-b9fb-b904155fd3be",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "de3c9686-6bb3-42d9-85dd-01e5fb24732b",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "eadf970d-7019-405b-8aaf-0f3f3b42f233",
              "parentUUID": "1f62867a-d2b5-405b-91f9-e108d59ae055",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29e37423-b6a3-4672-a158-aaad3f28705b",
            "2ffc78de-0fae-451a-af80-13233992f7bc",
            "1a410d81-48f8-4c11-8f0d-55076b2c837a",
            "f2059e00-2c96-4af9-8cd2-2c7163fe6ee1",
            "9b6c8e60-fefa-482c-b1b3-5da976e06ae8",
            "66b984f3-e1c0-4acf-b9fb-b904155fd3be",
            "de3c9686-6bb3-42d9-85dd-01e5fb24732b",
            "eadf970d-7019-405b-8aaf-0f3f3b42f233"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1874,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f023262a-9617-4e1a-84e1-70b13e8fd3a2",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "2d1210f3-6458-42cb-bff6-104eb8592f9e",
              "parentUUID": "f023262a-9617-4e1a-84e1-70b13e8fd3a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "d0f45e60-587f-42cd-a0d1-d8efa410995f",
              "parentUUID": "f023262a-9617-4e1a-84e1-70b13e8fd3a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "9bdd5064-8615-4be9-8931-601608d5e093",
              "parentUUID": "f023262a-9617-4e1a-84e1-70b13e8fd3a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "90f767a5-d50c-4177-9189-09feb8ff1443",
              "parentUUID": "f023262a-9617-4e1a-84e1-70b13e8fd3a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d1210f3-6458-42cb-bff6-104eb8592f9e",
            "d0f45e60-587f-42cd-a0d1-d8efa410995f",
            "9bdd5064-8615-4be9-8931-601608d5e093",
            "90f767a5-d50c-4177-9189-09feb8ff1443"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bbd906b1-a77c-49db-bbea-d8b3d2e849e0",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "a6352d39-0843-4bb9-99c8-e2d043eebf7b",
              "parentUUID": "bbd906b1-a77c-49db-bbea-d8b3d2e849e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "664a6847-facf-466f-a2c6-9ea846647d4f",
              "parentUUID": "bbd906b1-a77c-49db-bbea-d8b3d2e849e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6352d39-0843-4bb9-99c8-e2d043eebf7b",
            "664a6847-facf-466f-a2c6-9ea846647d4f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3a5b5226-4bd8-4b0c-8dde-3011618a9508",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "32fd7cce-d2ac-4aa8-a8a1-28419f8855f0",
              "parentUUID": "3a5b5226-4bd8-4b0c-8dde-3011618a9508",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32fd7cce-d2ac-4aa8-a8a1-28419f8855f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "bae7e120-0587-494e-a565-91a6e08c8a67",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "496cc2c9-5472-4eb9-8333-9178f8821844",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "478825f4-8809-4535-a3c2-3f027cae3f49",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5e571d68-38b2-4c78-85f7-076b99aac24f",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "012413e9-5a47-4a67-a858-db652f559ab5",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "80a574f7-0a3d-48ef-802c-0c49d33406aa",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6936af53-a9da-43e2-8c97-0002c1383e6a",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7e2b7d0e-743f-41e6-aeb7-b66780232672",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "815355a2-1027-46ef-892c-3161bb50f478",
              "parentUUID": "a43e1454-18f6-43a6-b6ea-943fbed17ab1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bae7e120-0587-494e-a565-91a6e08c8a67",
            "496cc2c9-5472-4eb9-8333-9178f8821844",
            "478825f4-8809-4535-a3c2-3f027cae3f49",
            "5e571d68-38b2-4c78-85f7-076b99aac24f",
            "012413e9-5a47-4a67-a858-db652f559ab5",
            "80a574f7-0a3d-48ef-802c-0c49d33406aa",
            "6936af53-a9da-43e2-8c97-0002c1383e6a",
            "7e2b7d0e-743f-41e6-aeb7-b66780232672",
            "815355a2-1027-46ef-892c-3161bb50f478"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "91e7e703-5121-419c-9078-5da7c3287a37",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5d9a3620-4f45-404c-b025-a98e332d383b",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "28833915-a777-41b2-93eb-d5460e599cc7",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "c4dd7182-cb79-40ac-b2c0-c52cecf8f276",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "0128790f-86b6-4ba4-ab95-74456ae3d9a2",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "781d2fda-2aac-4414-8f98-552b1b5a213c",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d55c1b16-117e-4d04-8b0c-9b3d7df79975",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "61b7a3b0-4da8-4a8d-8574-e5f93ad94884",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "69ca1cf0-507a-4bef-9128-b33065344b76",
              "parentUUID": "39a57dbe-d90c-482a-bb1a-c1a63c9707d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91e7e703-5121-419c-9078-5da7c3287a37",
            "5d9a3620-4f45-404c-b025-a98e332d383b",
            "28833915-a777-41b2-93eb-d5460e599cc7",
            "c4dd7182-cb79-40ac-b2c0-c52cecf8f276",
            "0128790f-86b6-4ba4-ab95-74456ae3d9a2",
            "781d2fda-2aac-4414-8f98-552b1b5a213c",
            "d55c1b16-117e-4d04-8b0c-9b3d7df79975",
            "61b7a3b0-4da8-4a8d-8574-e5f93ad94884",
            "69ca1cf0-507a-4bef-9128-b33065344b76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "0ba88cd4-4cde-464c-9647-d0d606a602bf",
        "ea21921c-d5b0-4a00-8b77-8428e22e0ce6"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}