{
  "stats": {
    "suites": 67,
    "tests": 217,
    "passes": 202,
    "pending": 15,
    "failures": 0,
    "start": "2023-01-11T13:28:06.984Z",
    "end": "2023-01-11T13:28:23.137Z",
    "duration": 16153,
    "testsRegistered": 219,
    "passPercent": 99.01960784313727,
    "pendingPercent": 6.8493150684931505,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "71f3ff74-010d-4b0f-aac5-a89cc3632571",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "876dd41b-0b67-4901-b2b5-db1c1f2a817c",
          "parentUUID": "71f3ff74-010d-4b0f-aac5-a89cc3632571",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "097686a9-00d9-4599-a14f-51b5b3a281cf",
          "parentUUID": "71f3ff74-010d-4b0f-aac5-a89cc3632571",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "04bf0379-b815-4ea2-9063-f41b001f561b",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7e4fe601-937f-48f3-b6d9-e4e53ccfb972",
              "parentUUID": "04bf0379-b815-4ea2-9063-f41b001f561b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "7e4fe601-937f-48f3-b6d9-e4e53ccfb972"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "726a8590-97af-4dd2-845a-152e7fead9c8",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri/colibri/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 1698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "5ecde050-c484-4988-a432-08e9259a791e",
              "parentUUID": "726a8590-97af-4dd2-845a-152e7fead9c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ecde050-c484-4988-a432-08e9259a791e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69ded428-765c-485c-a70b-f359844a9e46",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "3085aa93-167a-41ff-893d-19c5a7efba4e",
              "parentUUID": "69ded428-765c-485c-a70b-f359844a9e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "09392ada-e154-4288-af47-0094dc668cae",
              "parentUUID": "69ded428-765c-485c-a70b-f359844a9e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "12560087-de16-471e-af63-c4e94d89e2bc",
              "parentUUID": "69ded428-765c-485c-a70b-f359844a9e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "212169d6-30cd-4a90-b86d-a9ba5f1722d2",
              "parentUUID": "69ded428-765c-485c-a70b-f359844a9e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "284ba04e-8439-4190-87f0-0306eb193c48",
              "parentUUID": "69ded428-765c-485c-a70b-f359844a9e46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3085aa93-167a-41ff-893d-19c5a7efba4e",
            "09392ada-e154-4288-af47-0094dc668cae",
            "12560087-de16-471e-af63-c4e94d89e2bc",
            "212169d6-30cd-4a90-b86d-a9ba5f1722d2",
            "284ba04e-8439-4190-87f0-0306eb193c48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 357,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a04c522-9c79-47bc-910d-31825484b72f",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "108a33ce-d885-4de8-b03b-57cec671e53b",
              "parentUUID": "1a04c522-9c79-47bc-910d-31825484b72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "7fc5f954-66b2-4b45-b5d0-93db1d06f1be",
              "parentUUID": "1a04c522-9c79-47bc-910d-31825484b72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "849273b2-f782-4ad1-8508-54fd8d681eff",
              "parentUUID": "1a04c522-9c79-47bc-910d-31825484b72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "6013e814-62a5-4156-8a5f-c2dce1032fbe",
              "parentUUID": "1a04c522-9c79-47bc-910d-31825484b72f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "a0babc6c-e6c6-4911-9d11-cbb566086adf",
              "parentUUID": "1a04c522-9c79-47bc-910d-31825484b72f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "108a33ce-d885-4de8-b03b-57cec671e53b",
            "7fc5f954-66b2-4b45-b5d0-93db1d06f1be",
            "849273b2-f782-4ad1-8508-54fd8d681eff",
            "6013e814-62a5-4156-8a5f-c2dce1032fbe",
            "a0babc6c-e6c6-4911-9d11-cbb566086adf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2748,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "41a69363-88f4-4e95-a342-b5de479b1941",
              "parentUUID": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "959fc157-17c5-4685-972f-e098cdc73d48",
              "parentUUID": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "b55d8127-8cdd-42ad-84d8-316b14d3140c",
              "parentUUID": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 323,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "eefb9c88-8cd7-4940-9a48-905d02706562",
              "parentUUID": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "23a530f3-933f-448e-9066-d103cb0192d5",
              "parentUUID": "3847f3f9-a01e-4f08-882b-3d68b5df0d21",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41a69363-88f4-4e95-a342-b5de479b1941",
            "959fc157-17c5-4685-972f-e098cdc73d48",
            "b55d8127-8cdd-42ad-84d8-316b14d3140c",
            "eefb9c88-8cd7-4940-9a48-905d02706562",
            "23a530f3-933f-448e-9066-d103cb0192d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1785,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "df7852e4-6064-490e-9c80-1ec2d7a6b36c",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "2b002635-b81d-4f05-b0c3-7dc52ce06210",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "18bfe1fa-003d-45a4-b80f-2ba7574a0825",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "087fe2b8-7aa9-4877-8913-d6256a5caccd",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "95455504-e7ed-4494-a984-4e49cf8608bf",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "29e639fe-b9f0-4dc2-8ade-e674e6070bc6",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "5d848dac-a152-4453-b773-41b52d3867ba",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "7e9a4aa8-167a-46b1-9b8e-3f3984101e3d",
              "parentUUID": "faaf4219-c6ba-4f9f-97ca-6c1c160ac60c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df7852e4-6064-490e-9c80-1ec2d7a6b36c",
            "2b002635-b81d-4f05-b0c3-7dc52ce06210",
            "18bfe1fa-003d-45a4-b80f-2ba7574a0825",
            "087fe2b8-7aa9-4877-8913-d6256a5caccd",
            "95455504-e7ed-4494-a984-4e49cf8608bf",
            "29e639fe-b9f0-4dc2-8ade-e674e6070bc6",
            "5d848dac-a152-4453-b773-41b52d3867ba",
            "7e9a4aa8-167a-46b1-9b8e-3f3984101e3d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3098d071-3adc-443d-b806-52ff3c3c22b8",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b1a00b6a-8525-42a7-942c-259ea3a26165",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a13c3532-5c1d-4c8a-9ad1-08136002d0c4",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a43d6f62-8522-4fd3-9de0-5adf1cd3dcf6",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "f525983c-a0bd-486b-9124-67c11eb570df",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "bdec28ad-8937-41f7-b78d-d540947735ad",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "9fd82c15-ebd6-4ddb-b35e-fb77181c0dac",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e33f5052-ab38-4287-9c23-144fd9fdd9bc",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "93377f99-90fd-4525-8c42-cf7972dcecff",
              "parentUUID": "3098d071-3adc-443d-b806-52ff3c3c22b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1a00b6a-8525-42a7-942c-259ea3a26165",
            "a13c3532-5c1d-4c8a-9ad1-08136002d0c4",
            "a43d6f62-8522-4fd3-9de0-5adf1cd3dcf6",
            "f525983c-a0bd-486b-9124-67c11eb570df",
            "bdec28ad-8937-41f7-b78d-d540947735ad",
            "9fd82c15-ebd6-4ddb-b35e-fb77181c0dac",
            "e33f5052-ab38-4287-9c23-144fd9fdd9bc",
            "93377f99-90fd-4525-8c42-cf7972dcecff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f72e3512-4e08-4968-843f-86995c1a1ecc",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "af9425e4-431f-4563-8b08-1249cd6d3b55",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "edcf1eca-8081-46a8-ac2b-96127b6f3f38",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "309a0b88-1c26-45dd-8749-a951eb58be70",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "9de8720a-815e-441b-99ac-b1ae4cfcc481",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "92f03f20-4d00-490c-b73b-a6dd58dd66fe",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "21a4a5f7-e8e5-493b-b3c9-6c59d23dbab3",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "d9d9fa47-453d-45a2-b167-3df01731b2c5",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f073b5ba-2e06-4c97-aa8b-441df234e55e",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "f0af85ca-41fc-409f-aa2e-439fac533c43",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "bce37c0e-366c-4b49-ac58-5b5e0d8b36c4",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "08fd2fa2-4733-47f9-b4c2-c5c3f4054c66",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "8791f15a-ae47-42a3-aecf-8ec753fcd5d2",
              "parentUUID": "f72e3512-4e08-4968-843f-86995c1a1ecc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af9425e4-431f-4563-8b08-1249cd6d3b55",
            "edcf1eca-8081-46a8-ac2b-96127b6f3f38",
            "309a0b88-1c26-45dd-8749-a951eb58be70",
            "92f03f20-4d00-490c-b73b-a6dd58dd66fe",
            "21a4a5f7-e8e5-493b-b3c9-6c59d23dbab3",
            "d9d9fa47-453d-45a2-b167-3df01731b2c5",
            "f073b5ba-2e06-4c97-aa8b-441df234e55e",
            "f0af85ca-41fc-409f-aa2e-439fac533c43",
            "bce37c0e-366c-4b49-ac58-5b5e0d8b36c4",
            "08fd2fa2-4733-47f9-b4c2-c5c3f4054c66",
            "8791f15a-ae47-42a3-aecf-8ec753fcd5d2"
          ],
          "failures": [],
          "pending": [
            "9de8720a-815e-441b-99ac-b1ae4cfcc481"
          ],
          "skipped": [],
          "duration": 136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri/colibri/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ce959eb1-b2bb-450c-899a-a4e1000f3e63",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "b0186a50-a19d-48ba-bcc6-035be91ada29",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "ffec35a3-689d-41d4-8135-bd8ceb0e8107",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, true);",
              "err": {},
              "uuid": "1e9798ff-3e9b-4352-8d84-291db5356ce3",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "a087614b-8aa3-47b3-83a6-90eb09ab0a52",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, input_path, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3d3d4caa-eccb-4546-8cfd-94ec358128fe",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (output_type_inst === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "0248b497-27a5-443c-ae79-948abb139a7b",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "825861c9-f38c-42ed-9d1e-35f7ca549ab3",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "bf4d5011-c7b1-46c3-b0dc-c883e043cd91",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "1aa78fe5-08ea-43f0-82b8-7364807d2812",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "bd5ac694-adb4-4e25-ac9b-14c26eab7dd7",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration, output_type_inst);\nsave_output(section, section_name, output_type_inst);\ncheck(section_name, output_type_inst, false);",
              "err": {},
              "uuid": "3bfd30ed-58e2-4075-8cca-deae2ce8c8bf",
              "parentUUID": "61766eeb-9ab3-4a40-8819-fdf820a9e08e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce959eb1-b2bb-450c-899a-a4e1000f3e63",
            "b0186a50-a19d-48ba-bcc6-035be91ada29",
            "ffec35a3-689d-41d4-8135-bd8ceb0e8107",
            "a087614b-8aa3-47b3-83a6-90eb09ab0a52",
            "3d3d4caa-eccb-4546-8cfd-94ec358128fe",
            "825861c9-f38c-42ed-9d1e-35f7ca549ab3",
            "bf4d5011-c7b1-46c3-b0dc-c883e043cd91",
            "1aa78fe5-08ea-43f0-82b8-7364807d2812",
            "bd5ac694-adb4-4e25-ac9b-14c26eab7dd7",
            "3bfd30ed-58e2-4075-8cca-deae2ce8c8bf"
          ],
          "failures": [],
          "pending": [
            "1e9798ff-3e9b-4352-8d84-291db5356ce3",
            "0248b497-27a5-443c-ae79-948abb139a7b"
          ],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4329d98d-d710-4941-b53d-d72f00ff46a8",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.lowercase,\n    name_case: cfg.e_formatter_standalone_name_case.lowercase,\n    indentation: \"    \",\n    align_port_generic: true,\n    align_comment: true,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "b5b320a8-7044-4f69-b750-b334c17e92ff",
              "parentUUID": "4329d98d-d710-4941-b53d-d72f00ff46a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    keyword_case: cfg.e_formatter_standalone_keyword_case.uppercase,\n    name_case: cfg.e_formatter_standalone_name_case.uppercase,\n    indentation: \"      \",\n    align_port_generic: true,\n    align_comment: false,\n    remove_comments: false,\n    remove_reports: false,\n    check_alias: false,\n    new_line_after_then: cfg.e_formatter_standalone_new_line_after_then.new_line,\n    new_line_after_semicolon: cfg.e_formatter_standalone_new_line_after_semicolon.new_line,\n    new_line_after_else: cfg.e_formatter_standalone_new_line_after_else.none,\n    new_line_after_port: cfg.e_formatter_standalone_new_line_after_port.none,\n    new_line_after_generic: cfg.e_formatter_standalone_new_line_after_generic.none,\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "55bd6946-445e-4a20-84c4-017e0e950701",
              "parentUUID": "4329d98d-d710-4941-b53d-d72f00ff46a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5b320a8-7044-4f69-b750-b334c17e92ff",
            "55bd6946-445e-4a20-84c4-017e0e950701"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76b4e96c-cfde-4963-895c-aa3e54f55331",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "b52a9e6a-6ee2-4fa0-818b-34b520b0ccdf",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "d83bd453-06c7-4bd3-8949-8cce6f976323",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "2edd2a0c-03b6-49db-aa90-f35c40c8b6a2",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 2",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 2",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = {\n    style: style_inst,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "33f337ae-f67f-4805-81ec-7a8e4b504134",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "c832625c-f37b-4bca-bb49-88905d1d6948",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "325d6994-6283-41f5-bfc4-8921a3402409",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "800c1b00-586a-40a1-97b7-51a6d1c61845",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check indent_only with indent = 6",
              "fullTitle": "Check istyle formatter Check indent_only with indent = 6",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = {\n    style: style_inst,\n    indentation_size: 6\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "d361ea24-c43f-4b70-a818-60663d67ac18",
              "parentUUID": "76b4e96c-cfde-4963-895c-aa3e54f55331",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b52a9e6a-6ee2-4fa0-818b-34b520b0ccdf",
            "d83bd453-06c7-4bd3-8949-8cce6f976323",
            "2edd2a0c-03b6-49db-aa90-f35c40c8b6a2",
            "33f337ae-f67f-4805-81ec-7a8e4b504134",
            "c832625c-f37b-4bca-bb49-88905d1d6948",
            "325d6994-6283-41f5-bfc4-8921a3402409",
            "800c1b00-586a-40a1-97b7-51a6d1c61845",
            "d361ea24-c43f-4b70-a818-60663d67ac18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "16e5082f-4db5-4e44-84c6-75d9a994ca58",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri/colibri/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: false,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "0d0eb7dd-a742-4de7-9b9c-2b0afc310c8c",
              "parentUUID": "16e5082f-4db5-4e44-84c6-75d9a994ca58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    one_bind_per_line: true,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 4\n};\nawait format_and_check(formatter_name, language, test_index, options, \"\");",
              "err": {},
              "uuid": "6c99a4c6-bb88-473b-a0a6-9fcd4df2c8fe",
              "parentUUID": "16e5082f-4db5-4e44-84c6-75d9a994ca58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    one_bind_per_line: false,\n    one_declaration_per_line: true,\n    use_tabs: true,\n    indentation_size: 2\n};\nawait format_and_check(formatter_name, language, test_index, options, \"asdf\");",
              "err": {},
              "uuid": "d64d0f3e-0398-4e56-9b88-6a4704051e67",
              "parentUUID": "16e5082f-4db5-4e44-84c6-75d9a994ca58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d0eb7dd-a742-4de7-9b9c-2b0afc310c8c",
            "6c99a4c6-bb88-473b-a0a6-9fcd4df2c8fe",
            "d64d0f3e-0398-4e56-9b88-6a4704051e67"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 534,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a4c4a3d-590b-4edd-9005-5de6490712c4",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "28fa25e2-5961-4626-9b95-020ab8d995f4",
              "parentUUID": "9a4c4a3d-590b-4edd-9005-5de6490712c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28fa25e2-5961-4626-9b95-020ab8d995f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 134,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bdca82e7-a63f-42b1-86f8-27e228e00098",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "9bae9fab-f3b4-4b64-8317-01de6982245a",
              "parentUUID": "bdca82e7-a63f-42b1-86f8-27e228e00098",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bae9fab-f3b4-4b64-8317-01de6982245a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2a73de25-6505-4ec8-b154-ce230ff3d136",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9cd91b5-8cea-460c-9a33-d56296648510",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 202,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "a520df30-6468-4b54-8c19-f28ad9acc382",
                  "parentUUID": "a9cd91b5-8cea-460c-9a33-d56296648510",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "6988db60-b1bb-4d65-9a54-9e6a60e2cb2a",
                  "parentUUID": "a9cd91b5-8cea-460c-9a33-d56296648510",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "7a775a0a-6275-48ef-bf05-887f4b994ce3",
                  "parentUUID": "a9cd91b5-8cea-460c-9a33-d56296648510",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6988db60-b1bb-4d65-9a54-9e6a60e2cb2a",
                "7a775a0a-6275-48ef-bf05-887f4b994ce3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "584fe594-dd08-4717-816a-a50159090b9e",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 259,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "63dcf9be-5905-47fa-bab6-ec57a0c3e277",
                  "parentUUID": "584fe594-dd08-4717-816a-a50159090b9e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "a579a29e-1306-4132-bc24-071e390f45cb",
                  "parentUUID": "584fe594-dd08-4717-816a-a50159090b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "58379669-ad3f-4fbd-b968-a79b0db249d5",
                  "parentUUID": "584fe594-dd08-4717-816a-a50159090b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "30861f92-28e0-4a1c-b23b-fb5b3b737fd6",
                  "parentUUID": "584fe594-dd08-4717-816a-a50159090b9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "e751f818-a3c8-48cc-b094-87b0341e615f",
                  "parentUUID": "584fe594-dd08-4717-816a-a50159090b9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a579a29e-1306-4132-bc24-071e390f45cb",
                "58379669-ad3f-4fbd-b968-a79b0db249d5",
                "30861f92-28e0-4a1c-b23b-fb5b3b737fd6",
                "e751f818-a3c8-48cc-b094-87b0341e615f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 198,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "611289c8-f6dd-425d-a87a-fb3f9c5bdad0",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "afecff71-40f1-4952-bb22-5c1198779772",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "cd88ff7a-8473-44ed-8b3e-2693ffb9d411",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "082b8913-894e-4dc2-88aa-7d03e66dd994",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0058beaf-5574-48e7-bc1f-a93957684f6a",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "8a23f986-e1f9-4320-bb8f-c55298f1d7e0",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "07ef7b15-d222-447e-bbe9-d11606dc496e",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "b931fef6-0d53-4731-84f5-a728bb9efe97",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "67870d9f-626c-46cf-84e4-af8000ab7154",
                  "parentUUID": "6b226d09-99b0-45c7-91fd-db7d8e3a943e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afecff71-40f1-4952-bb22-5c1198779772",
                "cd88ff7a-8473-44ed-8b3e-2693ffb9d411",
                "082b8913-894e-4dc2-88aa-7d03e66dd994",
                "0058beaf-5574-48e7-bc1f-a93957684f6a",
                "8a23f986-e1f9-4320-bb8f-c55298f1d7e0",
                "b931fef6-0d53-4731-84f5-a728bb9efe97",
                "67870d9f-626c-46cf-84e4-af8000ab7154"
              ],
              "failures": [],
              "pending": [
                "07ef7b15-d222-447e-bbe9-d11606dc496e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bed0baf9-9224-42cf-9086-de46c491dec5",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 239,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "4ea74564-f8ea-4d99-a46a-e08d87e4b3c8",
                  "parentUUID": "bed0baf9-9224-42cf-9086-de46c491dec5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "b8d4fa9b-74bf-42ba-bc81-a769bab3c4f9",
                  "parentUUID": "bed0baf9-9224-42cf-9086-de46c491dec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "6f2b468f-d720-4b97-95f6-b2b8960b5bc9",
                  "parentUUID": "bed0baf9-9224-42cf-9086-de46c491dec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "6504fed9-051c-49fa-9046-65e4195bdc93",
                  "parentUUID": "bed0baf9-9224-42cf-9086-de46c491dec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "c81fa44c-b05c-40b8-a457-d91050054b92",
                  "parentUUID": "bed0baf9-9224-42cf-9086-de46c491dec5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8d4fa9b-74bf-42ba-bc81-a769bab3c4f9",
                "6f2b468f-d720-4b97-95f6-b2b8960b5bc9",
                "6504fed9-051c-49fa-9046-65e4195bdc93",
                "c81fa44c-b05c-40b8-a457-d91050054b92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01a71cac-cb49-483f-863f-b01671ef3513",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 188,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "69f0788a-6694-4031-97a4-683ca76a8a1c",
                  "parentUUID": "01a71cac-cb49-483f-863f-b01671ef3513",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "27ee2a5d-7673-40b0-980d-523ba3043286",
                  "parentUUID": "01a71cac-cb49-483f-863f-b01671ef3513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27ee2a5d-7673-40b0-980d-523ba3043286"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a1b808b-9674-477f-aa42-910bdf7e7891",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 269,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "47657649-bf97-4f72-bc63-9d8684cd6e6b",
                  "parentUUID": "7a1b808b-9674-477f-aa42-910bdf7e7891",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "3cb98442-5a6d-4c5d-9871-0a859a64d066",
                  "parentUUID": "7a1b808b-9674-477f-aa42-910bdf7e7891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cb98442-5a6d-4c5d-9871-0a859a64d066"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 250,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "ac387264-57b3-4be8-a664-41f8dcf40fd9",
                  "parentUUID": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "113540ca-b529-4cdb-8823-595324bb675b",
                  "parentUUID": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "f26dd58d-8275-4fed-8bfb-61e17f3f8888",
                  "parentUUID": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "b795f12e-7c9a-4486-85eb-3ec83cb5d20c",
                  "parentUUID": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "c8c58f54-c6cf-46c8-951e-277fe563be14",
                  "parentUUID": "8edbff09-099e-4c1e-8ca8-2eb56010d761",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "113540ca-b529-4cdb-8823-595324bb675b",
                "f26dd58d-8275-4fed-8bfb-61e17f3f8888",
                "b795f12e-7c9a-4486-85eb-3ec83cb5d20c",
                "c8c58f54-c6cf-46c8-951e-277fe563be14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c2caf676-cf35-40f5-a39e-ad1c11348e61",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 341,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "ce2defcf-b183-4553-bf2b-d100d3b40cdd",
                  "parentUUID": "c2caf676-cf35-40f5-a39e-ad1c11348e61",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "b9945d49-e004-47a7-a7d1-17d15210c2c5",
                  "parentUUID": "c2caf676-cf35-40f5-a39e-ad1c11348e61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9945d49-e004-47a7-a7d1-17d15210c2c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "af3d4d6c-65c4-428b-b599-4b37c24a8803",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9f38a15-1179-4979-8713-20aa6d87ba06",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 257,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "a96c9596-95de-4ed4-b2e5-ce48875f2a3e",
                  "parentUUID": "a9f38a15-1179-4979-8713-20aa6d87ba06",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "8ed4d67b-2975-45e7-b6cf-2f8e52eba667",
                  "parentUUID": "a9f38a15-1179-4979-8713-20aa6d87ba06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "094cd428-e5fe-4d75-97b8-2f340c05cd56",
                  "parentUUID": "a9f38a15-1179-4979-8713-20aa6d87ba06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ed4d67b-2975-45e7-b6cf-2f8e52eba667",
                "094cd428-e5fe-4d75-97b8-2f340c05cd56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "700b58bd-5b43-4a9c-848d-520db2d5a418",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 351,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "ad2ef63c-94ec-4d9f-9eb6-79422c315367",
                  "parentUUID": "700b58bd-5b43-4a9c-848d-520db2d5a418",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "d24ca5aa-17fe-41f4-ae56-9326dbef7c57",
                  "parentUUID": "700b58bd-5b43-4a9c-848d-520db2d5a418",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "078cbae1-da2d-4275-8a27-f7a1d7f83106",
                  "parentUUID": "700b58bd-5b43-4a9c-848d-520db2d5a418",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d24ca5aa-17fe-41f4-ae56-9326dbef7c57",
                "078cbae1-da2d-4275-8a27-f7a1d7f83106"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a5d5d72-78c7-4adf-8797-adefde433b61",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 272,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "d1159888-e72a-4603-aaff-0538adbb2688",
                  "parentUUID": "6a5d5d72-78c7-4adf-8797-adefde433b61",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "314fdeb9-e678-4faf-8f40-e9d7daf7f199",
                  "parentUUID": "6a5d5d72-78c7-4adf-8797-adefde433b61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "314fdeb9-e678-4faf-8f40-e9d7daf7f199"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "904930be-c88c-47a3-b2fb-41390230bc1d",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0992786c-4bdb-4be7-bc9d-b1ae79edf044",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 333,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "7d2cc31b-7486-45e8-964a-0d047826c374",
                  "parentUUID": "0992786c-4bdb-4be7-bc9d-b1ae79edf044",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "668e0cf9-5c28-4ad2-9b99-0700f387ce92",
                  "parentUUID": "0992786c-4bdb-4be7-bc9d-b1ae79edf044",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "d4840d1f-2dd9-4a38-b2b3-80d929a831ef",
                  "parentUUID": "0992786c-4bdb-4be7-bc9d-b1ae79edf044",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "668e0cf9-5c28-4ad2-9b99-0700f387ce92",
                "d4840d1f-2dd9-4a38-b2b3-80d929a831ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75d43c00-b273-444e-9b90-b3c5c15e49ff",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 235,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "8f1e6656-0fe7-4cbe-8adf-dae7b24e6b84",
                  "parentUUID": "75d43c00-b273-444e-9b90-b3c5c15e49ff",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "d8a98098-b953-4452-ae33-6d99331e4f11",
                  "parentUUID": "75d43c00-b273-444e-9b90-b3c5c15e49ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "e07c384f-0759-4843-a5cb-019da7db57d7",
                  "parentUUID": "75d43c00-b273-444e-9b90-b3c5c15e49ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "3a847b67-9ad1-4e6d-aee2-0070204af2fc",
                  "parentUUID": "75d43c00-b273-444e-9b90-b3c5c15e49ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8a98098-b953-4452-ae33-6d99331e4f11",
                "e07c384f-0759-4843-a5cb-019da7db57d7",
                "3a847b67-9ad1-4e6d-aee2-0070204af2fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc34b2f6-8eb8-4b2a-bc50-79fd21044f30",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 335,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "a0517063-5584-4921-991b-19214dbeb1dc",
                  "parentUUID": "fc34b2f6-8eb8-4b2a-bc50-79fd21044f30",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "ecb6a1d5-782a-437c-8d89-db974d37d8bd",
                  "parentUUID": "fc34b2f6-8eb8-4b2a-bc50-79fd21044f30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecb6a1d5-782a-437c-8d89-db974d37d8bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4678c9e-725a-40a4-8678-59779dbf5a9e",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 269,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "0e97c0de-8372-44e0-8213-a1fa4b8d4b71",
                  "parentUUID": "c4678c9e-725a-40a4-8678-59779dbf5a9e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "994e7446-a9c1-4a88-a69a-74347fce0522",
                  "parentUUID": "c4678c9e-725a-40a4-8678-59779dbf5a9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "9d9880ed-b000-468c-beea-ea0e1088bed9",
                  "parentUUID": "c4678c9e-725a-40a4-8678-59779dbf5a9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "994e7446-a9c1-4a88-a69a-74347fce0522",
                "9d9880ed-b000-468c-beea-ea0e1088bed9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40c9fc55-5423-460e-af2f-f43523d9b5b2",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cdba780c-3ab8-4564-9263-c35a775b53c9",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "4d488c70-143e-401f-adc6-df2a60e395c4",
                  "parentUUID": "cdba780c-3ab8-4564-9263-c35a775b53c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "f1905799-8b07-49aa-a20d-d80bc686176f",
                  "parentUUID": "cdba780c-3ab8-4564-9263-c35a775b53c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "a9912eb2-6e50-4ac9-96d7-2b1b56ca17d4",
                  "parentUUID": "cdba780c-3ab8-4564-9263-c35a775b53c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1905799-8b07-49aa-a20d-d80bc686176f",
                "a9912eb2-6e50-4ac9-96d7-2b1b56ca17d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34170f61-b35e-4319-9d02-6db4102c8233",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "a990d67c-8733-4da1-8c11-aa34240d02d4",
                  "parentUUID": "34170f61-b35e-4319-9d02-6db4102c8233",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "77ec5720-e6f7-4263-9a84-20c3ef4ebb02",
                  "parentUUID": "34170f61-b35e-4319-9d02-6db4102c8233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "fce36157-0527-4597-a7ee-642531bc519a",
                  "parentUUID": "34170f61-b35e-4319-9d02-6db4102c8233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "ea4b8a6b-9d9b-4d5c-b150-0ae18d7eb5f3",
                  "parentUUID": "34170f61-b35e-4319-9d02-6db4102c8233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "9fa583fd-744a-4a40-8ba6-194a3c58b003",
                  "parentUUID": "34170f61-b35e-4319-9d02-6db4102c8233",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77ec5720-e6f7-4263-9a84-20c3ef4ebb02",
                "fce36157-0527-4597-a7ee-642531bc519a",
                "ea4b8a6b-9d9b-4d5c-b150-0ae18d7eb5f3",
                "9fa583fd-744a-4a40-8ba6-194a3c58b003"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "e7082b94-154c-413a-82a2-2c69f337f215",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "6ca99acd-d5fd-4dd4-b264-d04c6bc905b0",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "012dd746-2b74-4ae0-9081-72a0ddac7d20",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "e2c1ae26-805a-407f-8116-3e0fdbe652c1",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9af0ebb0-16d5-43f2-ad7c-839e444ab425",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9376c948-f624-4765-8fd4-36ab297eac00",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "08e07864-d790-4aa8-bf1c-7ea9fabe704b",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9a822d90-d7d1-4143-a67c-3be0807c0fb1",
                  "parentUUID": "1409ef33-d8ed-465c-9070-9c81b6cb24bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ca99acd-d5fd-4dd4-b264-d04c6bc905b0",
                "012dd746-2b74-4ae0-9081-72a0ddac7d20",
                "e2c1ae26-805a-407f-8116-3e0fdbe652c1",
                "9af0ebb0-16d5-43f2-ad7c-839e444ab425",
                "9376c948-f624-4765-8fd4-36ab297eac00",
                "08e07864-d790-4aa8-bf1c-7ea9fabe704b",
                "9a822d90-d7d1-4143-a67c-3be0807c0fb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfc1a36e-63b3-42a1-af3d-f8ef704ed3a0",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "0698a668-a4a6-4419-8175-9e64c90dc8d6",
                  "parentUUID": "dfc1a36e-63b3-42a1-af3d-f8ef704ed3a0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "4f5755d9-6b63-4fe8-b6aa-537966a68c79",
                  "parentUUID": "dfc1a36e-63b3-42a1-af3d-f8ef704ed3a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "41c39d24-9024-47b9-a778-adc5b913dfde",
                  "parentUUID": "dfc1a36e-63b3-42a1-af3d-f8ef704ed3a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "428207b9-056c-4994-b1ae-8977c436ed18",
                  "parentUUID": "dfc1a36e-63b3-42a1-af3d-f8ef704ed3a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f5755d9-6b63-4fe8-b6aa-537966a68c79",
                "41c39d24-9024-47b9-a778-adc5b913dfde",
                "428207b9-056c-4994-b1ae-8977c436ed18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "882931c4-577a-42dc-92fb-ed4913b71b5c",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "35f80914-df1a-46de-9316-9f5da8d2298e",
                  "parentUUID": "882931c4-577a-42dc-92fb-ed4913b71b5c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "d584c359-9ba5-4234-87aa-c04aa026a791",
                  "parentUUID": "882931c4-577a-42dc-92fb-ed4913b71b5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "8fd04648-1857-4736-ac79-234410485713",
                  "parentUUID": "882931c4-577a-42dc-92fb-ed4913b71b5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d584c359-9ba5-4234-87aa-c04aa026a791",
                "8fd04648-1857-4736-ac79-234410485713"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f53cb06-09de-4854-afe8-f5d114f8165a",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "27284763-73d4-4c2d-af7d-b2eb92e85704",
                  "parentUUID": "6f53cb06-09de-4854-afe8-f5d114f8165a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "35796577-f34d-46f9-9442-6287e8bc74c7",
                  "parentUUID": "6f53cb06-09de-4854-afe8-f5d114f8165a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35796577-f34d-46f9-9442-6287e8bc74c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6e52b77-8da4-4b27-9f6a-11472461d315",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "b6ba13ab-a07c-42ac-9b21-9a43eac1c80f",
                  "parentUUID": "f6e52b77-8da4-4b27-9f6a-11472461d315",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "3ec5bdde-9730-4a05-8fed-38b5137e0e29",
                  "parentUUID": "f6e52b77-8da4-4b27-9f6a-11472461d315",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ec5bdde-9730-4a05-8fed-38b5137e0e29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bab484d2-6b58-4fc4-a254-8ac5321c95f0",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 145,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "f1383590-2676-4173-8617-fb8f63d096ba",
                  "parentUUID": "bab484d2-6b58-4fc4-a254-8ac5321c95f0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "7fdf63e1-aa6d-4785-90c2-5c0779c4b6a9",
                  "parentUUID": "bab484d2-6b58-4fc4-a254-8ac5321c95f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "6055967e-07af-4f1f-9608-fdcf77e4d379",
                  "parentUUID": "bab484d2-6b58-4fc4-a254-8ac5321c95f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "1a8ccd18-83aa-4dc3-820d-8cac0069312f",
                  "parentUUID": "bab484d2-6b58-4fc4-a254-8ac5321c95f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fdf63e1-aa6d-4785-90c2-5c0779c4b6a9",
                "6055967e-07af-4f1f-9608-fdcf77e4d379",
                "1a8ccd18-83aa-4dc3-820d-8cac0069312f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bd5b568-ddb2-4897-9438-ca487a0416f6",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 27,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "e5e92e36-1f28-4a38-9551-4be12b4f9403",
                  "parentUUID": "9bd5b568-ddb2-4897-9438-ca487a0416f6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "aed58c92-ff9b-4499-a8e7-ad7994702de6",
                  "parentUUID": "9bd5b568-ddb2-4897-9438-ca487a0416f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "97f9b039-1495-47df-a6ae-64099b74f368",
                  "parentUUID": "9bd5b568-ddb2-4897-9438-ca487a0416f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aed58c92-ff9b-4499-a8e7-ad7994702de6",
                "97f9b039-1495-47df-a6ae-64099b74f368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08c5b128-bb3f-410a-833b-cddccb84d12f",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0af0d666-cfcc-4715-b203-940b50f8a1e7",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "3465294f-5050-4369-afd0-206c5b9a4142",
                  "parentUUID": "0af0d666-cfcc-4715-b203-940b50f8a1e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "b22d8427-2931-435c-8784-c11e032ccd6f",
                  "parentUUID": "0af0d666-cfcc-4715-b203-940b50f8a1e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "ce59144a-b049-406b-968c-ed51f70d0a2f",
                  "parentUUID": "0af0d666-cfcc-4715-b203-940b50f8a1e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b22d8427-2931-435c-8784-c11e032ccd6f",
                "ce59144a-b049-406b-968c-ed51f70d0a2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3face7bb-9698-4c1b-854f-633a33faec96",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "3ba60cf1-f07a-4814-bf77-272baf564615",
                  "parentUUID": "3face7bb-9698-4c1b-854f-633a33faec96",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "c2619fc8-0a3d-4388-b150-4c8f055e7bca",
                  "parentUUID": "3face7bb-9698-4c1b-854f-633a33faec96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "9d25b920-be21-4414-8d3b-ce29002bbcca",
                  "parentUUID": "3face7bb-9698-4c1b-854f-633a33faec96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "3d17b7a2-687d-42c8-87a2-834eaa9db01d",
                  "parentUUID": "3face7bb-9698-4c1b-854f-633a33faec96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2619fc8-0a3d-4388-b150-4c8f055e7bca",
                "9d25b920-be21-4414-8d3b-ce29002bbcca",
                "3d17b7a2-687d-42c8-87a2-834eaa9db01d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98b6e163-2b95-4301-827c-4fb11c41c8e4",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "de7ffafa-8113-4013-ab43-7f3958be8908",
                  "parentUUID": "98b6e163-2b95-4301-827c-4fb11c41c8e4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "86c39b9e-9fce-4646-a6fd-ddb08f4e9101",
                  "parentUUID": "98b6e163-2b95-4301-827c-4fb11c41c8e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0fc4955a-bb03-4d14-b6bc-2225bcee70ff",
                  "parentUUID": "98b6e163-2b95-4301-827c-4fb11c41c8e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "41421592-d4e2-4497-91c1-273c820eef4a",
                  "parentUUID": "98b6e163-2b95-4301-827c-4fb11c41c8e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86c39b9e-9fce-4646-a6fd-ddb08f4e9101",
                "0fc4955a-bb03-4d14-b6bc-2225bcee70ff",
                "41421592-d4e2-4497-91c1-273c820eef4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7068bf22-da7d-4729-89e3-d9a024eb847d",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "dbbafacf-841e-4d1d-aa04-e3b6fce0b671",
                  "parentUUID": "7068bf22-da7d-4729-89e3-d9a024eb847d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "585c6da4-0889-4caf-b93c-907c4f1fb1bb",
                  "parentUUID": "7068bf22-da7d-4729-89e3-d9a024eb847d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "585c6da4-0889-4caf-b93c-907c4f1fb1bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "614dd7d6-180c-4083-bd20-1ef03cc8c132",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri/colibri/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "93c8a22d-c4bd-441f-8562-70e36a146be4",
                  "parentUUID": "614dd7d6-180c-4083-bd20-1ef03cc8c132",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "ab1aca9b-e78c-45b1-aaf9-a9afa6088e35",
                  "parentUUID": "614dd7d6-180c-4083-bd20-1ef03cc8c132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab1aca9b-e78c-45b1-aaf9-a9afa6088e35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dc7452d8-d48a-4ecd-a3c4-c6f618577d9d",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "b8dcbf53-e179-4739-a553-dd97ea862f9b",
              "parentUUID": "dc7452d8-d48a-4ecd-a3c4-c6f618577d9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "69fe0888-da4b-4941-946d-6fdd551226c3",
              "parentUUID": "dc7452d8-d48a-4ecd-a3c4-c6f618577d9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8dcbf53-e179-4739-a553-dd97ea862f9b",
            "69fe0888-da4b-4941-946d-6fdd551226c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5addce76-45e4-4150-b352-9843f08fb4a5",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "b57a6b7e-7d3a-4307-aa63-4e311c45f6af",
              "parentUUID": "5addce76-45e4-4150-b352-9843f08fb4a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b57a6b7e-7d3a-4307-aa63-4e311c45f6af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32863197-94fa-4aa1-aece-838f5360f9ed",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri/colibri/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "7a171a2d-2b8b-4bc4-a4c1-c0b5de506eb8",
              "parentUUID": "32863197-94fa-4aa1-aece-838f5360f9ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "c431e662-e075-4cb6-94aa-112b6fe70ef6",
              "parentUUID": "32863197-94fa-4aa1-aece-838f5360f9ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "ece1ab15-1e28-40f4-911b-3d044da90ca1",
              "parentUUID": "32863197-94fa-4aa1-aece-838f5360f9ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "44495939-8ed6-4cfe-a0ce-dd1bd589337b",
              "parentUUID": "32863197-94fa-4aa1-aece-838f5360f9ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "dcfa6ccc-82e2-41a4-bf5e-68b36dbf1138",
              "parentUUID": "32863197-94fa-4aa1-aece-838f5360f9ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a171a2d-2b8b-4bc4-a4c1-c0b5de506eb8",
            "c431e662-e075-4cb6-94aa-112b6fe70ef6",
            "ece1ab15-1e28-40f4-911b-3d044da90ca1",
            "44495939-8ed6-4cfe-a0ce-dd1bd589337b",
            "dcfa6ccc-82e2-41a4-bf5e-68b36dbf1138"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 826,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64c89571-1dbf-4cb9-bc13-6027861c2f5d",
          "title": "Check dependency graph",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency graph Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_graph(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_graph.svg');\nfs.writeFileSync(output_path, result.result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_graph.svg');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(result.result, expected);",
              "err": {},
              "uuid": "6c5018d1-95a2-4186-9bdd-94abe0f15cb9",
              "parentUUID": "64c89571-1dbf-4cb9-bc13-6027861c2f5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "6c5018d1-95a2-4186-9bdd-94abe0f15cb9"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd2f9452-be89-42e9-a9a2-262786fd60b9",
          "title": "Check compile order",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check compile order Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_compile_order(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'compile_order.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'compile_order.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "224477b6-dc8f-49a3-b149-711b198adc0a",
              "parentUUID": "fd2f9452-be89-42e9-a9a2-262786fd60b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "224477b6-dc8f-49a3-b149-711b198adc0a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb7e1074-afb7-4194-ab40-a30c88f9611c",
          "title": "Check dependency tree",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/dependency/dependency.spec.ts",
          "file": "/tests/project_manager/dependency/dependency.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check mixed Verilog, VHDL and VHDL with libraries",
              "fullTitle": "Check dependency tree Check mixed Verilog, VHDL and VHDL with libraries",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst prj = new project_manager_1.Project_manager(\"sample-prj\");\nconst file_list = get_test_files();\nfile_list.forEach(file_inst => {\n    prj.add_file(file_inst);\n});\nconst result = await prj.get_dependency_tree(\"\");\n(0, assert_1.equal)(result.successful, true, result.msg);\nconst str_result = JSON.stringify(result.result);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'dependency_tree.txt');\nfs.writeFileSync(output_path, str_result);\nconst input_path = paht_lib.join(C_EXPECTED_BASE_PATH, 'dependency_tree.txt');\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(str_result, expected);",
              "err": {},
              "uuid": "c1ff8ae6-0aff-4daa-af3d-08326e4e87ed",
              "parentUUID": "fb7e1074-afb7-4194-ab40-a30c88f9611c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "c1ff8ae6-0aff-4daa-af3d-08326e4e87ed"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
          "title": "Check multi project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/multi_project_manager.spec.ts",
          "file": "/tests/project_manager/project/multi_project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check multi project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = multi_prj.get_name();\nchai_1.assert.equal(prj_name, MULTI_PRJ_NAME, \"Error in project name.\");",
              "err": {},
              "uuid": "f6a9aa0b-a24f-453f-879d-24bacceae65b",
              "parentUUID": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 3 projects",
              "fullTitle": "Check multi project manager Add 3 projects",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create projects\nmulti_prj.create_project(prj_0.name);\nmulti_prj.create_project(prj_1.name);\nmulti_prj.create_project(prj_2.name);\n// Add files\nadd_files(multi_prj, prj_0);\nadd_files(multi_prj, prj_1);\nadd_files(multi_prj, prj_2);\n// Check\ncheck_project(multi_prj, prj_0);\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "ce74061f-223a-4667-9c9c-c99c22b65b91",
              "parentUUID": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check multi project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const new_name = 'new-name';\n// Rename project\nmulti_prj.rename_project(prj_0.name, new_name);\n// Check\nprj_0.name = new_name;\ncheck_project(multi_prj, prj_0);",
              "err": {},
              "uuid": "c38f89bf-6ce7-4d60-8c18-c04b744a2dae",
              "parentUUID": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete one",
              "fullTitle": "Check multi project manager Delete one",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete project\nmulti_prj.delete_project(prj_0.name);\n// Check number of projects\nchai_1.assert.equal(multi_prj.get_projects().length, 2);\n// Check projects\ncheck_project(multi_prj, prj_1);\ncheck_project(multi_prj, prj_2);",
              "err": {},
              "uuid": "9433a4cf-a96d-4eef-91c7-6bf61b0fac9d",
              "parentUUID": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Select project",
              "fullTitle": "Check multi project manager Select project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select project\nlet result = multi_prj.select_project_current(prj_1.name);\nchai_1.assert.equal(result.successful, true);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);\n// Select project doesn't exist\nresult = multi_prj.select_project_current(prj_0.name);\nchai_1.assert.equal(result.successful, false);\nchai_1.assert.equal(multi_prj.get_select_project().successful, true);",
              "err": {},
              "uuid": "0841cf25-221b-48fe-ae2c-57a4b9c62ba0",
              "parentUUID": "f5ea4def-d687-4570-b19d-3a5abbe7b860",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6a9aa0b-a24f-453f-879d-24bacceae65b",
            "ce74061f-223a-4667-9c9c-c99c22b65b91",
            "c38f89bf-6ce7-4d60-8c18-c04b744a2dae",
            "9433a4cf-a96d-4eef-91c7-6bf61b0fac9d",
            "0841cf25-221b-48fe-ae2c-57a4b9c62ba0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
          "title": "Check project manager",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/project/project_manager.spec.ts",
          "file": "/tests/project_manager/project/project_manager.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get name after creation",
              "fullTitle": "Check project manager Get name after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_0, \"Error in project name.\");",
              "err": {},
              "uuid": "f2e3ce32-a504-4382-8b75-39549d29294c",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rename project",
              "fullTitle": "Check project manager Rename project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Rename project\nconst PRJ_NAME_1 = \"my-prj-1\";\nprj.rename(PRJ_NAME_1);\n// Check project name\nconst prj_name = prj.get_name();\nchai_1.assert.equal(prj_name, PRJ_NAME_1, \"Error in project name.\");",
              "err": {},
              "uuid": "90370ef6-73ba-414c-bec1-2545359a7dd5",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add 2 individual files",
              "fullTitle": "Check project manager Add 2 individual files",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Add file 0\nprj.add_file(file_0);\n// Add file 1\nprj.add_file(file_1);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 2, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_0.name, \"Error name file 0.\");\nchai_1.assert.equal(file_list[1].name, file_1.name, \"Error name file 1.\");",
              "err": {},
              "uuid": "6e23a0c6-666c-40c1-95ee-f55be75e5772",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete file",
              "fullTitle": "Check project manager Delete file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete file 0\nprj.delete_file(file_0.name, file_0.logical_name);\n// Check files\nconst file_list = prj.get_project_definition().file_manager.get();\nchai_1.assert.equal(file_list.length, 1, \"Error number of files.\");\nchai_1.assert.equal(file_list[0].name, file_1.name, \"Error name file 0.\");",
              "err": {},
              "uuid": "79b4a5a6-dbe5-4c3a-b409-f7d720c8f2ff",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "File in project",
              "fullTitle": "Check project manager File in project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// File 1 in project\nconst check_0 = prj.check_if_file_in_project(file_1.name, file_1.logical_name);\nchai_1.assert.equal(check_0, true, \"Error file 1 in project.\");\n// File random 0 not in project\nconst check_1 = prj.check_if_file_in_project('asd', file_1.logical_name);\nchai_1.assert.equal(check_1, false, \"Error file random name in project.\");\n// File random 1 not in project\nconst check_2 = prj.check_if_file_in_project(file_1.name, 'efg');\nchai_1.assert.equal(check_2, false, \"Error file random logical name in project.\");",
              "err": {},
              "uuid": "78b9a8f0-5a4e-4a57-b5a0-af10c1120f8d",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set and get config",
              "fullTitle": "Check project manager Set and get config",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myconfig = cfg.get_default_config();\nmyconfig.editor.general.continue_comment = true;\nmyconfig.documentation.general.symbol_vhdl = 'asdf';\n// Set config\nprj.set_config(myconfig);\n// Get config\nconst prj_config = prj.get_config();\n//Check config\nchai_1.assert.equal(prj_config, myconfig, \"Error in config.\");",
              "err": {},
              "uuid": "9f058fc3-045c-4d28-bb86-de1f2db2d82d",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add files from CSV",
              "fullTitle": "Check project manager Add files from CSV",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CSV_PATH = paht_lib.join(__dirname, 'helpers', 'files.csv');\n// Add files\nprj.add_file_from_csv(CSV_PATH, true);\n// Get files\nconst file_list = prj.get_project_definition().file_manager.get();\n// Check file 2\nchai_1.assert.equal(file_list[1].name, file_2.name, \"Error name file 2.\");\nchai_1.assert.equal(file_list[1].logical_name, file_2.logical_name, \"Error logical name file 2.\");\n// Check file 3\nchai_1.assert.equal(file_list[2].name, file_3.name, \"Error name file 3.\");\nchai_1.assert.equal(file_list[2].logical_name, file_3.logical_name, \"Error logical name file 3.\");",
              "err": {},
              "uuid": "043dabb4-77af-4f2f-8794-37f6da8a4c39",
              "parentUUID": "39fa2e4e-c3ae-4ee8-8f6a-b42414329b39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f2e3ce32-a504-4382-8b75-39549d29294c",
            "90370ef6-73ba-414c-bec1-2545359a7dd5",
            "6e23a0c6-666c-40c1-95ee-f55be75e5772",
            "79b4a5a6-dbe5-4c3a-b409-f7d720c8f2ff",
            "78b9a8f0-5a4e-4a57-b5a0-af10c1120f8d",
            "9f058fc3-045c-4d28-bb86-de1f2db2d82d",
            "043dabb4-77af-4f2f-8794-37f6da8a4c39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c665cc1-cf1e-4586-a1bf-dcdade84a7aa",
          "title": "Check Edalize",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check GHDL",
              "fullTitle": "Check Edalize Check GHDL",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'ghdl');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder_tb.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'half_adder.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"ghdl-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].filename, file_0.name);\n(0, assert_1.equal)(test_list[0].name, 'half_adder_process_tb');\n// Run\nprj.set_config(config);\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "bcb8fc26-a044-40a6-8796-3f76fcfa9499",
              "parentUUID": "0c665cc1-cf1e-4586-a1bf-dcdade84a7aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "bcb8fc26-a044-40a6-8796-3f76fcfa9499"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56bb2b2c-ea89-40c7-a6ad-6fb77a5d75ce",
          "title": "Check VUnit",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check one tests in runpy",
              "fullTitle": "Check VUnit Check one tests in runpy",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_0.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 1);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "9297cc2c-32ae-43c3-8332-a9b82c1bd681",
              "parentUUID": "56bb2b2c-ea89-40c7-a6ad-6fb77a5d75ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check multiple tests in runpy",
              "fullTitle": "Check VUnit Check multiple tests in runpy",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.standalone;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'run_1.py'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, true);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "03e0133d-d416-49d2-b775-a1d962bd2fb9",
              "parentUUID": "56bb2b2c-ea89-40c7-a6ad-6fb77a5d75ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check runpy creation",
              "fullTitle": "Check VUnit Check runpy creation",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'vunit');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.vunit;\nconfig.tools.vunit.simulator_name = cfg.e_tools_vunit_simulator_name.ghdl;\nconfig.tools.vunit.runpy_mode = cfg.e_tools_vunit_runpy_mode.creation;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_counting_errors.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_1 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'tb_with_test_cases.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst file_2 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'test_control.vhd'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"vunit-prj\");\nprj.add_file(file_0);\nprj.add_file(file_1);\nprj.add_file(file_2);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 3);\n(0, assert_1.equal)(test_list[0].name, \"lib.tb_counting_errors.Test that fails multiple times but doesn't stop\");\n(0, assert_1.equal)(test_list[1].name, \"lib.tb_with_test_cases.Test to_string for integer\");\n(0, assert_1.equal)(test_list[2].name, \"lib.tb_with_test_cases.Test to_string for boolean\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n    (0, assert_1.equal)(result[2].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "7bd85a27-1427-4d45-aed8-9104f3af8e9d",
              "parentUUID": "56bb2b2c-ea89-40c7-a6ad-6fb77a5d75ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "9297cc2c-32ae-43c3-8332-a9b82c1bd681",
            "03e0133d-d416-49d2-b775-a1d962bd2fb9",
            "7bd85a27-1427-4d45-aed8-9104f3af8e9d"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e126528e-f485-4206-a98b-0f4eba6dccb7",
          "title": "Check cocotb",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check multiple tests",
              "fullTitle": "Check cocotb Check multiple tests",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n    (0, assert_1.equal)(result[1].successful, true);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "8044f6f0-995b-4c0e-adc4-eb0f26482527",
              "parentUUID": "e126528e-f485-4206-a98b-0f4eba6dccb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one test",
              "fullTitle": "Check cocotb Check one test",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Init\nconst C_TOOL_BASE_DIR = paht_lib.join(C_BASE_DIR, 'cocotb');\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.cocotb;\nconfig.tools.cocotb.simulator_name = cfg.e_tools_cocotb_simulator_name.ghdl;\n// Files\nconst file_0 = {\n    name: paht_lib.join(C_TOOL_BASE_DIR, 'Makefile'),\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\nconst prj = new project_manager_1.Project_manager(\"cocotb-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get tests\nconst test_list = await prj.get_test_list();\n(0, assert_1.equal)(test_list.length, 2);\n(0, assert_1.equal)(test_list[0].name, \"adder_basic_test\");\n(0, assert_1.equal)(test_list[1].name, \"adder_randomised_test\");\nconst selected_test = [test_list[0]];\n// Run\nprj.run(undefined, selected_test, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "c38d91f9-1b74-4bd9-bfaa-4f0da607d888",
              "parentUUID": "e126528e-f485-4206-a98b-0f4eba6dccb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "8044f6f0-995b-4c0e-adc4-eb0f26482527",
            "c38d91f9-1b74-4bd9-bfaa-4f0da607d888"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d95da3b2-635c-4ad9-9fcc-54950d936ee5",
          "title": "Check OSVVM",
          "fullFile": "/home/runner/work/colibri/colibri/tests/project_manager/tools/tools.spec.ts",
          "file": "/tests/project_manager/tools/tools.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Run test",
              "fullTitle": "Check OSVVM Run test",
              "timedOut": false,
              "duration": 1,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "due_skip(this);\n// Config\nconst config = cfg.get_default_config();\nconfig.tools.general.select_tool = cfg.e_tools_general_select_tool.osvvm;\nconfig.tools.osvvm.installation_path = \"/home/carlos/repo/osvvm/OsvvmLibraries/\";\nconfig.tools.osvvm.simulator_name = cfg.e_tools_osvvm_simulator_name.ghdl;\nconfig.tools.osvvm.tclsh_binary = \"tclsh8.6\";\n// Files\nconst file_0 = {\n    name: \"/home/carlos/repo/osvvm/OsvvmLibraries/UART/RunDemoTests.pro\",\n    is_include_file: false,\n    include_path: '',\n    is_manual: true,\n    logical_name: ''\n};\n// Create project\nconst prj = new project_manager_1.Project_manager(\"osvvm-prj\");\nprj.add_file(file_0);\n// Set top level path\nprj.add_toplevel_path(file_0.name);\n// Tool options\nprj.set_config(config);\n// Get testlist\nconst test_list = await prj.get_test_list();\n// Run\nprj.run(undefined, test_list, (result) => {\n    (0, assert_1.equal)(result[0].successful, false);\n}, printer_stream);\nfunction printer_stream(exec_i) {\n    exec_i.stdout.on('data', function (_data) {\n        // console.log(data);\n    });\n}",
              "err": {},
              "uuid": "ca71198a-29d4-4d00-b6a9-c7d2cce8b97d",
              "parentUUID": "d95da3b2-635c-4ad9-9fcc-54950d936ee5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ca71198a-29d4-4d00-b6a9-c7d2cce8b97d"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "91ad386b-a2d4-46ba-86a8-d6c46dfcb028",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "4d654f15-5cb8-4a63-8874-443cb8ad747c",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e053b483-8b11-47e7-9d41-971058c8f8d2",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "1596a96f-d872-4be4-947f-f02473d2668b",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "e64c20fd-fabc-45df-a331-48e2b238523f",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "df3bb472-cd17-4415-92dc-7bb2dcc7cd82",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "8d39bcdc-9aa5-4fa7-b12c-fc3dbadec038",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f6b4df65-6217-4de2-aca7-82ab01567206",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "5868b31a-d462-4e6e-b0f4-5f3a9def3e3b",
              "parentUUID": "8ffaac26-dfe4-4474-81d7-a1f5802cd409",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91ad386b-a2d4-46ba-86a8-d6c46dfcb028",
            "4d654f15-5cb8-4a63-8874-443cb8ad747c",
            "e053b483-8b11-47e7-9d41-971058c8f8d2",
            "1596a96f-d872-4be4-947f-f02473d2668b",
            "e64c20fd-fabc-45df-a331-48e2b238523f",
            "df3bb472-cd17-4415-92dc-7bb2dcc7cd82",
            "8d39bcdc-9aa5-4fa7-b12c-fc3dbadec038",
            "f6b4df65-6217-4de2-aca7-82ab01567206",
            "5868b31a-d462-4e6e-b0f4-5f3a9def3e3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 319,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri/colibri/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 244,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "06201fb3-5f12-4e49-9e9f-3091e004eccd",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "a92c6b7e-511d-4ffa-8d89-50bdff9c847d",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f5a1fead-3bfa-44f5-8a56-6fc1dadeb8ed",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "5a1b7ab6-5eb4-47d0-a660-efafc997544f",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "5dec5f55-cd3f-45fa-98b4-7080274e2b8d",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "8b0aa1b7-2491-4628-a5af-777dc312ab38",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "80d376fa-7959-47e2-b4c5-1025bd66a2d8",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: cfg.e_templates_general_instance_style.inline,\n    clock_generation_style: cfg.e_templates_general_clock_generation_style.ifelse\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = (0, file_utils_1.read_file_sync)(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "98a3a43f-14db-4c58-bd17-8767b8182007",
              "parentUUID": "59eaec94-7027-471e-9aa0-3f1f5c81ecdc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06201fb3-5f12-4e49-9e9f-3091e004eccd",
            "a92c6b7e-511d-4ffa-8d89-50bdff9c847d",
            "f5a1fead-3bfa-44f5-8a56-6fc1dadeb8ed",
            "5a1b7ab6-5eb4-47d0-a660-efafc997544f",
            "5dec5f55-cd3f-45fa-98b4-7080274e2b8d",
            "8b0aa1b7-2491-4628-a5af-777dc312ab38",
            "80d376fa-7959-47e2-b4c5-1025bd66a2d8",
            "98a3a43f-14db-4c58-bd17-8767b8182007"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2327,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76bfc262-bdce-4a7d-9704-02dd8896e342",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "4f781a89-3520-44bd-b15d-d34a3e1d39e6",
              "parentUUID": "76bfc262-bdce-4a7d-9704-02dd8896e342",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "a693068b-047b-487e-a08d-1f3565860964",
              "parentUUID": "76bfc262-bdce-4a7d-9704-02dd8896e342",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "9a4b3da1-789c-45b2-bafe-e102fa9f3300",
              "parentUUID": "76bfc262-bdce-4a7d-9704-02dd8896e342",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "d95c3a04-2888-4074-a642-bd8c93a3d4f4",
              "parentUUID": "76bfc262-bdce-4a7d-9704-02dd8896e342",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f781a89-3520-44bd-b15d-d34a3e1d39e6",
            "a693068b-047b-487e-a08d-1f3565860964",
            "9a4b3da1-789c-45b2-bafe-e102fa9f3300",
            "d95c3a04-2888-4074-a642-bd8c93a3d4f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c963b4a0-1be3-42a3-87d0-6addf05f41d1",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "15b47ccf-e058-417b-b1c8-901e1fbb0c9e",
              "parentUUID": "c963b4a0-1be3-42a3-87d0-6addf05f41d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "d228fc59-6655-4d23-b702-e5c1cd30adae",
              "parentUUID": "c963b4a0-1be3-42a3-87d0-6addf05f41d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15b47ccf-e058-417b-b1c8-901e1fbb0c9e",
            "d228fc59-6655-4d23-b702-e5c1cd30adae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6705efec-e40d-4ed4-b7d6-8bbc3716b07a",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "73acd8ed-3889-41a6-92a1-b4b38e76a15b",
              "parentUUID": "6705efec-e40d-4ed4-b7d6-8bbc3716b07a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73acd8ed-3889-41a6-92a1-b4b38e76a15b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d142b095-18c0-4a54-a188-42600cd5fbf4",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "43339102-fa1e-4073-a8dd-cb24702cbb96",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "35ab2a11-5a23-43cb-a27c-f276a16ae97c",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "341b2a49-ec5a-45a3-be31-e10dcdcf411e",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a8691f08-5afa-4b4e-8785-15fe3d807f13",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "96df9433-dbe6-4345-a860-0f1cdf62728f",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "17491e07-6a1c-49d0-8791-b9210c2f0049",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "946ed243-8177-4d45-ab55-60562c3d5f21",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b91e632f-8a25-4de7-b5bb-c734bca21ee6",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "009199f0-7c29-48ac-af22-fc5d7166efac",
              "parentUUID": "d142b095-18c0-4a54-a188-42600cd5fbf4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43339102-fa1e-4073-a8dd-cb24702cbb96",
            "35ab2a11-5a23-43cb-a27c-f276a16ae97c",
            "341b2a49-ec5a-45a3-be31-e10dcdcf411e",
            "a8691f08-5afa-4b4e-8785-15fe3d807f13",
            "96df9433-dbe6-4345-a860-0f1cdf62728f",
            "17491e07-6a1c-49d0-8791-b9210c2f0049",
            "946ed243-8177-4d45-ab55-60562c3d5f21",
            "b91e632f-8a25-4de7-b5bb-c734bca21ee6",
            "009199f0-7c29-48ac-af22-fc5d7166efac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "397a81d1-6b9c-4ddc-a417-f838f148af90",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri/colibri/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ef308fee-3b68-4da6-876a-26773f870115",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "c34e0cbc-ba8b-42bf-910c-479ce8ed0d7a",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "bcc55f6d-7ea8-42bd-98e3-219257b5ccd2",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "4a164285-0285-4326-a8be-e3592f1c03f9",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "3e0c2c2c-7992-4253-aa31-1bab62e78e98",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "dec3a9cd-1d45-4b33-a122-1e35c2dd01a6",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7c9656e8-7c34-44ba-87c6-81b5a5d769e3",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6aea83ad-7e3a-4bd6-8d99-b13d305ddf9e",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "1a30464b-2e60-43fb-81ba-dba8d7547037",
              "parentUUID": "397a81d1-6b9c-4ddc-a417-f838f148af90",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef308fee-3b68-4da6-876a-26773f870115",
            "c34e0cbc-ba8b-42bf-910c-479ce8ed0d7a",
            "bcc55f6d-7ea8-42bd-98e3-219257b5ccd2",
            "4a164285-0285-4326-a8be-e3592f1c03f9",
            "3e0c2c2c-7992-4253-aa31-1bab62e78e98",
            "dec3a9cd-1d45-4b33-a122-1e35c2dd01a6",
            "7c9656e8-7c34-44ba-87c6-81b5a5d769e3",
            "6aea83ad-7e3a-4bd6-8d99-b13d305ddf9e",
            "1a30464b-2e60-43fb-81ba-dba8d7547037"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "876dd41b-0b67-4901-b2b5-db1c1f2a817c",
        "097686a9-00d9-4599-a14f-51b5b3a281cf"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}